!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("jquery")):"function"==typeof define&&define.amd?define(["jquery"],e):"object"==typeof exports?exports.jQuery=e(require("jquery")):t.jQuery=e(t.jQuery)}(this,function(t){return function(t){function e(n){if(r[n])return r[n].exports;var o=r[n]={exports:{},id:n,loaded:!1};return t[n].call(o.exports,o,o.exports,e),o.loaded=!0,o.exports}var r={};return e.m=t,e.c=r,e.p="",e(0)}([function(t,e,r){(function(t){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),r(3),r(6),r(7),r(9),r(10),r(59),r(64),r(65),r(66),r(67),r(68),r(58),r(69),r(70),e["default"]=t}).call(e,r(1))},function(t,e,r){"use strict";function n(t){return t&&t.__esModule?t:{"default":t}}var o=r(2),i=n(o);if(!i["default"])throw new Error("jQuery.extends requires a jQuery");t.exports=i["default"]},function(e,r){e.exports=t},function(t,e,r){(function(t){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),r(4),t.fn.findByNames=function(){for(var e=arguments.length,r=Array(e),n=0;e>n;n++)r[n]=arguments[n];return 0===r.length?t([]):this.find(r.map(function(t){return'[name="'+(t||"").replace(/"/g,'\\"')+'"]'}).join(","))},e["default"]=t.fn.findByNames}).call(e,r(1))},function(t,e,r){(function(t){!function(t){function e(n){if(r[n])return r[n].exports;var o=r[n]={exports:{},id:n,loaded:!1};return t[n].call(o.exports,o,o.exports,e),o.loaded=!0,o.exports}var r={};return e.m=t,e.c=r,e.p="",e(0)}([function(t,e,r){"use strict";r(1),r(3),r(4),r(7),r(5),r(8),r(9),r(10),r(11),r(2),r(6),r(12),r(13),r(14),r(15),r(17),r(18),r(16),r(19),r(20),r(21),r(31),r(32),r(34),r(35),r(36),r(38),r(39),r(40),r(37),r(41),r(42),r(43),r(45),r(47),r(48),r(44),r(49),r(50),r(51),r(46),r(33)},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),r(2),Array.prototype.contains||(Array.prototype.contains=function(t){return this.indexOf(t)>=0}),e["default"]=Array.prototype.contains,t.exports=e["default"]},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),Array.prototype.indexOf||(Array.prototype.indexOf=function(t){for(var e=0;e<this.length;e++)if(e in this&&this[e]===t)return e;return-1}),e["default"]=Array.prototype.indexOf,t.exports=e["default"]},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),Array.prototype.every||(Array.prototype.every=function(t,e){for(var r=0;r<this.length;r++)if(!t.call(e||this,this[r],r,this))return!1;return!0}),e["default"]=Array.prototype.every,t.exports=e["default"]},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),r(5),Array.prototype.filter||(Array.prototype.filter=function(t,e){var r=this;return this.flatMap(function(n,o){return t.call(e||r,n,o,r)?n:void 0})}),e["default"]=Array.prototype.filter,t.exports=e["default"]},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),r(6),Array.prototype.flatMap||(Array.prototype.flatMap=function(t,e){for(var r=[],n=0;n<this.length;n++){var o=t.call(e||this,this[n],n,this);Array.isArray(o)?r.push.apply(r,o):o&&r.push(o)}return r}),e["default"]=Array.prototype.flatMap,t.exports=e["default"]},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),Array.isArray||(Array.isArray=function(t){return"[object Array]"===Object.prototype.toString.call(t)}),e["default"]=Array.isArray,t.exports=e["default"]},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),Array.prototype.first||(Array.prototype.first=function(){return this[0]}),e["default"]=Array.prototype.first,t.exports=e["default"]},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),Array.prototype.groupBy||(Array.prototype.groupBy=function(t,e){if("function"!=typeof t)throw new Error(t+" is not a function");for(var r={},n=0;n<this.length;n++){var o=this[n],i=t.call(e||this,o,n,this);null!=i&&(i in r?r[i].push(o):r[i]=[o])}return r}),e["default"]=Array.prototype.groupBy,t.exports=e["default"]},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),Array.prototype.grouped||(Array.prototype.grouped=function(t){for(var e=[],r=0;r<this.length;r+=t)e.push(this.slice(r,r+t));return e}),e["default"]=Array.prototype.grouped,t.exports=e["default"]},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),Array.prototype.groupedRight||(Array.prototype.groupedRight=function(t){for(var e=[],r=this.length;r>0;r-=t)e.push(this.slice(Math.max(0,r-t),r));return e.reverse()}),e["default"]=Array.prototype.groupedRight,t.exports=e["default"]},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),r(2),Array.prototype.include||(Array.prototype.include=function(t){var e=this.indexOf(t);return e>-1?this[e]=t:this.push(t),this}),e["default"]=Array.prototype.include,t.exports=e["default"]},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),Array.prototype.joinPaths||(Array.prototype.joinPaths=function(){for(var t="",e=0;e<this.length;e++)this[e]&&(t.length>0&&"/"!==t.charAt(t.length-1)&&(t+="/"),t+=this[e].toString());return t}),e["default"]=Array.prototype.joinPaths,t.exports=e["default"]},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),Array.prototype.last||(Array.prototype.last=function(){return this[this.length-1]}),e["default"]=Array.prototype.last,t.exports=e["default"]},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),Array.prototype.map||(Array.prototype.map=function(t,e){for(var r=[],n=1;n<=this.length;n++)r.push(t.call(e||this,this[n],n,this));return r}),e["default"]=Array.prototype.map,t.exports=e["default"]},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),r(16),Array.prototype.max||(Array.prototype.max=function(){return this.reduce(function(t,e){return t>e?t:e})}),e["default"]=Array.prototype.max,t.exports=e["default"]},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),Array.prototype.reduce||(Array.prototype.reduce=function(t,e){if(!(this.length>0))throw new TypeError("Reduce of empty array with no initial value");for(var r=this[0],n=1;n<=this.length;n++)r=t.call(e||this,r,this[n],n,this);return r}),e["default"]=Array.prototype.reduce,t.exports=e["default"]},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),r(16),Array.prototype.min||(Array.prototype.min=function(){return this.reduce(function(t,e){return e>t?t:e})}),e["default"]=Array.prototype.min,t.exports=e["default"]},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),Array.range||(Array.range=function(t,e){var r=arguments.length<=2||void 0===arguments[2]?1:arguments[2],n=[],o="number"==typeof t&&"number"==typeof e,i=o?t:t.toString().charCodeAt(0),u=o?e:e.toString().charCodeAt(0);r=Math.abs(r)||1,i>u&&(r=-r);for(var a=i;r>0?u>=a:a>=u;a+=r)n.push(o?a:String.fromCharCode(a));return n}),e["default"]=Array.range,t.exports=e["default"]},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),Array.prototype.remove||(Array.prototype.remove=function(t){for(var e=this.length-1;e>=0;--e)this[e]===t&&this.splice(e,1);return this}),e["default"]=Array.prototype.remove,t.exports=e["default"]},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),Array.prototype.some||(Array.prototype.some=function(t,e){if("function"!=typeof t)throw new Error(t+" is not a function");for(var r=0;r<this.length;r++)if(t.call(e||this,this[r],r,this))return!0;return!1}),e["default"]=Array.prototype.some,t.exports=e["default"]},function(t,e,r){"use strict";var n=r(22)["default"];Object.defineProperty(e,"__esModule",{value:!0}),n||(RegExp.escape=function(t){return t.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&")}),e["default"]=n,t.exports=e["default"]},function(t,e,r){t.exports={"default":r(23),__esModule:!0}},function(t,e,r){r(24),t.exports=r(27).RegExp.escape},function(t,e,r){var n=r(25),o=r(30)(/[\\^$*+?.()|[\]{}]/g,"\\$&");n(n.S,"RegExp",{escape:function(t){return o(t)}})},function(t,e,r){var n=r(26),o=r(27),i=r(28),u="prototype",a=function(t,e,r){var s,f,c,p=t&a.F,l=t&a.G,y=t&a.S,d=t&a.P,h=t&a.B,g=t&a.W,v=l?o:o[e]||(o[e]={}),x=l?n:y?n[e]:(n[e]||{})[u];l&&(r=e);for(s in r)f=!p&&x&&s in x,f&&s in v||(c=f?x[s]:r[s],v[s]=l&&"function"!=typeof x[s]?r[s]:h&&f?i(c,n):g&&x[s]==c?function(t){var e=function(e){return this instanceof t?new t(e):t(e)};return e[u]=t[u],e}(c):d&&"function"==typeof c?i(Function.call,c):c,d&&((v[u]||(v[u]={}))[s]=c))};a.F=1,a.G=2,a.S=4,a.P=8,a.B=16,a.W=32,t.exports=a},function(e,r){var n=e.exports="undefined"!=typeof t&&t.Math==Math?t:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(t,e){var r=t.exports={version:"1.2.6"};"number"==typeof __e&&(__e=r)},function(t,e,r){var n=r(29);t.exports=function(t,e,r){if(n(t),void 0===e)return t;switch(r){case 1:return function(r){return t.call(e,r)};case 2:return function(r,n){return t.call(e,r,n)};case 3:return function(r,n,o){return t.call(e,r,n,o)}}return function(){return t.apply(e,arguments)}}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e){t.exports=function(t,e){var r=e===Object(e)?function(t){return e[t]}:e;return function(e){return String(e).replace(t,r)}}},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),String.prototype.antStylePathToRegex||(String.prototype.antStylePathToRegex=function(){if(0===this.length)throw new RangeError("Path must not be empty.");var t=this.replace(/\/{2,}/g,"/").replace(/[-[\]{}()+.,\\^$|#\s]/g,"\\$&"),e=t.replace(/((\/?\*\*)|(\/?\*)|(\?)|(\/))/g,function(t){switch(t){case"/**":return"(?:/{1,}.*)?";case"**":return".*";case"/*":return"(?:/{1,}[^/]*)?";case"*":return"[^/]*";case"?":return"[^/]";case"/":return"/{1,}"}});return new RegExp("^("+e+")$")}),String.prototype.a||(String.prototype.a=String.prototype.antStylePathToRegex),e["default"]=String.prototype.antStylePathToRegex,t.exports=e["default"]},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),r(33),String.prototype.br2nl||(String.prototype.br2nl=function(t){var e=this.replace(/(<br>|<br\/>)/g,"\n");return t?e.xmlUnescape():e}),e["default"]=String.prototype.br2nl,t.exports=e["default"]},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),String.prototype.xmlUnescape||(String.prototype.xmlUnescape=function(){return this.replace(/(&lt;|&gt;|&#34;|&#39;|&amp;)/g,function(t){switch(t){case"&lt;":return"<";case"&gt;":return">";case"&#34;":return'"';case"&#39;":return"'";case"&amp;":return"&";default:return t}})}),e["default"]=String.prototype.xmlUnescape,t.exports=e["default"]},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),String.prototype.compareTo||(String.prototype.compareTo=function(t){return null==t||this>t?1:t>this?-1:0}),e["default"]=String.prototype.compareTo,t.exports=e["default"]},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),String.prototype.contains||(String.prototype.contains=function(t){return this.indexOf(t)>-1}),e["default"]=String.prototype.contains,t.exports=e["default"]},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),r(1),r(37),String.prototype.cutstring||(String.prototype.cutstring=function(t,e,r){var n=arguments,o=0,i=function(){return n[o]},u=function(){return n[o++]};if(t=["boolean","number"].contains(typeof i())?u():!1,"number"!=typeof i())throw new TypeError(i()+" is not a number");e=u(),r="string"==typeof i()?u():"";var a=this.getLength(t);if(!(a>e))return this;var s=r.getLength(t);if(s>e)throw new RangeError("Max length must be more than suffix length");for(var f="",c=0,p=0;p<this.length;p++){var l=this.charAt(p),y=l.getLength(t);if(c+y>e-s)break;c+=y,f+=l}return f+r}),e["default"]=String.prototype.cutstring,t.exports=e["default"]},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),r(1),String.prototype.getLength||(String.prototype.getLength=function(t){var e=arguments,r=0,n=function(){return e[r]},o=function(){return e[r++]};if(t=["boolean","number"].contains(typeof n())?o():!1,t===!1)return this.length;for(var i=0,u=0;u<this.length;u++){var a=this.charCodeAt(u);switch(!1){case!(127>=a):i+=1;break;case!("number"==typeof t&&t>0):i+=t;break;case!(2047>=a):i+=2;break;case!(65535>=a):i+=3;break;default:i+=4}}return i}),e["default"]=String.prototype.getLength,t.exports=e["default"]},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),String.prototype.endsWith||(String.prototype.endsWith=function(t){var e=this.lastIndexOf(t);return e>-1&&e===this.length-t.toString().length}),e["default"]=String.prototype.endsWith,t.exports=e["default"]},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),r(6),String.prototype.format||(String.prototype.format=function(){var t=arguments;return this.replace(/(''|'\{|}'|\{(\w+)})/g,function(e,r,n){switch(r){case"''":return"'";case"'{":return"{";case"}'":return"}";default:return(/^\d+$/g.test(n)?Array.isArray(t[0])?t[0]:t:t[0]||{})[n]}})}),e["default"]=String.prototype.format,t.exports=e["default"]},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),String.prototype.formatVariables||(String.prototype.formatVariables=function(){for(var t=/(''|'\{|\}'|\{(\w+)\})/g,e=[],r=void 0;r=t.exec(this);){var n=r[0];"''"!==n&&"'{"!==n&&"}'"!==n&&e.push(r[2])}return e}),e["default"]=String.prototype.formatVariables,t.exports=e["default"]},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),String.prototype.grouped||(String.prototype.grouped=function(t){if(!(t>1))throw new RangeError("Invalid size value");"number"!=typeof t&&(t=parseInt(t));for(var e=[],r=0;r<this.length;r+=t)e.push(this.slice(r,r+t));return e}),e["default"]=String.prototype.grouped,t.exports=e["default"]},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),String.prototype.groupedRight||(String.prototype.groupedRight=function(t){if(!(t>1))throw new RangeError("Invalid size value");"number"!=typeof t&&(t=parseInt(t));for(var e=[],r=this.length;r>0;r-=t)e.push(this.slice(Math.max(0,r-t),r));return e.reverse()}),e["default"]=String.prototype.groupedRight,t.exports=e["default"]},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),r(44),String.prototype.leftPad||(String.prototype.leftPad=function(t,e){if("number"!=typeof t)throw new TypeError(t+" is not a number");return e||(e=" "),this.length>=t?this.toString():e.repeat(t-this.length)+this.toString()}),String.prototype.lpad||(String.prototype.lpad=String.prototype.leftPad),e["default"]=String.prototype.leftPad,t.exports=e["default"]},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),String.prototype.repeat||(String.prototype.repeat=function(t){if(!(t>=0))throw new RangeError("Invalid count value");for(var e="",r=0;t>r;r++)e+=this.toString();return e}),e["default"]=String.prototype.repeat,t.exports=e["default"]},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),r(46),String.prototype.nl2br||(String.prototype.nl2br=function(t){return(t?this.xmlEscape():this).replace(/(\r\n|\n\r|\r|\n)/g,"<br/>")}),e["default"]=String.prototype.nl2br,t.exports=e["default"]},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),String.prototype.xmlEscape||(String.prototype.xmlEscape=function(){return this.replace(/(<|>|"|'|&)/g,function(t){switch(t){case"<":return"&lt;";case">":return"&gt;";case'"':return"&#34;";case"'":return"&#39;";case"&":return"&amp;";default:return t}})}),e["default"]=String.prototype.xmlEscape,t.exports=e["default"]},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),String.prototype.quote||(String.prototype.quote=function(t){if("boolean"!=typeof t&&(t=!0),!t&&this.length>=2){if('"'===this.charAt(0)&&'"'===this.charAt(this.length-1))return this.toString();if("'"===this.charAt(0)&&"'"===this.charAt(this.length-1))return this.toString()}return'"'+this+'"'}),e["default"]=String.prototype.quote,t.exports=e["default"]},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),String.prototype.regex||(String.prototype.regex=function(t){return new RegExp(this,t)}),String.prototype.r||(String.prototype.r=String.prototype.regex),e["default"]=String.prototype.regex,t.exports=e["default"]},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),r(44),String.prototype.rightPad||(String.prototype.rightPad=function(t,e){if("number"!=typeof t)throw new TypeError(t+" is not a number");return e||(e=" "),this.length>=t?this.toString():this.toString()+e.repeat(t-this.length)}),String.prototype.rpad||(String.prototype.rpad=String.prototype.rightPad),e["default"]=String.prototype.rightPad,t.exports=e["default"]},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),String.prototype.startsWith||(String.prototype.startsWith=function(t){return 0===this.indexOf(t)}),e["default"]=String.prototype.startsWith,t.exports=e["default"]},function(t,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),String.prototype.unquote||(String.prototype.unquote=function(){return this.length>=2&&('"'===this.charAt(0)&&'"'===this.charAt(this.length-1)||"'"===this.charAt(0)&&"'"===this.charAt(this.length-1))?this.slice(1,-1):this.toString()}),e["default"]=String.prototype.unquote,t.exports=e["default"]}])}).call(e,r(5))},function(t,e){(function(e){"use strict";if(!e.document)throw new Error("jQuery.extends requires a window with a document");t.exports=e}).call(e,function(){return this}())},function(t,e,r){(function(t){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),r(4),t.fn.groupBy=function(e,r){if(!t.isFunction(e))throw new TypeError(e+" is not a function");for(var n={},o=0;o<this.length;o++){var i=this[o],u=e.call(r||i,i,o,this);null!=u&&(u in n?n[u].push(i):n[u]=t(i))}return n},e["default"]=t.fn.groupBy}).call(e,r(1))},function(t,e,r){(function(t,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),r(4),t.fn.maxZIndex=function(e){var r=0;return this.find(":visible").andSelf().add(this.parentsUntil("html")).not(e).each(function(){if("#document"!==this.nodeName){var e=t(this);if(["absolute","relative","fixed"].contains(e.css("position"))){var n=parseInt(e.css("zIndex"));!isNaN(n)&&n>r&&(r=n)}}}),r},t.maxZIndex=function(e){return t(n.body).maxZIndex(e)},e["default"]=t.fn.maxZIndex}).call(e,r(1),r(8))},function(t,e,r){"use strict";function n(t){return t&&t.__esModule?t:{"default":t}}var o=r(5),i=n(o);t.exports=i["default"].document},function(t,e,r){(function(t){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),r(4),t.nextTick=function(t){return setTimeout(t,0)},e["default"]=t.nextTick}).call(e,r(1))},function(t,e,r){(function(t){"use strict";function n(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0});var o=r(11),i=n(o),u=r(43),a=n(u);r(4),r(58),t.obj={get:function(e,r,n){if(null==e)return n;if(!r)return e;var o=t.split(r,".","/"),i=!0,u=!1,s=void 0;try{for(var f,c=(0,a["default"])(o);!(i=(f=c.next()).done);i=!0){var p=f.value;if(null==(e=e[p]))return n}}catch(l){u=!0,s=l}finally{try{!i&&c["return"]&&c["return"]()}finally{if(u)throw s}}return t.isArray(n)&&!t.isArray(e)&&(e=t.makeArray(e)),e},set:function(e,r,n,o){function u(t,e){try{return!(e in t&&null!=t[e])}catch(r){return!1}}var a=t.makeArray(arguments);if(e="boolean"==typeof a.first()?a.shift():!1,r="object"===(0,i["default"])(a.first())||t.isFunction(a.first())?a.shift():{},"string"!=typeof a.first())throw new TypeError("Object key must be string type : "+a.first());n=a.shift(),o=a.shift();for(var s=t.map(t.split(n,".","/"),function(t){if(/^([^\[]+)?\[([^\]]+)?\]/.test(t)){for(var e=[t.match(/^([^\[]+)?/)[1]],r=/\[([^\]]+)?\]/g,n=void 0;n=r.exec(t);)e.push(n[1]);return e}return t}),f=r,c=0;c<s.length;c++){var p=s[c];c===s.length-1?!e||u(f,p)?f[p]=o:t.isArray(f[p])?f[p].push(o):f[p]=[f[p],o]:u(f,p)?(s[c+1]||(s[c+1]="0"),f[p]=/^\d+$/.test(s[c+1])?[]:{}):"undefined"==typeof s[c+1]&&(s[c+1]=t.isArray(f[p])?f[p].length+"":""),f=f[p]}return r},generalize:function(e){if(!t.isPlainObject(e))return e;var r={};for(var n in e)if(e.hasOwnProperty(n)){var o=e[n];n.contains(".")||/\[(\w+)?\]/.test(n)?t.obj.set(!0,r,n,o):r[n]=o}return r},extend:function(e,r,n,o,u){var s=t.makeArray(arguments);e="boolean"==typeof s.first()?s.shift():!1,r="boolean"==typeof s.first()?s.shift():!1,u="boolean"==typeof s.last()?s.pop():!1,n=1===s.length?{}:s.shift()||{},"object"===("undefined"==typeof n?"undefined":(0,i["default"])(n))||t.isFunction(n)||(n={}),o=s;var f=!0,c=!1,p=void 0;try{for(var l,y=(0,a["default"])(o);!(f=(l=y.next()).done);f=!0){var d=l.value;if(null!=d)for(var h in d)if(d.hasOwnProperty(h)){var g=n[h],v=d[h];if(v===n)continue;var x=!1;if(e&&v&&(t.isPlainObject(v)||(x=t.isArray(v))))if(x)void 0!==g&&u||(n[h]=t.merge(r&&t.isArray(g)?g:[],t.obj.extend(e,[],v)));else{var b=!1;void 0!==g&&!(b=t.isPlainObject(g))&&u||(n[h]=t.obj.extend(e,r,b?g:{},v,u))}else if(void 0!==v&&(void 0===g||!u))if(v instanceof Date)n[h]=new Date(v.getTime());else if(v instanceof RegExp){var _="";null!=v.global&&(_+="g"),null!=v.ignoreCase&&(_+="i"),null!=v.multiline&&(_+="m"),null!=v.sticky&&(_+="y"),n[h]=new RegExp(v.source,_)}else n[h]=v}}}catch(m){c=!0,p=m}finally{try{!f&&y["return"]&&y["return"]()}finally{if(c)throw p}}return n},make:function(){for(var t={},e=arguments.length,r=Array(e),n=0;e>n;n++)r[n]=arguments[n];for(var o=0;o<r.length;o+=2)t[r[o]]=r[o+1];return t},empty:function(e){if(t.isPlainObject(e))for(var r in e)e.hasOwnProperty(r)&&delete e[r];return e}};for(var s in t.obj){var f=s+"Object";f in t||t.obj.hasOwnProperty(s)&&(t[f]=t.obj[s])}e["default"]=t.obj}).call(e,r(1))},function(t,e,r){"use strict";var n=r(12)["default"];e["default"]=function(t){return t&&t.constructor===n?"symbol":typeof t},e.__esModule=!0},function(t,e,r){t.exports={"default":r(13),__esModule:!0}},function(t,e,r){r(14),r(42),t.exports=r(21).Symbol},function(t,e,r){"use strict";var n=r(15),o=r(16),i=r(17),u=r(18),a=r(20),s=r(24),f=r(19),c=r(27),p=r(28),l=r(30),y=r(29),d=r(31),h=r(36),g=r(37),v=r(38),x=r(39),b=r(32),_=r(26),m=n.getDesc,S=n.setDesc,j=n.create,A=h.get,O=o.Symbol,P=o.JSON,w=P&&P.stringify,M=!1,E=y("_hidden"),T=n.isEnum,k=c("symbol-registry"),I=c("symbols"),R="function"==typeof O,N=Object.prototype,F=u&&f(function(){return 7!=j(S({},"a",{get:function(){return S(this,"a",{value:7}).a}})).a})?function(t,e,r){var n=m(N,e);n&&delete N[e],S(t,e,r),n&&t!==N&&S(N,e,n)}:S,D=function(t){var e=I[t]=j(O.prototype);return e._k=t,u&&M&&F(N,t,{configurable:!0,set:function(e){i(this,E)&&i(this[E],t)&&(this[E][t]=!1),F(this,t,_(1,e))}}),e},q=function(t){return"symbol"==typeof t},C=function(t,e,r){return r&&i(I,e)?(r.enumerable?(i(t,E)&&t[E][e]&&(t[E][e]=!1),r=j(r,{enumerable:_(0,!1)})):(i(t,E)||S(t,E,_(1,{})),t[E][e]=!0),F(t,e,r)):S(t,e,r)},W=function(t,e){x(t);for(var r,n=g(e=b(e)),o=0,i=n.length;i>o;)C(t,r=n[o++],e[r]);return t},z=function(t,e){return void 0===e?j(t):W(j(t),e)},B=function(t){var e=T.call(this,t);return e||!i(this,t)||!i(I,t)||i(this,E)&&this[E][t]?e:!0},L=function(t,e){var r=m(t=b(t),e);return!r||!i(I,e)||i(t,E)&&t[E][e]||(r.enumerable=!0),r},$=function(t){for(var e,r=A(b(t)),n=[],o=0;r.length>o;)i(I,e=r[o++])||e==E||n.push(e);return n},Q=function(t){for(var e,r=A(b(t)),n=[],o=0;r.length>o;)i(I,e=r[o++])&&n.push(I[e]);return n},U=function(t){if(void 0!==t&&!q(t)){for(var e,r,n=[t],o=1,i=arguments;i.length>o;)n.push(i[o++]);return e=n[1],"function"==typeof e&&(r=e),!r&&v(e)||(e=function(t,e){return r&&(e=r.call(this,t,e)),q(e)?void 0:e}),n[1]=e,w.apply(P,n)}},G=f(function(){var t=O();return"[null]"!=w([t])||"{}"!=w({a:t})||"{}"!=w(Object(t))});R||(O=function(){if(q(this))throw TypeError("Symbol is not a constructor");return D(l(arguments.length>0?arguments[0]:void 0))},s(O.prototype,"toString",function(){return this._k}),q=function(t){return t instanceof O},n.create=z,n.isEnum=B,n.getDesc=L,n.setDesc=C,n.setDescs=W,n.getNames=h.get=$,n.getSymbols=Q,u&&!r(41)&&s(N,"propertyIsEnumerable",B,!0));var J={"for":function(t){return i(k,t+="")?k[t]:k[t]=O(t)},keyFor:function(t){return d(k,t)},useSetter:function(){M=!0},useSimple:function(){M=!1}};n.each.call("hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),function(t){var e=y(t);J[t]=R?e:D(e)}),M=!0,a(a.G+a.W,{Symbol:O}),a(a.S,"Symbol",J),a(a.S+a.F*!R,"Object",{create:z,defineProperty:C,defineProperties:W,getOwnPropertyDescriptor:L,getOwnPropertyNames:$,getOwnPropertySymbols:Q}),P&&a(a.S+a.F*(!R||G),"JSON",{stringify:U}),p(O,"Symbol"),p(Math,"Math",!0),p(o.JSON,"JSON",!0)},function(t,e){var r=Object;t.exports={create:r.create,getProto:r.getPrototypeOf,isEnum:{}.propertyIsEnumerable,getDesc:r.getOwnPropertyDescriptor,setDesc:r.defineProperty,setDescs:r.defineProperties,getKeys:r.keys,getNames:r.getOwnPropertyNames,getSymbols:r.getOwnPropertySymbols,each:[].forEach}},function(t,e,r){(function(e){var r=t.exports="undefined"!=typeof e&&e.Math==Math?e:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=r)}).call(e,r(5))},function(t,e){var r={}.hasOwnProperty;t.exports=function(t,e){return r.call(t,e)}},function(t,e,r){t.exports=!r(19)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,e){t.exports=function(t){try{return!!t()}catch(e){return!0}}},function(t,e,r){var n=r(16),o=r(21),i=r(22),u="prototype",a=function(t,e,r){var s,f,c,p=t&a.F,l=t&a.G,y=t&a.S,d=t&a.P,h=t&a.B,g=t&a.W,v=l?o:o[e]||(o[e]={}),x=l?n:y?n[e]:(n[e]||{})[u];l&&(r=e);for(s in r)f=!p&&x&&s in x,f&&s in v||(c=f?x[s]:r[s],v[s]=l&&"function"!=typeof x[s]?r[s]:h&&f?i(c,n):g&&x[s]==c?function(t){var e=function(e){return this instanceof t?new t(e):t(e)};return e[u]=t[u],e}(c):d&&"function"==typeof c?i(Function.call,c):c,d&&((v[u]||(v[u]={}))[s]=c))};a.F=1,a.G=2,a.S=4,a.P=8,a.B=16,a.W=32,t.exports=a},function(t,e){var r=t.exports={version:"1.2.6"};"number"==typeof __e&&(__e=r)},function(t,e,r){var n=r(23);t.exports=function(t,e,r){if(n(t),void 0===e)return t;switch(r){case 1:return function(r){return t.call(e,r)};case 2:return function(r,n){return t.call(e,r,n)};case 3:return function(r,n,o){return t.call(e,r,n,o)}}return function(){return t.apply(e,arguments)}}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e,r){t.exports=r(25)},function(t,e,r){var n=r(15),o=r(26);t.exports=r(18)?function(t,e,r){return n.setDesc(t,e,o(1,r))}:function(t,e,r){return t[e]=r,t}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e,r){var n=r(16),o="__core-js_shared__",i=n[o]||(n[o]={});t.exports=function(t){return i[t]||(i[t]={})}},function(t,e,r){var n=r(15).setDesc,o=r(17),i=r(29)("toStringTag");t.exports=function(t,e,r){t&&!o(t=r?t:t.prototype,i)&&n(t,i,{configurable:!0,value:e})}},function(t,e,r){var n=r(27)("wks"),o=r(30),i=r(16).Symbol;t.exports=function(t){return n[t]||(n[t]=i&&i[t]||(i||o)("Symbol."+t))}},function(t,e){var r=0,n=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++r+n).toString(36))}},function(t,e,r){var n=r(15),o=r(32);t.exports=function(t,e){for(var r,i=o(t),u=n.getKeys(i),a=u.length,s=0;a>s;)if(i[r=u[s++]]===e)return r}},function(t,e,r){var n=r(33),o=r(35);t.exports=function(t){return n(o(t))}},function(t,e,r){var n=r(34);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==n(t)?t.split(""):Object(t)}},function(t,e){var r={}.toString;t.exports=function(t){return r.call(t).slice(8,-1)}},function(t,e){t.exports=function(t){if(void 0==t)throw TypeError("Can't call method on  "+t);return t}},function(t,e,r){(function(e){var n=r(32),o=r(15).getNames,i={}.toString,u="object"==typeof e&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(e):[],a=function(t){try{return o(t)}catch(e){return u.slice()}};t.exports.get=function(t){return u&&"[object Window]"==i.call(t)?a(t):o(n(t))}}).call(e,r(5))},function(t,e,r){var n=r(15);t.exports=function(t){var e=n.getKeys(t),r=n.getSymbols;if(r)for(var o,i=r(t),u=n.isEnum,a=0;i.length>a;)u.call(t,o=i[a++])&&e.push(o);return e}},function(t,e,r){var n=r(34);t.exports=Array.isArray||function(t){return"Array"==n(t)}},function(t,e,r){var n=r(40);t.exports=function(t){if(!n(t))throw TypeError(t+" is not an object!");return t}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e){t.exports=!0},function(t,e){},function(t,e,r){t.exports={"default":r(44),__esModule:!0}},function(t,e,r){r(45),r(52),t.exports=r(55)},function(t,e,r){r(46);var n=r(49);n.NodeList=n.HTMLCollection=n.Array},function(t,e,r){"use strict";var n=r(47),o=r(48),i=r(49),u=r(32);t.exports=r(50)(Array,"Array",function(t,e){this._t=u(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,r=this._i++;return!t||r>=t.length?(this._t=void 0,o(1)):"keys"==e?o(0,r):"values"==e?o(0,t[r]):o(0,[r,t[r]])},"values"),i.Arguments=i.Array,n("keys"),n("values"),n("entries")},function(t,e){t.exports=function(){}},function(t,e){t.exports=function(t,e){return{value:e,done:!!t}}},function(t,e){t.exports={}},function(t,e,r){"use strict";var n=r(41),o=r(20),i=r(24),u=r(25),a=r(17),s=r(49),f=r(51),c=r(28),p=r(15).getProto,l=r(29)("iterator"),y=!([].keys&&"next"in[].keys()),d="@@iterator",h="keys",g="values",v=function(){return this};t.exports=function(t,e,r,x,b,_,m){f(r,e,x);var S,j,A=function(t){if(!y&&t in M)return M[t];switch(t){case h:return function(){return new r(this,t)};case g:return function(){return new r(this,t)}}return function(){return new r(this,t)}},O=e+" Iterator",P=b==g,w=!1,M=t.prototype,E=M[l]||M[d]||b&&M[b],T=E||A(b);if(E){var k=p(T.call(new t));c(k,O,!0),!n&&a(M,d)&&u(k,l,v),P&&E.name!==g&&(w=!0,T=function(){return E.call(this)})}if(n&&!m||!y&&!w&&M[l]||u(M,l,T),s[e]=T,s[O]=v,b)if(S={values:P?T:A(g),keys:_?T:A(h),entries:P?A("entries"):T},m)for(j in S)j in M||i(M,j,S[j]);else o(o.P+o.F*(y||w),e,S);return S}},function(t,e,r){"use strict";var n=r(15),o=r(26),i=r(28),u={};r(25)(u,r(29)("iterator"),function(){return this}),t.exports=function(t,e,r){t.prototype=n.create(u,{next:o(1,r)}),i(t,e+" Iterator")}},function(t,e,r){"use strict";var n=r(53)(!0);r(50)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,e=this._t,r=this._i;return r>=e.length?{value:void 0,done:!0}:(t=n(e,r),this._i+=t.length,{value:t,done:!1})})},function(t,e,r){var n=r(54),o=r(35);t.exports=function(t){return function(e,r){var i,u,a=String(o(e)),s=n(r),f=a.length;return 0>s||s>=f?t?"":void 0:(i=a.charCodeAt(s),55296>i||i>56319||s+1===f||(u=a.charCodeAt(s+1))<56320||u>57343?t?a.charAt(s):i:t?a.slice(s,s+2):(i-55296<<10)+(u-56320)+65536)}}},function(t,e){var r=Math.ceil,n=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?n:r)(t)}},function(t,e,r){var n=r(39),o=r(56);t.exports=r(21).getIterator=function(t){var e=o(t);if("function"!=typeof e)throw TypeError(t+" is not iterable!");return n(e.call(t))}},function(t,e,r){var n=r(57),o=r(29)("iterator"),i=r(49);t.exports=r(21).getIteratorMethod=function(t){return void 0!=t?t[o]||t["@@iterator"]||i[n(t)]:void 0}},function(t,e,r){var n=r(34),o=r(29)("toStringTag"),i="Arguments"==n(function(){return arguments}());t.exports=function(t){var e,r,u;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(r=(e=Object(t))[o])?r:i?n(e):"Object"==(u=n(e))&&"function"==typeof e.callee?"Arguments":u}},function(t,e,r){(function(t){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),r(4),t.split=function(t,e,r,n){function o(t){return n>0&&t+1>=n}if("string"!=typeof t)throw new TypeError(t+" is not a string");if(t=t.toString(),
"number"==typeof e){var i=[e,null,null];n=i[0],e=i[1],r=i[2]}else if("number"==typeof r){var u=[r,null];n=u[0],r=u[1]}for(var a=[],s=0,f=0,c=void 0;-1!==(c=t.indexOf(e,f))&&!o(s);){var p=t.slice(f,c),l=!1;r&&p.slice(-1)===r&&(p=p.slice(0,-1),l=p.slice(-1)!==r,l&&(p+=e)),a[s]=(a[s]||"")+p,f=c+1,l||s++}return f<=t.length&&(a[s]=(a[s]||"")+t.slice(f)),a},e["default"]=t.split}).call(e,r(1))},function(t,e,r){(function(t){"use strict";function n(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0});var o=r(60),i=n(o),u=r(43),a=n(u);r(4),r(10),t.parseQueryString=function(e,r){if("string"!=typeof e||""===e)return{};var n=e.split(/&amp;|&/i);t.isPlainObject(r)?r.except&&!t.isArray(r.except)&&(r.except=[r.except]):r={};var o={},u=!0,s=!1,f=void 0;try{for(var c,p=(0,a["default"])(n);!(u=(c=p.next()).done);u=!0){var l=c.value,y=l.split("="),d=(0,i["default"])(y,2),h=d[0],g=d[1];h=decodeURIComponent(h),g=decodeURIComponent(g),null!=r.except&&r.except.contains(h)||t.obj.set(!0,o,h,g)}}catch(v){s=!0,f=v}finally{try{!u&&p["return"]&&p["return"]()}finally{if(s)throw f}}return o},e["default"]=t.parseQueryString}).call(e,r(1))},function(t,e,r){"use strict";function n(t){return t&&t.__esModule?t:{"default":t}}var o=r(61),i=n(o),u=r(43),a=n(u);e["default"]=function(){function t(t,e){var r=[],n=!0,o=!1,i=void 0;try{for(var u,s=(0,a["default"])(t);!(n=(u=s.next()).done)&&(r.push(u.value),!e||r.length!==e);n=!0);}catch(f){o=!0,i=f}finally{try{!n&&s["return"]&&s["return"]()}finally{if(o)throw i}}return r}return function(e,r){if(Array.isArray(e))return e;if((0,i["default"])(Object(e)))return t(e,r);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),e.__esModule=!0},function(t,e,r){t.exports={"default":r(62),__esModule:!0}},function(t,e,r){r(45),r(52),t.exports=r(63)},function(t,e,r){var n=r(57),o=r(29)("iterator"),i=r(49);t.exports=r(21).isIterable=function(t){var e=Object(t);return void 0!==e[o]||"@@iterator"in e||i.hasOwnProperty(n(e))}},function(t,e,r){(function(t){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),r(4),t.fn.reclone=function(e,r){return this.map(function(){var n=t(this),o=n.clone(e,r);return o.insertAfter(this),n.remove(),o[0]})},e["default"]=t.fn.reclone}).call(e,r(1))},function(t,e,r){(function(t){"use strict";function n(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0});var o=r(43),i=n(o);r(4),t.reindexArrayParams=function(t,e){var r=new RegExp("^("+t.replace(".","\\.")+")\\[(\\d+)\\]"),n=null,o=-1,u=!0,a=!1,s=void 0;try{for(var f,c=(0,i["default"])(e);!(u=(f=c.next()).done);u=!0){var p=f.value,l=r.exec(p.name);if(l){var y=l[2];n!==y&&(n=y,o++),p.name=p.name.replace(r,"$1["+o+"]")}}}catch(d){a=!0,s=d}finally{try{!u&&c["return"]&&c["return"]()}finally{if(a)throw s}}return o},e["default"]=t.reindexArrayParams}).call(e,r(1))},function(t,e,r){(function(t){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),r(4),e["default"]=t.fn.reverse=Array.prototype.reverse}).call(e,r(1))},function(t,e,r){(function(t){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),r(4),t.fn.serializeObject=function(e){t.isPlainObject(e)?e.except&&!t.isArray(e.except)&&(e.except=[e.except]):e={};var r={};return t.each(this.serializeArray(),function(){null!=e.except&&e.except.contains(this.name)||(this.name in r?t.isArray(r[this.name])?r[this.name].push(this.value):r[this.name]=[r[this.name],this.value]:r[this.name]=this.value)}),r},e["default"]=t.fn.serializeObject}).call(e,r(1))},function(t,e,r){(function(t){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),r(4),t.some=function(e,r,n){if(!t.isFunction(r))throw new TypeError(r+" is not a function");if(t.isArray(e)){for(var o=0;o<e.length;o++)if(r.call(n||e,e[o],o,e))return!0}else{if(!t.isPlainObject(e))throw new TypeError(e+" is not array or plain object");for(var i in e)if(e.hasOwnProperty(i)&&r.call(n||e,e[i],i,e))return!0}return!1},e["default"]=t.some}).call(e,r(1))},function(t,e,r){(function(t,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),r(4),n.supportsInputType=function(e){var r=t.createElement("input");return r.setAttribute("type",e),r.type===e},e["default"]=n.supportsInputType}).call(e,r(8),r(1))},function(t,e,r){(function(t){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),r(4),t.xmlToString=function(t){try{return(new XMLSerializer).serializeToString(t)}catch(e){if(null==t.xml)throw new Error("XMLSerializer not supported");return t.xml}},e["default"]=t.xmlToString}).call(e,r(1))}])});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwianF1ZXJ5LWV4dGVuZHMubWluLmpzIiwid2VicGFjazovd2VicGFjay9ib290c3RyYXAgZThlOTM5NjE2YWE2YzJkOTgxYzEiLCJ3ZWJwYWNrOi8vL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vc3JjL3ZhcnMvanF1ZXJ5LmpzIiwid2VicGFjazovZXh0ZXJuYWwge1wicm9vdFwiOlwialF1ZXJ5XCIsXCJjb21tb25qc1wiOlwianF1ZXJ5XCIsXCJjb21tb25qczJcIjpcImpxdWVyeVwiLFwiYW1kXCI6XCJqcXVlcnlcIn0iLCJ3ZWJwYWNrOi8vL3NyYy9maW5kQnlOYW1lcy5qcyIsIndlYnBhY2s6Ly8vfi9wcm90by5qcy9kaXN0L3Byb3RvLmpzIiwid2VicGFjazovLy9zcmMvdmFycy93aW5kb3cuanMiLCJ3ZWJwYWNrOi8vL3NyYy9ncm91cEJ5LmpzIiwid2VicGFjazovLy9zcmMvbWF4WkluZGV4LmpzIiwid2VicGFjazovLy9zcmMvdmFycy9kb2N1bWVudC5qcyIsIndlYnBhY2s6Ly8vc3JjL25leHRUaWNrLmpzIiwid2VicGFjazovLy9zcmMvb2JqLmpzIiwid2VicGFjazovLy9+L2JhYmVsLXJ1bnRpbWUvaGVscGVycy90eXBlb2YuanMiLCJ3ZWJwYWNrOi8vL34vYmFiZWwtcnVudGltZS9jb3JlLWpzL3N5bWJvbC5qcyIsIndlYnBhY2s6Ly8vfi9jb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sL2luZGV4LmpzIiwid2VicGFjazovLy9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5qcyIsIndlYnBhY2s6Ly8vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLmdsb2JhbC5qcyIsIndlYnBhY2s6Ly8vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLmhhcy5qcyIsIndlYnBhY2s6Ly8vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLmRlc2NyaXB0b3JzLmpzIiwid2VicGFjazovLy9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzLyQuZmFpbHMuanMiLCJ3ZWJwYWNrOi8vL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5leHBvcnQuanMiLCJ3ZWJwYWNrOi8vL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5jb3JlLmpzIiwid2VicGFjazovLy9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzLyQuY3R4LmpzIiwid2VicGFjazovLy9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzLyQuYS1mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLnJlZGVmaW5lLmpzIiwid2VicGFjazovLy9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzLyQuaGlkZS5qcyIsIndlYnBhY2s6Ly8vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLnByb3BlcnR5LWRlc2MuanMiLCJ3ZWJwYWNrOi8vL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5zaGFyZWQuanMiLCJ3ZWJwYWNrOi8vL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5zZXQtdG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly8vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLndrcy5qcyIsIndlYnBhY2s6Ly8vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLnVpZC5qcyIsIndlYnBhY2s6Ly8vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLmtleW9mLmpzIiwid2VicGFjazovLy9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzLyQudG8taW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLmlvYmplY3QuanMiLCJ3ZWJwYWNrOi8vL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5jb2YuanMiLCJ3ZWJwYWNrOi8vL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5kZWZpbmVkLmpzIiwid2VicGFjazovLy9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzLyQuZ2V0LW5hbWVzLmpzIiwid2VicGFjazovLy9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzLyQuZW51bS1rZXlzLmpzIiwid2VicGFjazovLy9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzLyQuaXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5pcy1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5saWJyYXJ5LmpzIiwid2VicGFjazovLy9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9nZXQtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vL34vY29yZS1qcy9saWJyYXJ5L2ZuL2dldC1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzIiwid2VicGFjazovLy9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLmFkZC10by11bnNjb3BhYmxlcy5qcyIsIndlYnBhY2s6Ly8vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLml0ZXItc3RlcC5qcyIsIndlYnBhY2s6Ly8vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLml0ZXJhdG9ycy5qcyIsIndlYnBhY2s6Ly8vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLml0ZXItZGVmaW5lLmpzIiwid2VicGFjazovLy9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzLyQuaXRlci1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLnN0cmluZy1hdC5qcyIsIndlYnBhY2s6Ly8vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLnRvLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvY29yZS5nZXQtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kLmpzIiwid2VicGFjazovLy9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzLyQuY2xhc3NvZi5qcyIsIndlYnBhY2s6Ly8vc3JjL3NwbGl0LmpzIiwid2VicGFjazovLy9zcmMvcGFyc2VRdWVyeVN0cmluZy5qcyIsIndlYnBhY2s6Ly8vfi9iYWJlbC1ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vfi9iYWJlbC1ydW50aW1lL2NvcmUtanMvaXMtaXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vL34vY29yZS1qcy9saWJyYXJ5L2ZuL2lzLWl0ZXJhYmxlLmpzIiwid2VicGFjazovLy9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2NvcmUuaXMtaXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vL3NyYy9yZWNsb25lLmpzIiwid2VicGFjazovLy9zcmMvcmVpbmRleEFycmF5UGFyYW1zLmpzIiwid2VicGFjazovLy9zcmMvcmV2ZXJzZS5qcyIsIndlYnBhY2s6Ly8vc3JjL3NlcmlhbGl6ZU9iamVjdC5qcyIsIndlYnBhY2s6Ly8vc3JjL3NvbWUuanMiLCJ3ZWJwYWNrOi8vL3NyYy9zdXBwb3J0c0lucHV0VHlwZS5qcyIsIndlYnBhY2s6Ly8vc3JjL3htbFRvU3RyaW5nLmpzIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsInJlcXVpcmUiLCJkZWZpbmUiLCJhbWQiLCJ0aGlzIiwiX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV8yX18iLCJtb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaW5zdGFsbGVkTW9kdWxlcyIsImlkIiwibG9hZGVkIiwiY2FsbCIsIm0iLCJjIiwicCIsIiQiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiX2pxdWVyeSIsIl9qcXVlcnkyIiwiRXJyb3IiLCJmbiIsImZpbmRCeU5hbWVzIiwiX2xlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsIm5hbWVzIiwiQXJyYXkiLCJfa2V5IiwiZmluZCIsIm1hcCIsIm5hbWUiLCJyZXBsYWNlIiwiam9pbiIsIndpbmRvdyIsInByb3RvdHlwZSIsImNvbnRhaW5zIiwiYSIsImluZGV4T2YiLCJpdGVtIiwiaSIsImV2ZXJ5IiwiY2FsbGJhY2siLCJjb250ZXh0IiwiZmlsdGVyIiwiX3RoaXMiLCJmbGF0TWFwIiwicmVzdWx0cyIsInJlc3VsdCIsImlzQXJyYXkiLCJwdXNoIiwiYXBwbHkiLCJ0b1N0cmluZyIsImZpcnN0IiwiZ3JvdXBCeSIsImtleSIsImdyb3VwZWQiLCJzaXplIiwic2xpY2UiLCJncm91cGVkUmlnaHQiLCJNYXRoIiwibWF4IiwicmV2ZXJzZSIsImluY2x1ZGUiLCJqb2luUGF0aHMiLCJwYXRoIiwiY2hhckF0IiwibGFzdCIsInJlZHVjZSIsImIiLCJUeXBlRXJyb3IiLCJtaW4iLCJyYW5nZSIsImZyb20iLCJ0byIsInN0ZXAiLCJ1bmRlZmluZWQiLCJpc051bWJlciIsImJlZ2luIiwiY2hhckNvZGVBdCIsImVuZCIsImFicyIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInJlbW92ZSIsInNwbGljZSIsInNvbWUiLCJfUmVnRXhwJGVzY2FwZSIsIlJlZ0V4cCIsImVzY2FwZSIsInRleHQiLCIkZXhwb3J0IiwiJHJlIiwiUyIsIml0IiwiZ2xvYmFsIiwiY29yZSIsImN0eCIsIlBST1RPVFlQRSIsInR5cGUiLCJzb3VyY2UiLCJvd24iLCJvdXQiLCJJU19GT1JDRUQiLCJGIiwiSVNfR0xPQkFMIiwiRyIsIklTX1NUQVRJQyIsIklTX1BST1RPIiwiUCIsIklTX0JJTkQiLCJCIiwiSVNfV1JBUCIsIlciLCJ0YXJnZXQiLCJDIiwicGFyYW0iLCJGdW5jdGlvbiIsInNlbGYiLCJfX2ciLCJ2ZXJzaW9uIiwiX19lIiwiYUZ1bmN0aW9uIiwidGhhdCIsInJlZ0V4cCIsInJlcGxhY2VyIiwicGFydCIsImFudFN0eWxlUGF0aFRvUmVnZXgiLCJSYW5nZUVycm9yIiwicGF0dGVybiIsIiQwIiwiYnIybmwiLCJ4bWxVbmVzY2FwZSIsIiQxIiwiY29tcGFyZVRvIiwic3RyIiwiY3V0c3RyaW5nIiwiY2hlY2tieXRlIiwibWF4TGVuZ3RoIiwic3VmZml4IiwiX2FyZ3VtZW50cyIsImFyZ0luZGV4IiwiYXJnQ3VyciIsImFyZ1NoaWZ0IiwiZ2V0TGVuZ3RoIiwic3VmZml4TGVuZ3RoIiwicmVzdWx0U3RyaW5nIiwiY2hlY2tlZExlbmd0aCIsImwiLCJlbmRzV2l0aCIsImxhc3RJbmRleE9mIiwiZm9ybWF0IiwiJDIiLCJ0ZXN0IiwiZm9ybWF0VmFyaWFibGVzIiwicmVnZXgiLCJ2YXJpYWJsZXMiLCJtYXRjaGVzIiwiZXhlYyIsIm1hdGNoIiwicGFyc2VJbnQiLCJsZWZ0UGFkIiwiZmlsbENoYXIiLCJyZXBlYXQiLCJscGFkIiwiY291bnQiLCJubDJiciIsInhtbEVzY2FwZSIsInF1b3RlIiwib3ZlcmxhcGFibGUiLCJmbGFncyIsInIiLCJyaWdodFBhZCIsInJwYWQiLCJzdGFydHNXaXRoIiwidW5xdW90ZSIsImRvY3VtZW50IiwiaXNGdW5jdGlvbiIsImVsZW0iLCJtYXhaSW5kZXgiLCJleGNsdWRlcyIsInpJbmRleCIsImFuZFNlbGYiLCJhZGQiLCJwYXJlbnRzVW50aWwiLCJub3QiLCJlYWNoIiwibm9kZU5hbWUiLCIkdGhpcyIsImNzcyIsImlzTmFOIiwiYm9keSIsIl93aW5kb3ciLCJfd2luZG93MiIsIm5leHRUaWNrIiwic2V0VGltZW91dCIsIl90eXBlb2YyIiwiX3R5cGVvZjMiLCJfZ2V0SXRlcmF0b3IyIiwiX2dldEl0ZXJhdG9yMyIsImdldCIsImRlZmF1bHRWYWx1ZSIsImtleUZyYWdtZW50cyIsInNwbGl0IiwiX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiIsIl9kaWRJdGVyYXRvckVycm9yIiwiX2l0ZXJhdG9yRXJyb3IiLCJfc3RlcCIsIl9pdGVyYXRvciIsIm5leHQiLCJkb25lIiwia2V5RnJhZ21lbnQiLCJlcnIiLCJtYWtlQXJyYXkiLCJzZXQiLCJhcHBlbmRBcnJheSIsImZ1bGxrZXkiLCJpc051bGwiLCJvIiwiaWdub3JlZCIsImFyZ3MiLCJzaGlmdCIsImtleXMiLCJpbktleXMiLCJpbkJyYWNrZXQiLCJuZXh0TWF0Y2hlcyIsImN1cnJPYmoiLCJnZW5lcmFsaXplIiwiaXNQbGFpbk9iamVjdCIsImhhc093blByb3BlcnR5IiwiZXh0ZW5kIiwiZGVlcCIsInNvdXJjZXMiLCJleHRlbmRJZlVuZGVmaW5lZCIsInBvcCIsIl9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yIiwiX2RpZEl0ZXJhdG9yRXJyb3IyIiwiX2l0ZXJhdG9yRXJyb3IyIiwiX3N0ZXAyIiwiX2l0ZXJhdG9yMiIsInNyYyIsImNvcHkiLCJjb3B5SXNBcnJheSIsIm1lcmdlIiwic3JjSXNQbGFpbk9iamVjdCIsIkRhdGUiLCJnZXRUaW1lIiwiaWdub3JlQ2FzZSIsIm11bHRpbGluZSIsInN0aWNreSIsIm1ha2UiLCJrZXlWYWx1ZVBhaXJzIiwiZW1wdHkiLCJzaG9ydEtleSIsIl9TeW1ib2wiLCJjb25zdHJ1Y3RvciIsIlN5bWJvbCIsImhhcyIsIkRFU0NSSVBUT1JTIiwicmVkZWZpbmUiLCIkZmFpbHMiLCJzaGFyZWQiLCJzZXRUb1N0cmluZ1RhZyIsInVpZCIsIndrcyIsImtleU9mIiwiJG5hbWVzIiwiZW51bUtleXMiLCJhbk9iamVjdCIsInRvSU9iamVjdCIsImNyZWF0ZURlc2MiLCJnZXREZXNjIiwic2V0RGVzYyIsIl9jcmVhdGUiLCJjcmVhdGUiLCJnZXROYW1lcyIsIiRTeW1ib2wiLCIkSlNPTiIsIkpTT04iLCJfc3RyaW5naWZ5Iiwic3RyaW5naWZ5Iiwic2V0dGVyIiwiSElEREVOIiwiaXNFbnVtIiwiU3ltYm9sUmVnaXN0cnkiLCJBbGxTeW1ib2xzIiwidXNlTmF0aXZlIiwiT2JqZWN0UHJvdG8iLCJzZXRTeW1ib2xEZXNjIiwiRCIsInByb3RvRGVzYyIsIndyYXAiLCJ0YWciLCJzeW0iLCJfayIsImNvbmZpZ3VyYWJsZSIsImlzU3ltYm9sIiwiJGRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsIiRkZWZpbmVQcm9wZXJ0aWVzIiwiJGNyZWF0ZSIsIiRwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkUiLCIkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiJGdldE93blByb3BlcnR5TmFtZXMiLCIkZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiJHN0cmluZ2lmeSIsIiRyZXBsYWNlciIsIiQkIiwiYnVnZ3lKU09OIiwic2V0RGVzY3MiLCJnZXRTeW1ib2xzIiwic3ltYm9sU3RhdGljcyIsImZvciIsImtleUZvciIsInVzZVNldHRlciIsInVzZVNpbXBsZSIsImRlZmluZVByb3BlcnRpZXMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiJE9iamVjdCIsImdldFByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImdldEtleXMiLCJmb3JFYWNoIiwiZSIsIm9iamVjdCIsImJpdG1hcCIsIndyaXRhYmxlIiwiU0hBUkVEIiwic3RvcmUiLCJkZWYiLCJUQUciLCJzdGF0IiwicHgiLCJyYW5kb20iLCJjb25jYXQiLCJlbCIsIk8iLCJpbmRleCIsIklPYmplY3QiLCJkZWZpbmVkIiwiY29mIiwid2luZG93TmFtZXMiLCJnZXRXaW5kb3dOYW1lcyIsInN5bWJvbHMiLCJhcmciLCJpc09iamVjdCIsIkl0ZXJhdG9ycyIsIk5vZGVMaXN0IiwiSFRNTENvbGxlY3Rpb24iLCJhZGRUb1Vuc2NvcGFibGVzIiwiaXRlcmF0ZWQiLCJraW5kIiwiX3QiLCJfaSIsIkFyZ3VtZW50cyIsIkxJQlJBUlkiLCJoaWRlIiwiJGl0ZXJDcmVhdGUiLCJJVEVSQVRPUiIsIkJVR0dZIiwiRkZfSVRFUkFUT1IiLCJLRVlTIiwiVkFMVUVTIiwicmV0dXJuVGhpcyIsIkJhc2UiLCJOQU1FIiwiQ29uc3RydWN0b3IiLCJERUZBVUxUIiwiSVNfU0VUIiwiRk9SQ0VEIiwibWV0aG9kcyIsImdldE1ldGhvZCIsInByb3RvIiwiREVGX1ZBTFVFUyIsIlZBTFVFU19CVUciLCIkbmF0aXZlIiwiJGRlZmF1bHQiLCJJdGVyYXRvclByb3RvdHlwZSIsInZhbHVlcyIsImVudHJpZXMiLCJkZXNjcmlwdG9yIiwiJGF0IiwicG9pbnQiLCJ0b0ludGVnZXIiLCJUT19TVFJJTkciLCJwb3MiLCJzIiwiY2VpbCIsImZsb29yIiwiZ2V0SXRlcmF0b3IiLCJpdGVyRm4iLCJjbGFzc29mIiwiZ2V0SXRlcmF0b3JNZXRob2QiLCJBUkciLCJUIiwiY2FsbGVlIiwic2VwYXJhdG9yIiwiZXNjYXBlQ2hhciIsImxpbWl0IiwibGltaXRlZCIsIl9yZWYiLCJfcmVmMiIsInBhcnRzIiwiZXNjYXBlZCIsIl9zbGljZWRUb0FycmF5MiIsIl9zbGljZWRUb0FycmF5MyIsInBhcnNlUXVlcnlTdHJpbmciLCJxdWVyeVN0cmluZyIsIm9wdGlvbnMiLCJwYWlycyIsImV4Y2VwdCIsInBhaXIiLCJfcGFpciRzcGxpdCIsIl9wYWlyJHNwbGl0MiIsImRlY29kZVVSSUNvbXBvbmVudCIsIl9pc0l0ZXJhYmxlMiIsIl9pc0l0ZXJhYmxlMyIsInNsaWNlSXRlcmF0b3IiLCJhcnIiLCJfYXJyIiwiX24iLCJfZCIsIl9lIiwiX3MiLCJpc0l0ZXJhYmxlIiwicmVjbG9uZSIsImRhdGFBbmRFdmVudHMiLCJkZWVwRGF0YUFuZEV2ZW50cyIsIm9sZEVsZW0iLCJuZXdFbGVtIiwiY2xvbmUiLCJpbnNlcnRBZnRlciIsInJlaW5kZXhBcnJheVBhcmFtcyIsInByZWZpeCIsInBhcmFtcyIsInByZXZJbmRleCIsImN1cnJJbmRleCIsInNlcmlhbGl6ZU9iamVjdCIsInNlcmlhbGl6ZUFycmF5IiwiaXRlbXMiLCJzdXBwb3J0c0lucHV0VHlwZSIsImlucHV0IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZSIsInhtbFRvU3RyaW5nIiwieG1sTm9kZSIsIlhNTFNlcmlhbGl6ZXIiLCJzZXJpYWxpemVUb1N0cmluZyIsIl9lcnJvciIsInhtbCJdLCJtYXBwaW5ncyI6IkNBQUEsU0FBQUEsRUFBQUMsR0FDQSxnQkFBQUMsVUFBQSxnQkFBQUMsUUFDQUEsT0FBQUQsUUFBQUQsRUFBQUcsUUFBQSxXQUNBLGtCQUFBQyxTQUFBQSxPQUFBQyxJQUNBRCxRQUFBLFVBQUFKLEdBQ0EsZ0JBQUFDLFNBQ0FBLFFBQUEsT0FBQUQsRUFBQUcsUUFBQSxXQUVBSixFQUFBLE9BQUFDLEVBQUFELEVBQUEsU0FDQ08sS0FBQSxTQUFBQyxHQUNELE1DQWdCLFVBQVVDLEdDTjFCLFFBQUFDLEdBQUFDLEdBR0EsR0FBQUMsRUFBQUQsR0FDQSxNQUFBQyxHQUFBRCxHQUFBVCxPQUdBLElBQUFDLEdBQUFTLEVBQUFELElBQ0FULFdBQ0FXLEdBQUFGLEVBQ0FHLFFBQUEsRUFVQSxPQU5BTCxHQUFBRSxHQUFBSSxLQUFBWixFQUFBRCxRQUFBQyxFQUFBQSxFQUFBRCxRQUFBUSxHQUdBUCxFQUFBVyxRQUFBLEVBR0FYLEVBQUFELFFBdkJBLEdBQUFVLEtBcUNBLE9BVEFGLEdBQUFNLEVBQUFQLEVBR0FDLEVBQUFPLEVBQUFMLEVBR0FGLEVBQUFRLEVBQUEsR0FHQVIsRUFBQSxLRGdCTSxTQUFTUCxFQUFRRCxFQUFTUSxJRXREaEMsU0FBQVMsR0FBQSxZRjBEQ0MsUUFBT0MsZUFBZW5CLEVBQVMsY0FDN0JvQixPQUFPLElFekRWWixFQUFBLEdBQ0FBLEVBQUEsR0FDQUEsRUFBQSxHQUNBQSxFQUFB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SXBZLEtBQU9vWSxHQUNaLEdBQUlBLEVBQU10TixlQUFlOUssSUFDakJiLEVBQVNwQyxLQUFLcUMsR0FBV2daLEVBQU9BLEVBQU1wWSxHQUFNQSxFQUFLb1ksR0FBUSxPQUFPLEVBTWhGLE9BQU8sR3JFMnRHVmxjLEVBQUFBLFdxRXh0R2NpQixFQUFFNEUsT3JFeXRHYWhGLEtBQUtiLEVBQVNRLEVBQW9CLEtBSTFELFNBQVNQLEVBQVFELEVBQVNRLElzRTV2R2hDLFNBQUErSyxFQUFBdEssR0FBQSxZdEVnd0dDQyxRQUFPQyxlQUFlbkIsRUFBUyxjQUM3Qm9CLE9BQU8sSXNFL3ZHVlosRUFBQSxHQU1BUyxFQUFFa2Isa0JBQW9CLFNBQVN6VixHQUMzQixHQUFJMFYsR0FBUTdRLEVBQVM4USxjQUFjLFFBRW5DLE9BREFELEdBQU1FLGFBQWEsT0FBUTVWLEdBQ3BCMFYsRUFBTTFWLE9BQVNBLEd0RXF3R3pCMUcsRUFBQUEsV3NFbHdHY2lCLEVBQUVrYixvQnRFbXdHYXRiLEtBQUtiLEVBQVNRLEVBQW9CLEdBQUlBLEVBQW9CLEtBSWxGLFNBQVNQLEVBQVFELEVBQVNRLEl1RXJ4R2hDLFNBQUFTLEdBQUEsWXZFeXhHQ0MsUUFBT0MsZUFBZW5CLEVBQVMsY0FDM0JvQixPQUFPLEl1RXh4R1paLEVBQUEsR0FNQVMsRUFBRXNiLFlBQWMsU0FBU0MsR0FDckIsSUFDSSxPQUFPLEdBQUtDLGdCQUFpQkMsa0JBQWtCRixHQUNqRCxNQUFPRyxHQUNMLEdBQW1CLE1BQWZILEVBQVFJLElBQ1IsS0FBTSxJQUFJamIsT0FBTSw4QkFFcEIsT0FBTzZhLEdBQVFJLE12RTh4R3RCNWMsRUFBQUEsV3VFMXhHY2lCLEVBQUVzYixjdkUyeEdhMWIsS0FBS2IsRUFBU1EsRUFBb0IiLCJmaWxlIjoianF1ZXJ5LWV4dGVuZHMubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwianF1ZXJ5XCIpKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtcImpxdWVyeVwiXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJqUXVlcnlcIl0gPSBmYWN0b3J5KHJlcXVpcmUoXCJqcXVlcnlcIikpO1xuXHRlbHNlXG5cdFx0cm9vdFtcImpRdWVyeVwiXSA9IGZhY3Rvcnkocm9vdFtcImpRdWVyeVwiXSk7XG59KSh0aGlzLCBmdW5jdGlvbihfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFXzJfXykge1xucmV0dXJuIFxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIHdlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvblxuICoqLyIsIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcImpxdWVyeVwiKSk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXCJqcXVlcnlcIl0sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wialF1ZXJ5XCJdID0gZmFjdG9yeShyZXF1aXJlKFwianF1ZXJ5XCIpKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJqUXVlcnlcIl0gPSBmYWN0b3J5KHJvb3RbXCJqUXVlcnlcIl0pO1xufSkodGhpcywgZnVuY3Rpb24oX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV8yX18pIHtcbnJldHVybiAvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fSxcbi8qKioqKiovIFx0XHRcdGlkOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGxvYWRlZDogZmFsc2Vcbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKFtcbi8qIDAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbigkKSB7J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXHRcblx0X193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oNyk7XG5cdFxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDkpO1xuXHRcblx0X193ZWJwYWNrX3JlcXVpcmVfXygxMCk7XG5cdFxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDU5KTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oNjQpO1xuXHRcblx0X193ZWJwYWNrX3JlcXVpcmVfXyg2NSk7XG5cdFxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDY2KTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oNjcpO1xuXHRcblx0X193ZWJwYWNrX3JlcXVpcmVfXyg2OCk7XG5cdFxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDU4KTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oNjkpO1xuXHRcblx0X193ZWJwYWNrX3JlcXVpcmVfXyg3MCk7XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSAkO1xuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXygxKSkpXG5cbi8qKiovIH0sXG4vKiAxICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHR2YXIgX2pxdWVyeSA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdFxuXHR2YXIgX2pxdWVyeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9qcXVlcnkpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdGlmICghX2pxdWVyeTIuZGVmYXVsdCkge1xuXHQgICAgdGhyb3cgbmV3IEVycm9yKFwialF1ZXJ5LmV4dGVuZHMgcmVxdWlyZXMgYSBqUXVlcnlcIik7XG5cdH1cblx0XG5cdG1vZHVsZS5leHBvcnRzID0gX2pxdWVyeTIuZGVmYXVsdDtcblxuLyoqKi8gfSxcbi8qIDIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdG1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV8yX187XG5cbi8qKiovIH0sXG4vKiAzICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24oJCkgeyd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0X193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblx0XG5cdC8qKlxuXHQgKiBAcGFyYW0ge0FycmF5PHN0cmluZz59IG5hbWVzXG5cdCAqIEByZXR1cm4ge2pRdWVyeTxIVE1MRWxlbWVudD59XG5cdCAqL1xuXHQkLmZuLmZpbmRCeU5hbWVzID0gZnVuY3Rpb24gKCkge1xuXHQgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBuYW1lcyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuXHQgICAgbmFtZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG5cdCAgfVxuXHRcblx0ICBpZiAobmFtZXMubGVuZ3RoID09PSAwKSByZXR1cm4gJChbXSk7XG5cdCAgcmV0dXJuIHRoaXMuZmluZChuYW1lcy5tYXAoZnVuY3Rpb24gKG5hbWUpIHtcblx0ICAgIHJldHVybiAnW25hbWU9XCInICsgKG5hbWUgfHwgJycpLnJlcGxhY2UoL1wiL2csICdcXFxcXCInKSArICdcIl0nO1xuXHQgIH0pLmpvaW4oJywnKSk7XG5cdH07XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSAkLmZuLmZpbmRCeU5hbWVzO1xuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXygxKSkpXG5cbi8qKiovIH0sXG4vKiA0ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24od2luZG93KSB7LyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuXHQvKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcblx0LyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXHQvKioqKioqL1xuXHQvKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5cdC8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvKioqKioqL1xuXHQvKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdC8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSlcblx0LyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cdC8qKioqKiovXG5cdC8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHQvKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuXHQvKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fSxcblx0LyoqKioqKi8gXHRcdFx0aWQ6IG1vZHVsZUlkLFxuXHQvKioqKioqLyBcdFx0XHRsb2FkZWQ6IGZhbHNlXG5cdC8qKioqKiovIFx0XHR9O1xuXHQvKioqKioqL1xuXHQvKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdC8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblx0LyoqKioqKi9cblx0LyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcblx0LyoqKioqKi8gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXHQvKioqKioqL1xuXHQvKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0LyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcblx0LyoqKioqKi8gXHR9XG5cdC8qKioqKiovXG5cdC8qKioqKiovXG5cdC8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcblx0LyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXHQvKioqKioqL1xuXHQvKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG5cdC8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblx0LyoqKioqKi9cblx0LyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuXHQvKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cdC8qKioqKiovXG5cdC8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG5cdC8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cdC8qKioqKiovIH0pXG5cdC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cdC8qKioqKiovIChbXG5cdC8qIDAgKi9cblx0LyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cdFxuXHRcdCd1c2Ugc3RyaWN0Jztcblx0XHRcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXHRcdFxuXHRcdF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cdFx0XG5cdFx0X193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblx0XHRcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xuXHRcdFxuXHRcdF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cdFx0XG5cdFx0X193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblx0XHRcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKDkpO1xuXHRcdFxuXHRcdF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuXHRcdFxuXHRcdF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xuXHRcdFxuXHRcdF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdFx0XG5cdFx0X193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblx0XHRcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKTtcblx0XHRcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKTtcblx0XHRcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKDE0KTtcblx0XHRcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KTtcblx0XHRcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKDE3KTtcblx0XHRcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KTtcblx0XHRcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KTtcblx0XHRcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKDE5KTtcblx0XHRcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKDIwKTtcblx0XHRcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKDIxKTtcblx0XHRcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKDMxKTtcblx0XHRcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKDMyKTtcblx0XHRcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKDM0KTtcblx0XHRcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKDM1KTtcblx0XHRcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKDM2KTtcblx0XHRcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKDM4KTtcblx0XHRcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKDM5KTtcblx0XHRcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKDQwKTtcblx0XHRcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKDM3KTtcblx0XHRcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKDQxKTtcblx0XHRcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKDQyKTtcblx0XHRcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKDQzKTtcblx0XHRcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKDQ1KTtcblx0XHRcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKDQ3KTtcblx0XHRcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKDQ4KTtcblx0XHRcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKDQ0KTtcblx0XHRcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKDQ5KTtcblx0XHRcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKDUwKTtcblx0XHRcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKDUxKTtcblx0XHRcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKDQ2KTtcblx0XHRcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKDMzKTtcblx0XG5cdC8qKiovIH0sXG5cdC8qIDEgKi9cblx0LyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cdFxuXHRcdCd1c2Ugc3RyaWN0Jztcblx0XHRcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG5cdFx0ICAgIHZhbHVlOiB0cnVlXG5cdFx0fSk7XG5cdFx0XG5cdFx0X193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0XHRcblx0XHRpZiAoIUFycmF5LnByb3RvdHlwZS5jb250YWlucykge1xuXHRcdCAgICAvKipcblx0XHQgICAgICogQHBhcmFtIHsqfSBhXG5cdFx0ICAgICAqIEByZXR1cm4ge2Jvb2xlYW59XG5cdFx0ICAgICAqL1xuXHRcdCAgICBBcnJheS5wcm90b3R5cGUuY29udGFpbnMgPSBmdW5jdGlvbiAoYSkge1xuXHRcdCAgICAgICAgcmV0dXJuIHRoaXMuaW5kZXhPZihhKSA+PSAwO1xuXHRcdCAgICB9O1xuXHRcdH1cblx0XHRcblx0XHRleHBvcnRzWydkZWZhdWx0J10gPSBBcnJheS5wcm90b3R5cGUuY29udGFpbnM7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cdFxuXHQvKioqLyB9LFxuXHQvKiAyICovXG5cdC8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXHRcblx0XHQndXNlIHN0cmljdCc7XG5cdFx0XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuXHRcdCAgICB2YWx1ZTogdHJ1ZVxuXHRcdH0pO1xuXHRcdGlmICghQXJyYXkucHJvdG90eXBlLmluZGV4T2YpIHtcblx0XHQgICAgLyoqXG5cdFx0ICAgICAqIEBwYXJhbSB7Kn0gaXRlbVxuXHRcdCAgICAgKiBAcmV0dXJuIHtudW1iZXJ9XG5cdFx0ICAgICAqL1xuXHRcdCAgICBBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uIChpdGVtKSB7XG5cdFx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcblx0XHQgICAgICAgICAgICBpZiAoaSBpbiB0aGlzICYmIHRoaXNbaV0gPT09IGl0ZW0pIHJldHVybiBpO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgcmV0dXJuIC0xO1xuXHRcdCAgICB9O1xuXHRcdH1cblx0XHRcblx0XHRleHBvcnRzWydkZWZhdWx0J10gPSBBcnJheS5wcm90b3R5cGUuaW5kZXhPZjtcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblx0XG5cdC8qKiovIH0sXG5cdC8qIDMgKi9cblx0LyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cdFxuXHRcdCd1c2Ugc3RyaWN0Jztcblx0XHRcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG5cdFx0ICAgIHZhbHVlOiB0cnVlXG5cdFx0fSk7XG5cdFx0aWYgKCFBcnJheS5wcm90b3R5cGUuZXZlcnkpIHtcblx0XHQgICAgLyoqXG5cdFx0ICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG5cdFx0ICAgICAqIEBwYXJhbSB7Kn0gW2NvbnRleHRdXG5cdFx0ICAgICAqIEByZXR1cm4ge2Jvb2xlYW59XG5cdFx0ICAgICAqL1xuXHRcdCAgICBBcnJheS5wcm90b3R5cGUuZXZlcnkgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIGNvbnRleHQpIHtcblx0XHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuXHRcdCAgICAgICAgICAgIGlmICghY2FsbGJhY2suY2FsbChjb250ZXh0IHx8IHRoaXMsIHRoaXNbaV0sIGksIHRoaXMpKSByZXR1cm4gZmFsc2U7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICByZXR1cm4gdHJ1ZTtcblx0XHQgICAgfTtcblx0XHR9XG5cdFx0XG5cdFx0ZXhwb3J0c1snZGVmYXVsdCddID0gQXJyYXkucHJvdG90eXBlLmV2ZXJ5O1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXHRcblx0LyoqKi8gfSxcblx0LyogNCAqL1xuXHQvKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblx0XG5cdFx0J3VzZSBzdHJpY3QnO1xuXHRcdFxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcblx0XHQgICAgdmFsdWU6IHRydWVcblx0XHR9KTtcblx0XHRcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXHRcdFxuXHRcdGlmICghQXJyYXkucHJvdG90eXBlLmZpbHRlcikge1xuXHRcdCAgICAvKipcblx0XHQgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcblx0XHQgICAgICogQHBhcmFtIHsqfSBbY29udGV4dF1cblx0XHQgICAgICogQHJldHVybiB7QXJyYXl9XG5cdFx0ICAgICAqL1xuXHRcdCAgICBBcnJheS5wcm90b3R5cGUuZmlsdGVyID0gZnVuY3Rpb24gKGNhbGxiYWNrLCBjb250ZXh0KSB7XG5cdFx0ICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXHRcdFxuXHRcdCAgICAgICAgcmV0dXJuIHRoaXMuZmxhdE1hcChmdW5jdGlvbiAoYSwgaSkge1xuXHRcdCAgICAgICAgICAgIGlmIChjYWxsYmFjay5jYWxsKGNvbnRleHQgfHwgX3RoaXMsIGEsIGksIF90aGlzKSkgcmV0dXJuIGE7XG5cdFx0ICAgICAgICB9KTtcblx0XHQgICAgfTtcblx0XHR9XG5cdFx0XG5cdFx0ZXhwb3J0c1snZGVmYXVsdCddID0gQXJyYXkucHJvdG90eXBlLmZpbHRlcjtcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblx0XG5cdC8qKiovIH0sXG5cdC8qIDUgKi9cblx0LyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cdFxuXHRcdCd1c2Ugc3RyaWN0Jztcblx0XHRcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG5cdFx0ICAgIHZhbHVlOiB0cnVlXG5cdFx0fSk7XG5cdFx0XG5cdFx0X193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblx0XHRcblx0XHRpZiAoIUFycmF5LnByb3RvdHlwZS5mbGF0TWFwKSB7XG5cdFx0ICAgIC8qKlxuXHRcdCAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuXHRcdCAgICAgKiBAcGFyYW0geyp9IFtjb250ZXh0XVxuXHRcdCAgICAgKiBAcmV0dXJuIEFycmF5XG5cdFx0ICAgICAqL1xuXHRcdCAgICBBcnJheS5wcm90b3R5cGUuZmxhdE1hcCA9IGZ1bmN0aW9uIChjYWxsYmFjaywgY29udGV4dCkge1xuXHRcdCAgICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcblx0XHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuXHRcdCAgICAgICAgICAgIHZhciByZXN1bHQgPSBjYWxsYmFjay5jYWxsKGNvbnRleHQgfHwgdGhpcywgdGhpc1tpXSwgaSwgdGhpcyk7XG5cdFx0ICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmVzdWx0KSkgcmVzdWx0cy5wdXNoLmFwcGx5KHJlc3VsdHMsIHJlc3VsdCk7ZWxzZSBpZiAocmVzdWx0KSByZXN1bHRzLnB1c2gocmVzdWx0KTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIHJldHVybiByZXN1bHRzO1xuXHRcdCAgICB9O1xuXHRcdH1cblx0XHRcblx0XHRleHBvcnRzWydkZWZhdWx0J10gPSBBcnJheS5wcm90b3R5cGUuZmxhdE1hcDtcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblx0XG5cdC8qKiovIH0sXG5cdC8qIDYgKi9cblx0LyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cdFxuXHRcdCd1c2Ugc3RyaWN0Jztcblx0XHRcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG5cdFx0ICAgIHZhbHVlOiB0cnVlXG5cdFx0fSk7XG5cdFx0aWYgKCFBcnJheS5pc0FycmF5KSB7XG5cdFx0ICAgIC8qKlxuXHRcdCAgICAgKiBAcGFyYW0geyp9IG9ialxuXHRcdCAgICAgKiBAc3RhdGljXG5cdFx0ICAgICAqIEByZXR1cm4ge2Jvb2xlYW59XG5cdFx0ICAgICAqL1xuXHRcdCAgICBBcnJheS5pc0FycmF5ID0gZnVuY3Rpb24gKG9iaikge1xuXHRcdCAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBBcnJheV0nO1xuXHRcdCAgICB9O1xuXHRcdH1cblx0XHRcblx0XHRleHBvcnRzWydkZWZhdWx0J10gPSBBcnJheS5pc0FycmF5O1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXHRcblx0LyoqKi8gfSxcblx0LyogNyAqL1xuXHQvKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblx0XG5cdFx0J3VzZSBzdHJpY3QnO1xuXHRcdFxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcblx0XHQgICAgdmFsdWU6IHRydWVcblx0XHR9KTtcblx0XHRpZiAoIUFycmF5LnByb3RvdHlwZS5maXJzdCkge1xuXHRcdCAgICBBcnJheS5wcm90b3R5cGUuZmlyc3QgPSBmdW5jdGlvbiAoKSB7XG5cdFx0ICAgICAgICByZXR1cm4gdGhpc1swXTtcblx0XHQgICAgfTtcblx0XHR9XG5cdFx0XG5cdFx0ZXhwb3J0c1snZGVmYXVsdCddID0gQXJyYXkucHJvdG90eXBlLmZpcnN0O1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXHRcblx0LyoqKi8gfSxcblx0LyogOCAqL1xuXHQvKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblx0XG5cdFx0J3VzZSBzdHJpY3QnO1xuXHRcdFxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcblx0XHQgICAgdmFsdWU6IHRydWVcblx0XHR9KTtcblx0XHRpZiAoIUFycmF5LnByb3RvdHlwZS5ncm91cEJ5KSB7XG5cdFx0ICAgIC8qKlxuXHRcdCAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuXHRcdCAgICAgKiBAcGFyYW0geyp9IFtjb250ZXh0XVxuXHRcdCAgICAgKiBAcmV0dXJuIHt7fX1cblx0XHQgICAgICovXG5cdFx0ICAgIEFycmF5LnByb3RvdHlwZS5ncm91cEJ5ID0gZnVuY3Rpb24gKGNhbGxiYWNrLCBjb250ZXh0KSB7XG5cdFx0ICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG5cdFx0ICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGNhbGxiYWNrICsgXCIgaXMgbm90IGEgZnVuY3Rpb25cIik7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICB2YXIgcmVzdWx0ID0ge307XG5cdFx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcblx0XHQgICAgICAgICAgICB2YXIgdmFsdWUgPSB0aGlzW2ldO1xuXHRcdCAgICAgICAgICAgIHZhciBrZXkgPSBjYWxsYmFjay5jYWxsKGNvbnRleHQgfHwgdGhpcywgdmFsdWUsIGksIHRoaXMpO1xuXHRcdCAgICAgICAgICAgIGlmIChrZXkgIT0gbnVsbCkge1xuXHRcdCAgICAgICAgICAgICAgICBpZiAoa2V5IGluIHJlc3VsdCkgcmVzdWx0W2tleV0ucHVzaCh2YWx1ZSk7ZWxzZSByZXN1bHRba2V5XSA9IFt2YWx1ZV07XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgcmV0dXJuIHJlc3VsdDtcblx0XHQgICAgfTtcblx0XHR9XG5cdFx0XG5cdFx0ZXhwb3J0c1snZGVmYXVsdCddID0gQXJyYXkucHJvdG90eXBlLmdyb3VwQnk7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cdFxuXHQvKioqLyB9LFxuXHQvKiA5ICovXG5cdC8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXHRcblx0XHQndXNlIHN0cmljdCc7XG5cdFx0XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuXHRcdCAgICB2YWx1ZTogdHJ1ZVxuXHRcdH0pO1xuXHRcdGlmICghQXJyYXkucHJvdG90eXBlLmdyb3VwZWQpIHtcblx0XHQgICAgLyoqXG5cdFx0ICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzaXplXG5cdFx0ICAgICAqIEByZXR1cm4ge0FycmF5PEFycmF5Pn1cblx0XHQgICAgICovXG5cdFx0ICAgIEFycmF5LnByb3RvdHlwZS5ncm91cGVkID0gZnVuY3Rpb24gKHNpemUpIHtcblx0XHQgICAgICAgIHZhciByZXN1bHRzID0gW107XG5cdFx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IHNpemUpIHtcblx0XHQgICAgICAgICAgICByZXN1bHRzLnB1c2godGhpcy5zbGljZShpLCBpICsgc2l6ZSkpO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG5cdFx0ICAgIH07XG5cdFx0fVxuXHRcdFxuXHRcdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IEFycmF5LnByb3RvdHlwZS5ncm91cGVkO1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXHRcblx0LyoqKi8gfSxcblx0LyogMTAgKi9cblx0LyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cdFxuXHRcdCd1c2Ugc3RyaWN0Jztcblx0XHRcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG5cdFx0ICAgIHZhbHVlOiB0cnVlXG5cdFx0fSk7XG5cdFx0aWYgKCFBcnJheS5wcm90b3R5cGUuZ3JvdXBlZFJpZ2h0KSB7XG5cdFx0ICAgIC8qKlxuXHRcdCAgICAgKiBAcGFyYW0ge251bWJlcn0gc2l6ZVxuXHRcdCAgICAgKiBAcmV0dXJuIHtBcnJheTxBcnJheT59XG5cdFx0ICAgICAqL1xuXHRcdCAgICBBcnJheS5wcm90b3R5cGUuZ3JvdXBlZFJpZ2h0ID0gZnVuY3Rpb24gKHNpemUpIHtcblx0XHQgICAgICAgIHZhciByZXN1bHRzID0gW107XG5cdFx0ICAgICAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGg7IGkgPiAwOyBpIC09IHNpemUpIHtcblx0XHQgICAgICAgICAgICByZXN1bHRzLnB1c2godGhpcy5zbGljZShNYXRoLm1heCgwLCBpIC0gc2l6ZSksIGkpKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIHJldHVybiByZXN1bHRzLnJldmVyc2UoKTtcblx0XHQgICAgfTtcblx0XHR9XG5cdFx0XG5cdFx0ZXhwb3J0c1snZGVmYXVsdCddID0gQXJyYXkucHJvdG90eXBlLmdyb3VwZWRSaWdodDtcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblx0XG5cdC8qKiovIH0sXG5cdC8qIDExICovXG5cdC8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXHRcblx0XHQndXNlIHN0cmljdCc7XG5cdFx0XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuXHRcdCAgICB2YWx1ZTogdHJ1ZVxuXHRcdH0pO1xuXHRcdFxuXHRcdF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdFx0XG5cdFx0aWYgKCFBcnJheS5wcm90b3R5cGUuaW5jbHVkZSkge1xuXHRcdCAgICBBcnJheS5wcm90b3R5cGUuaW5jbHVkZSA9IGZ1bmN0aW9uIChhKSB7XG5cdFx0ICAgICAgICB2YXIgaSA9IHRoaXMuaW5kZXhPZihhKTtcblx0XHQgICAgICAgIGlmIChpID4gLTEpIHRoaXNbaV0gPSBhO2Vsc2UgdGhpcy5wdXNoKGEpO1xuXHRcdCAgICAgICAgcmV0dXJuIHRoaXM7XG5cdFx0ICAgIH07XG5cdFx0fVxuXHRcdFxuXHRcdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IEFycmF5LnByb3RvdHlwZS5pbmNsdWRlO1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXHRcblx0LyoqKi8gfSxcblx0LyogMTIgKi9cblx0LyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cdFxuXHRcdCd1c2Ugc3RyaWN0Jztcblx0XHRcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG5cdFx0ICAgIHZhbHVlOiB0cnVlXG5cdFx0fSk7XG5cdFx0aWYgKCFBcnJheS5wcm90b3R5cGUuam9pblBhdGhzKSB7XG5cdFx0ICAgIEFycmF5LnByb3RvdHlwZS5qb2luUGF0aHMgPSBmdW5jdGlvbiAoKSB7XG5cdFx0ICAgICAgICB2YXIgcGF0aCA9ICcnO1xuXHRcdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG5cdFx0ICAgICAgICAgICAgaWYgKHRoaXNbaV0pIHtcblx0XHQgICAgICAgICAgICAgICAgaWYgKHBhdGgubGVuZ3RoID4gMCAmJiBwYXRoLmNoYXJBdChwYXRoLmxlbmd0aCAtIDEpICE9PSAnLycpIHBhdGggKz0gJy8nO1xuXHRcdFxuXHRcdCAgICAgICAgICAgICAgICBwYXRoICs9IHRoaXNbaV0udG9TdHJpbmcoKTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICByZXR1cm4gcGF0aDtcblx0XHQgICAgfTtcblx0XHR9XG5cdFx0XG5cdFx0ZXhwb3J0c1snZGVmYXVsdCddID0gQXJyYXkucHJvdG90eXBlLmpvaW5QYXRocztcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblx0XG5cdC8qKiovIH0sXG5cdC8qIDEzICovXG5cdC8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXHRcblx0XHQndXNlIHN0cmljdCc7XG5cdFx0XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuXHRcdCAgICB2YWx1ZTogdHJ1ZVxuXHRcdH0pO1xuXHRcdGlmICghQXJyYXkucHJvdG90eXBlLmxhc3QpIHtcblx0XHQgICAgQXJyYXkucHJvdG90eXBlLmxhc3QgPSBmdW5jdGlvbiAoKSB7XG5cdFx0ICAgICAgICByZXR1cm4gdGhpc1t0aGlzLmxlbmd0aCAtIDFdO1xuXHRcdCAgICB9O1xuXHRcdH1cblx0XHRcblx0XHRleHBvcnRzWydkZWZhdWx0J10gPSBBcnJheS5wcm90b3R5cGUubGFzdDtcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblx0XG5cdC8qKiovIH0sXG5cdC8qIDE0ICovXG5cdC8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXHRcblx0XHQndXNlIHN0cmljdCc7XG5cdFx0XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuXHRcdCAgICB2YWx1ZTogdHJ1ZVxuXHRcdH0pO1xuXHRcdGlmICghQXJyYXkucHJvdG90eXBlLm1hcCkge1xuXHRcdCAgICAvKipcblx0XHQgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcblx0XHQgICAgICogQHBhcmFtIHsqfSBbY29udGV4dF1cblx0XHQgICAgICovXG5cdFx0ICAgIEFycmF5LnByb3RvdHlwZS5tYXAgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIGNvbnRleHQpIHtcblx0XHQgICAgICAgIHZhciByZXN1bHQgPSBbXTtcblx0XHQgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IHRoaXMubGVuZ3RoOyBpKyspIHtcblx0XHQgICAgICAgICAgICByZXN1bHQucHVzaChjYWxsYmFjay5jYWxsKGNvbnRleHQgfHwgdGhpcywgdGhpc1tpXSwgaSwgdGhpcykpO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgcmV0dXJuIHJlc3VsdDtcblx0XHQgICAgfTtcblx0XHR9XG5cdFx0XG5cdFx0ZXhwb3J0c1snZGVmYXVsdCddID0gQXJyYXkucHJvdG90eXBlLm1hcDtcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblx0XG5cdC8qKiovIH0sXG5cdC8qIDE1ICovXG5cdC8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXHRcblx0XHQndXNlIHN0cmljdCc7XG5cdFx0XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuXHRcdCAgICB2YWx1ZTogdHJ1ZVxuXHRcdH0pO1xuXHRcdFxuXHRcdF9fd2VicGFja19yZXF1aXJlX18oMTYpO1xuXHRcdFxuXHRcdGlmICghQXJyYXkucHJvdG90eXBlLm1heCkge1xuXHRcdCAgICBBcnJheS5wcm90b3R5cGUubWF4ID0gZnVuY3Rpb24gKCkge1xuXHRcdCAgICAgICAgcmV0dXJuIHRoaXMucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG5cdFx0ICAgICAgICAgICAgcmV0dXJuIGEgPiBiID8gYSA6IGI7XG5cdFx0ICAgICAgICB9KTtcblx0XHQgICAgfTtcblx0XHR9XG5cdFx0XG5cdFx0ZXhwb3J0c1snZGVmYXVsdCddID0gQXJyYXkucHJvdG90eXBlLm1heDtcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblx0XG5cdC8qKiovIH0sXG5cdC8qIDE2ICovXG5cdC8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXHRcblx0XHQndXNlIHN0cmljdCc7XG5cdFx0XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdFx0ICAgIHZhbHVlOiB0cnVlXG5cdFx0fSk7XG5cdFx0aWYgKCFBcnJheS5wcm90b3R5cGUucmVkdWNlKSB7XG5cdFx0ICAgIC8qKlxuXHRcdCAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuXHRcdCAgICAgKiBAcGFyYW0geyp9IFtjb250ZXh0XVxuXHRcdCAgICAgKiBAcmV0dXJuIHsqfVxuXHRcdCAgICAgKi9cblx0XHQgICAgQXJyYXkucHJvdG90eXBlLnJlZHVjZSA9IGZ1bmN0aW9uIChjYWxsYmFjaywgY29udGV4dCkge1xuXHRcdCAgICAgICAgaWYgKCEodGhpcy5sZW5ndGggPiAwKSkge1xuXHRcdCAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJSZWR1Y2Ugb2YgZW1wdHkgYXJyYXkgd2l0aCBubyBpbml0aWFsIHZhbHVlXCIpO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXNbMF07XG5cdFx0ICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8PSB0aGlzLmxlbmd0aDsgaSsrKSB7XG5cdFx0ICAgICAgICAgICAgcmVzdWx0ID0gY2FsbGJhY2suY2FsbChjb250ZXh0IHx8IHRoaXMsIHJlc3VsdCwgdGhpc1tpXSwgaSwgdGhpcyk7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICByZXR1cm4gcmVzdWx0O1xuXHRcdCAgICB9O1xuXHRcdH1cblx0XHRcblx0XHRleHBvcnRzW1wiZGVmYXVsdFwiXSA9IEFycmF5LnByb3RvdHlwZS5yZWR1Y2U7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTtcblx0XG5cdC8qKiovIH0sXG5cdC8qIDE3ICovXG5cdC8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXHRcblx0XHQndXNlIHN0cmljdCc7XG5cdFx0XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuXHRcdCAgICB2YWx1ZTogdHJ1ZVxuXHRcdH0pO1xuXHRcdFxuXHRcdF9fd2VicGFja19yZXF1aXJlX18oMTYpO1xuXHRcdFxuXHRcdGlmICghQXJyYXkucHJvdG90eXBlLm1pbikge1xuXHRcdCAgICBBcnJheS5wcm90b3R5cGUubWluID0gZnVuY3Rpb24gKCkge1xuXHRcdCAgICAgICAgcmV0dXJuIHRoaXMucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG5cdFx0ICAgICAgICAgICAgcmV0dXJuIGEgPCBiID8gYSA6IGI7XG5cdFx0ICAgICAgICB9KTtcblx0XHQgICAgfTtcblx0XHR9XG5cdFx0XG5cdFx0ZXhwb3J0c1snZGVmYXVsdCddID0gQXJyYXkucHJvdG90eXBlLm1pbjtcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblx0XG5cdC8qKiovIH0sXG5cdC8qIDE4ICovXG5cdC8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXHRcblx0XHQndXNlIHN0cmljdCc7XG5cdFx0XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuXHRcdCAgICB2YWx1ZTogdHJ1ZVxuXHRcdH0pO1xuXHRcdGlmICghQXJyYXkucmFuZ2UpIHtcblx0XHQgICAgLyoqXG5cdFx0ICAgICAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30gZnJvbVxuXHRcdCAgICAgKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IHRvXG5cdFx0ICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGVwXG5cdFx0ICAgICAqIEBzdGF0aWNcblx0XHQgICAgICogQHJldHVybiB7QXJyYXl9XG5cdFx0ICAgICAqL1xuXHRcdCAgICBBcnJheS5yYW5nZSA9IGZ1bmN0aW9uIChmcm9tLCB0bykge1xuXHRcdCAgICAgICAgdmFyIHN0ZXAgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDIgfHwgYXJndW1lbnRzWzJdID09PSB1bmRlZmluZWQgPyAxIDogYXJndW1lbnRzWzJdO1xuXHRcdFxuXHRcdCAgICAgICAgdmFyIHJhbmdlID0gW107XG5cdFx0ICAgICAgICB2YXIgaXNOdW1iZXIgPSB0eXBlb2YgZnJvbSA9PT0gJ251bWJlcicgJiYgdHlwZW9mIHRvID09PSAnbnVtYmVyJztcblx0XHQgICAgICAgIHZhciBiZWdpbiA9IGlzTnVtYmVyID8gZnJvbSA6IGZyb20udG9TdHJpbmcoKS5jaGFyQ29kZUF0KDApO1xuXHRcdCAgICAgICAgdmFyIGVuZCA9IGlzTnVtYmVyID8gdG8gOiB0by50b1N0cmluZygpLmNoYXJDb2RlQXQoMCk7XG5cdFx0ICAgICAgICBzdGVwID0gTWF0aC5hYnMoc3RlcCkgfHwgMTtcblx0XHQgICAgICAgIGlmIChiZWdpbiA+IGVuZCkgc3RlcCA9IC1zdGVwO1xuXHRcdCAgICAgICAgZm9yICh2YXIgaSA9IGJlZ2luOyBzdGVwID4gMCA/IGkgPD0gZW5kIDogaSA+PSBlbmQ7IGkgKz0gc3RlcCkge1xuXHRcdCAgICAgICAgICAgIHJhbmdlLnB1c2goaXNOdW1iZXIgPyBpIDogU3RyaW5nLmZyb21DaGFyQ29kZShpKSk7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICByZXR1cm4gcmFuZ2U7XG5cdFx0ICAgIH07XG5cdFx0fVxuXHRcdFxuXHRcdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IEFycmF5LnJhbmdlO1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXHRcblx0LyoqKi8gfSxcblx0LyogMTkgKi9cblx0LyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cdFxuXHRcdCd1c2Ugc3RyaWN0Jztcblx0XHRcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG5cdFx0ICAgIHZhbHVlOiB0cnVlXG5cdFx0fSk7XG5cdFx0aWYgKCFBcnJheS5wcm90b3R5cGUucmVtb3ZlKSB7XG5cdFx0ICAgIEFycmF5LnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAoYSkge1xuXHRcdCAgICAgICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcblx0XHQgICAgICAgICAgICBpZiAodGhpc1tpXSA9PT0gYSkge1xuXHRcdCAgICAgICAgICAgICAgICB0aGlzLnNwbGljZShpLCAxKTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICByZXR1cm4gdGhpcztcblx0XHQgICAgfTtcblx0XHR9XG5cdFx0XG5cdFx0ZXhwb3J0c1snZGVmYXVsdCddID0gQXJyYXkucHJvdG90eXBlLnJlbW92ZTtcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblx0XG5cdC8qKiovIH0sXG5cdC8qIDIwICovXG5cdC8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXHRcblx0XHQndXNlIHN0cmljdCc7XG5cdFx0XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuXHRcdCAgICB2YWx1ZTogdHJ1ZVxuXHRcdH0pO1xuXHRcdGlmICghQXJyYXkucHJvdG90eXBlLnNvbWUpIHtcblx0XHQgICAgLyoqXG5cdFx0ICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG5cdFx0ICAgICAqIEBwYXJhbSB7Kn0gW2NvbnRleHRdXG5cdFx0ICAgICAqIEByZXR1cm4ge2Jvb2xlYW59XG5cdFx0ICAgICAqL1xuXHRcdCAgICBBcnJheS5wcm90b3R5cGUuc29tZSA9IGZ1bmN0aW9uIChjYWxsYmFjaywgY29udGV4dCkge1xuXHRcdCAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuXHRcdCAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihjYWxsYmFjayArIFwiIGlzIG5vdCBhIGZ1bmN0aW9uXCIpO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG5cdFx0ICAgICAgICAgICAgaWYgKGNhbGxiYWNrLmNhbGwoY29udGV4dCB8fCB0aGlzLCB0aGlzW2ldLCBpLCB0aGlzKSkgcmV0dXJuIHRydWU7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICByZXR1cm4gZmFsc2U7XG5cdFx0ICAgIH07XG5cdFx0fVxuXHRcdFxuXHRcdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IEFycmF5LnByb3RvdHlwZS5zb21lO1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXHRcblx0LyoqKi8gfSxcblx0LyogMjEgKi9cblx0LyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cdFxuXHRcdCd1c2Ugc3RyaWN0Jztcblx0XHRcblx0XHR2YXIgX1JlZ0V4cCRlc2NhcGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIyKVsnZGVmYXVsdCddO1xuXHRcdFxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcblx0XHQgICAgdmFsdWU6IHRydWVcblx0XHR9KTtcblx0XHRpZiAoIV9SZWdFeHAkZXNjYXBlKSB7XG5cdFx0ICAgIC8qKlxuXHRcdCAgICAgKiBAcGFyYW0ge1N0cmluZ30gdGV4dFxuXHRcdCAgICAgKiBAc3RhdGljXG5cdFx0ICAgICAqIEByZXR1cm4ge1N0cmluZ31cblx0XHQgICAgICovXG5cdFx0ICAgIFJlZ0V4cC5lc2NhcGUgPSBmdW5jdGlvbiAodGV4dCkge1xuXHRcdCAgICAgICAgcmV0dXJuIHRleHQucmVwbGFjZSgvWy1bXFxde30oKSorPy4sXFxcXF4kfCNcXHNdL2csICdcXFxcJCYnKTtcblx0XHQgICAgfTtcblx0XHR9XG5cdFx0XG5cdFx0ZXhwb3J0c1snZGVmYXVsdCddID0gX1JlZ0V4cCRlc2NhcGU7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cdFxuXHQvKioqLyB9LFxuXHQvKiAyMiAqL1xuXHQvKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblx0XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDIzKSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXHRcblx0LyoqKi8gfSxcblx0LyogMjMgKi9cblx0LyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cdFxuXHRcdF9fd2VicGFja19yZXF1aXJlX18oMjQpO1xuXHRcdG1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNykuUmVnRXhwLmVzY2FwZTtcblx0XG5cdC8qKiovIH0sXG5cdC8qIDI0ICovXG5cdC8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXHRcblx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vYmVuamFtaW5nci9SZXhFeHAuZXNjYXBlXG5cdFx0dmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI1KVxuXHRcdCAgLCAkcmUgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMCkoL1tcXFxcXiQqKz8uKCl8W1xcXXt9XS9nLCAnXFxcXCQmJyk7XG5cdFx0XG5cdFx0JGV4cG9ydCgkZXhwb3J0LlMsICdSZWdFeHAnLCB7ZXNjYXBlOiBmdW5jdGlvbiBlc2NhcGUoaXQpeyByZXR1cm4gJHJlKGl0KTsgfX0pO1xuXHRcblx0XG5cdC8qKiovIH0sXG5cdC8qIDI1ICovXG5cdC8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXHRcblx0XHR2YXIgZ2xvYmFsICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNilcblx0XHQgICwgY29yZSAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNylcblx0XHQgICwgY3R4ICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOClcblx0XHQgICwgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cdFx0XG5cdFx0dmFyICRleHBvcnQgPSBmdW5jdGlvbih0eXBlLCBuYW1lLCBzb3VyY2Upe1xuXHRcdCAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkZcblx0XHQgICAgLCBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HXG5cdFx0ICAgICwgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuU1xuXHRcdCAgICAsIElTX1BST1RPICA9IHR5cGUgJiAkZXhwb3J0LlBcblx0XHQgICAgLCBJU19CSU5EICAgPSB0eXBlICYgJGV4cG9ydC5CXG5cdFx0ICAgICwgSVNfV1JBUCAgID0gdHlwZSAmICRleHBvcnQuV1xuXHRcdCAgICAsIGV4cG9ydHMgICA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pXG5cdFx0ICAgICwgdGFyZ2V0ICAgID0gSVNfR0xPQkFMID8gZ2xvYmFsIDogSVNfU1RBVElDID8gZ2xvYmFsW25hbWVdIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXVxuXHRcdCAgICAsIGtleSwgb3duLCBvdXQ7XG5cdFx0ICBpZihJU19HTE9CQUwpc291cmNlID0gbmFtZTtcblx0XHQgIGZvcihrZXkgaW4gc291cmNlKXtcblx0XHQgICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG5cdFx0ICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIGtleSBpbiB0YXJnZXQ7XG5cdFx0ICAgIGlmKG93biAmJiBrZXkgaW4gZXhwb3J0cyljb250aW51ZTtcblx0XHQgICAgLy8gZXhwb3J0IG5hdGl2ZSBvciBwYXNzZWRcblx0XHQgICAgb3V0ID0gb3duID8gdGFyZ2V0W2tleV0gOiBzb3VyY2Vba2V5XTtcblx0XHQgICAgLy8gcHJldmVudCBnbG9iYWwgcG9sbHV0aW9uIGZvciBuYW1lc3BhY2VzXG5cdFx0ICAgIGV4cG9ydHNba2V5XSA9IElTX0dMT0JBTCAmJiB0eXBlb2YgdGFyZ2V0W2tleV0gIT0gJ2Z1bmN0aW9uJyA/IHNvdXJjZVtrZXldXG5cdFx0ICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG5cdFx0ICAgIDogSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpXG5cdFx0ICAgIC8vIHdyYXAgZ2xvYmFsIGNvbnN0cnVjdG9ycyBmb3IgcHJldmVudCBjaGFuZ2UgdGhlbSBpbiBsaWJyYXJ5XG5cdFx0ICAgIDogSVNfV1JBUCAmJiB0YXJnZXRba2V5XSA9PSBvdXQgPyAoZnVuY3Rpb24oQyl7XG5cdFx0ICAgICAgdmFyIEYgPSBmdW5jdGlvbihwYXJhbSl7XG5cdFx0ICAgICAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIEMgPyBuZXcgQyhwYXJhbSkgOiBDKHBhcmFtKTtcblx0XHQgICAgICB9O1xuXHRcdCAgICAgIEZbUFJPVE9UWVBFXSA9IENbUFJPVE9UWVBFXTtcblx0XHQgICAgICByZXR1cm4gRjtcblx0XHQgICAgLy8gbWFrZSBzdGF0aWMgdmVyc2lvbnMgZm9yIHByb3RvdHlwZSBtZXRob2RzXG5cdFx0ICAgIH0pKG91dCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcblx0XHQgICAgaWYoSVNfUFJPVE8pKGV4cG9ydHNbUFJPVE9UWVBFXSB8fCAoZXhwb3J0c1tQUk9UT1RZUEVdID0ge30pKVtrZXldID0gb3V0O1xuXHRcdCAgfVxuXHRcdH07XG5cdFx0Ly8gdHlwZSBiaXRtYXBcblx0XHQkZXhwb3J0LkYgPSAxOyAgLy8gZm9yY2VkXG5cdFx0JGV4cG9ydC5HID0gMjsgIC8vIGdsb2JhbFxuXHRcdCRleHBvcnQuUyA9IDQ7ICAvLyBzdGF0aWNcblx0XHQkZXhwb3J0LlAgPSA4OyAgLy8gcHJvdG9cblx0XHQkZXhwb3J0LkIgPSAxNjsgLy8gYmluZFxuXHRcdCRleHBvcnQuVyA9IDMyOyAvLyB3cmFwXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuXHRcblx0LyoqKi8gfSxcblx0LyogMjYgKi9cblx0LyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cdFxuXHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG5cdFx0dmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG5cdFx0ICA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZiA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdFx0aWYodHlwZW9mIF9fZyA9PSAnbnVtYmVyJylfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcblx0XG5cdC8qKiovIH0sXG5cdC8qIDI3ICovXG5cdC8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXHRcblx0XHR2YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0ge3ZlcnNpb246ICcxLjIuNid9O1xuXHRcdGlmKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuXHRcblx0LyoqKi8gfSxcblx0LyogMjggKi9cblx0LyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cdFxuXHRcdC8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xuXHRcdHZhciBhRnVuY3Rpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI5KTtcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGZuLCB0aGF0LCBsZW5ndGgpe1xuXHRcdCAgYUZ1bmN0aW9uKGZuKTtcblx0XHQgIGlmKHRoYXQgPT09IHVuZGVmaW5lZClyZXR1cm4gZm47XG5cdFx0ICBzd2l0Y2gobGVuZ3RoKXtcblx0XHQgICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24oYSl7XG5cdFx0ICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG5cdFx0ICAgIH07XG5cdFx0ICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uKGEsIGIpe1xuXHRcdCAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuXHRcdCAgICB9O1xuXHRcdCAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbihhLCBiLCBjKXtcblx0XHQgICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcblx0XHQgICAgfTtcblx0XHQgIH1cblx0XHQgIHJldHVybiBmdW5jdGlvbigvKiAuLi5hcmdzICovKXtcblx0XHQgICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG5cdFx0ICB9O1xuXHRcdH07XG5cdFxuXHQvKioqLyB9LFxuXHQvKiAyOSAqL1xuXHQvKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblx0XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG5cdFx0ICBpZih0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJyl0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuXHRcdCAgcmV0dXJuIGl0O1xuXHRcdH07XG5cdFxuXHQvKioqLyB9LFxuXHQvKiAzMCAqL1xuXHQvKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblx0XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihyZWdFeHAsIHJlcGxhY2Upe1xuXHRcdCAgdmFyIHJlcGxhY2VyID0gcmVwbGFjZSA9PT0gT2JqZWN0KHJlcGxhY2UpID8gZnVuY3Rpb24ocGFydCl7XG5cdFx0ICAgIHJldHVybiByZXBsYWNlW3BhcnRdO1xuXHRcdCAgfSA6IHJlcGxhY2U7XG5cdFx0ICByZXR1cm4gZnVuY3Rpb24oaXQpe1xuXHRcdCAgICByZXR1cm4gU3RyaW5nKGl0KS5yZXBsYWNlKHJlZ0V4cCwgcmVwbGFjZXIpO1xuXHRcdCAgfTtcblx0XHR9O1xuXHRcblx0LyoqKi8gfSxcblx0LyogMzEgKi9cblx0LyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cdFxuXHRcdCd1c2Ugc3RyaWN0Jztcblx0XHRcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG5cdFx0ICAgIHZhbHVlOiB0cnVlXG5cdFx0fSk7XG5cdFx0aWYgKCFTdHJpbmcucHJvdG90eXBlLmFudFN0eWxlUGF0aFRvUmVnZXgpIHtcblx0XHQgICAgLyoqXG5cdFx0ICAgICAqIEByZXR1cm4ge1JlZ0V4cH1cblx0XHQgICAgICovXG5cdFx0ICAgIFN0cmluZy5wcm90b3R5cGUuYW50U3R5bGVQYXRoVG9SZWdleCA9IGZ1bmN0aW9uICgpIHtcblx0XHQgICAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkge1xuXHRcdCAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiUGF0aCBtdXN0IG5vdCBiZSBlbXB0eS5cIik7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICB2YXIgcGF0aCA9IHRoaXMucmVwbGFjZSgvXFwvezIsfS9nLCAnLycpLnJlcGxhY2UoL1stW1xcXXt9KCkrLixcXFxcXiR8I1xcc10vZywgJ1xcXFwkJicpO1xuXHRcdCAgICAgICAgdmFyIHBhdHRlcm4gPSBwYXRoLnJlcGxhY2UoLygoXFwvP1xcKlxcKil8KFxcLz9cXCopfChcXD8pfChcXC8pKS9nLCBmdW5jdGlvbiAoJDApIHtcblx0XHQgICAgICAgICAgICBzd2l0Y2ggKCQwKSB7XG5cdFx0ICAgICAgICAgICAgICAgIGNhc2UgJy8qKic6XG5cdFx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gJyg/Oi97MSx9LiopPyc7XG5cdFx0ICAgICAgICAgICAgICAgIGNhc2UgJyoqJzpcblx0XHQgICAgICAgICAgICAgICAgICAgIHJldHVybiAnLionO1xuXHRcdCAgICAgICAgICAgICAgICBjYXNlICcvKic6XG5cdFx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gJyg/Oi97MSx9W14vXSopPyc7XG5cdFx0ICAgICAgICAgICAgICAgIGNhc2UgJyonOlxuXHRcdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbXi9dKic7XG5cdFx0ICAgICAgICAgICAgICAgIGNhc2UgJz8nOlxuXHRcdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbXi9dJztcblx0XHQgICAgICAgICAgICAgICAgY2FzZSAnLyc6XG5cdFx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gJy97MSx9Jztcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICB9KTtcblx0XHQgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKCdeKCcgKyBwYXR0ZXJuICsgJykkJyk7XG5cdFx0ICAgIH07XG5cdFx0fVxuXHRcdGlmICghU3RyaW5nLnByb3RvdHlwZS5hKSB7XG5cdFx0ICAgIFN0cmluZy5wcm90b3R5cGUuYSA9IFN0cmluZy5wcm90b3R5cGUuYW50U3R5bGVQYXRoVG9SZWdleDtcblx0XHR9XG5cdFx0XG5cdFx0ZXhwb3J0c1snZGVmYXVsdCddID0gU3RyaW5nLnByb3RvdHlwZS5hbnRTdHlsZVBhdGhUb1JlZ2V4O1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXHRcblx0LyoqKi8gfSxcblx0LyogMzIgKi9cblx0LyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cdFxuXHRcdCd1c2Ugc3RyaWN0Jztcblx0XHRcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG5cdFx0ICAgIHZhbHVlOiB0cnVlXG5cdFx0fSk7XG5cdFx0XG5cdFx0X193ZWJwYWNrX3JlcXVpcmVfXygzMyk7XG5cdFx0XG5cdFx0aWYgKCFTdHJpbmcucHJvdG90eXBlLmJyMm5sKSB7XG5cdFx0ICAgIC8qKlxuXHRcdCAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHhtbFVuZXNjYXBlXG5cdFx0ICAgICAqIEByZXR1cm4ge1N0cmluZ31cblx0XHQgICAgICovXG5cdFx0ICAgIFN0cmluZy5wcm90b3R5cGUuYnIybmwgPSBmdW5jdGlvbiAoeG1sVW5lc2NhcGUpIHtcblx0XHQgICAgICAgIHZhciByZXN1bHQgPSB0aGlzLnJlcGxhY2UoLyg8YnI+fDxiclxcLz4pL2csICdcXG4nKTtcblx0XHQgICAgICAgIGlmICh4bWxVbmVzY2FwZSkgcmV0dXJuIHJlc3VsdC54bWxVbmVzY2FwZSgpO1xuXHRcdCAgICAgICAgcmV0dXJuIHJlc3VsdDtcblx0XHQgICAgfTtcblx0XHR9XG5cdFx0XG5cdFx0ZXhwb3J0c1snZGVmYXVsdCddID0gU3RyaW5nLnByb3RvdHlwZS5icjJubDtcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblx0XG5cdC8qKiovIH0sXG5cdC8qIDMzICovXG5cdC8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXHRcblx0XHQndXNlIHN0cmljdCc7XG5cdFx0XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuXHRcdCAgICB2YWx1ZTogdHJ1ZVxuXHRcdH0pO1xuXHRcdGlmICghU3RyaW5nLnByb3RvdHlwZS54bWxVbmVzY2FwZSkge1xuXHRcdCAgICBTdHJpbmcucHJvdG90eXBlLnhtbFVuZXNjYXBlID0gZnVuY3Rpb24gKCkge1xuXHRcdCAgICAgICAgcmV0dXJuIHRoaXMucmVwbGFjZSgvKCZsdDt8Jmd0O3wmIzM0O3wmIzM5O3wmYW1wOykvZywgZnVuY3Rpb24gKCQxKSB7XG5cdFx0ICAgICAgICAgICAgc3dpdGNoICgkMSkge1xuXHRcdCAgICAgICAgICAgICAgICBjYXNlICcmbHQ7Jzpcblx0XHQgICAgICAgICAgICAgICAgICAgIHJldHVybiAnPCc7XG5cdFx0ICAgICAgICAgICAgICAgIGNhc2UgJyZndDsnOlxuXHRcdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuICc+Jztcblx0XHQgICAgICAgICAgICAgICAgY2FzZSAnJiMzNDsnOlxuXHRcdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdcIic7XG5cdFx0ICAgICAgICAgICAgICAgIGNhc2UgJyYjMzk7Jzpcblx0XHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIidcIjtcblx0XHQgICAgICAgICAgICAgICAgY2FzZSAnJmFtcDsnOlxuXHRcdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuICcmJztcblx0XHQgICAgICAgICAgICAgICAgZGVmYXVsdDpcblx0XHQgICAgICAgICAgICAgICAgICAgIHJldHVybiAkMTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICB9KTtcblx0XHQgICAgfTtcblx0XHR9XG5cdFx0XG5cdFx0ZXhwb3J0c1snZGVmYXVsdCddID0gU3RyaW5nLnByb3RvdHlwZS54bWxVbmVzY2FwZTtcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblx0XG5cdC8qKiovIH0sXG5cdC8qIDM0ICovXG5cdC8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXHRcblx0XHQndXNlIHN0cmljdCc7XG5cdFx0XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuXHRcdCAgICB2YWx1ZTogdHJ1ZVxuXHRcdH0pO1xuXHRcdGlmICghU3RyaW5nLnByb3RvdHlwZS5jb21wYXJlVG8pIHtcblx0XHQgICAgU3RyaW5nLnByb3RvdHlwZS5jb21wYXJlVG8gPSBmdW5jdGlvbiAoc3RyKSB7XG5cdFx0ICAgICAgICBpZiAoc3RyID09IG51bGwgfHwgdGhpcyA+IHN0cikgcmV0dXJuIDE7XG5cdFx0ICAgICAgICBpZiAodGhpcyA8IHN0cikgcmV0dXJuIC0xO1xuXHRcdCAgICAgICAgcmV0dXJuIDA7XG5cdFx0ICAgIH07XG5cdFx0fVxuXHRcdFxuXHRcdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IFN0cmluZy5wcm90b3R5cGUuY29tcGFyZVRvO1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXHRcblx0LyoqKi8gfSxcblx0LyogMzUgKi9cblx0LyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cdFxuXHRcdCd1c2Ugc3RyaWN0Jztcblx0XHRcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG5cdFx0ICB2YWx1ZTogdHJ1ZVxuXHRcdH0pO1xuXHRcdGlmICghU3RyaW5nLnByb3RvdHlwZS5jb250YWlucykge1xuXHRcdCAgLyoqXG5cdFx0ICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyXG5cdFx0ICAgKi9cblx0XHQgIFN0cmluZy5wcm90b3R5cGUuY29udGFpbnMgPSBmdW5jdGlvbiAoc3RyKSB7XG5cdFx0ICAgIHJldHVybiB0aGlzLmluZGV4T2Yoc3RyKSA+IC0xO1xuXHRcdCAgfTtcblx0XHR9XG5cdFx0XG5cdFx0ZXhwb3J0c1snZGVmYXVsdCddID0gU3RyaW5nLnByb3RvdHlwZS5jb250YWlucztcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblx0XG5cdC8qKiovIH0sXG5cdC8qIDM2ICovXG5cdC8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXHRcblx0XHQndXNlIHN0cmljdCc7XG5cdFx0XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuXHRcdCAgICB2YWx1ZTogdHJ1ZVxuXHRcdH0pO1xuXHRcdFxuXHRcdF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cdFx0XG5cdFx0X193ZWJwYWNrX3JlcXVpcmVfXygzNyk7XG5cdFx0XG5cdFx0aWYgKCFTdHJpbmcucHJvdG90eXBlLmN1dHN0cmluZykge1xuXHRcdCAgICAvKipcblx0XHQgICAgICogQHBhcmFtIHtib29sZWFufG51bWJlcn0gW2NoZWNrYnl0ZV0gY2hlY2sgYnl0ZSBsZW5ndGggaWYgdHJ1ZS4gKGRlZmF1bHQgaXMgZmFsc2UpXG5cdFx0ICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtYXhMZW5ndGggdGhlIG1heCBsZW5ndGguXG5cdFx0ICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3VmZml4XSB0aGUgc3VmZml4LlxuXHRcdCAgICAgKiBAcmV0dXJuIHtzdHJpbmd9XG5cdFx0ICAgICAqL1xuXHRcdCAgICBTdHJpbmcucHJvdG90eXBlLmN1dHN0cmluZyA9IGZ1bmN0aW9uIChjaGVja2J5dGUsIG1heExlbmd0aCwgc3VmZml4KSB7XG5cdFx0ICAgICAgICB2YXIgX2FyZ3VtZW50cyA9IGFyZ3VtZW50cztcblx0XHRcblx0XHQgICAgICAgIHZhciBhcmdJbmRleCA9IDA7XG5cdFx0ICAgICAgICB2YXIgYXJnQ3VyciA9IGZ1bmN0aW9uIGFyZ0N1cnIoKSB7XG5cdFx0ICAgICAgICAgICAgcmV0dXJuIF9hcmd1bWVudHNbYXJnSW5kZXhdO1xuXHRcdCAgICAgICAgfTtcblx0XHQgICAgICAgIHZhciBhcmdTaGlmdCA9IGZ1bmN0aW9uIGFyZ1NoaWZ0KCkge1xuXHRcdCAgICAgICAgICAgIHJldHVybiBfYXJndW1lbnRzW2FyZ0luZGV4KytdO1xuXHRcdCAgICAgICAgfTtcblx0XHRcblx0XHQgICAgICAgIGNoZWNrYnl0ZSA9IFsnYm9vbGVhbicsICdudW1iZXInXS5jb250YWlucyh0eXBlb2YgYXJnQ3VycigpKSA/IGFyZ1NoaWZ0KCkgOiBmYWxzZTtcblx0XHRcblx0XHQgICAgICAgIGlmICh0eXBlb2YgYXJnQ3VycigpICE9PSAnbnVtYmVyJykge1xuXHRcdCAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYXJnQ3VycigpICsgXCIgaXMgbm90IGEgbnVtYmVyXCIpO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgbWF4TGVuZ3RoID0gYXJnU2hpZnQoKTtcblx0XHRcblx0XHQgICAgICAgIHN1ZmZpeCA9IHR5cGVvZiBhcmdDdXJyKCkgPT09ICdzdHJpbmcnID8gYXJnU2hpZnQoKSA6ICcnO1xuXHRcdFxuXHRcdCAgICAgICAgdmFyIGxlbmd0aCA9IHRoaXMuZ2V0TGVuZ3RoKGNoZWNrYnl0ZSk7XG5cdFx0ICAgICAgICBpZiAoIShsZW5ndGggPiBtYXhMZW5ndGgpKSByZXR1cm4gdGhpcztcblx0XHRcblx0XHQgICAgICAgIHZhciBzdWZmaXhMZW5ndGggPSBzdWZmaXguZ2V0TGVuZ3RoKGNoZWNrYnl0ZSk7XG5cdFx0ICAgICAgICBpZiAoc3VmZml4TGVuZ3RoID4gbWF4TGVuZ3RoKSB7XG5cdFx0ICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJNYXggbGVuZ3RoIG11c3QgYmUgbW9yZSB0aGFuIHN1ZmZpeCBsZW5ndGhcIik7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICB2YXIgcmVzdWx0U3RyaW5nID0gJyc7XG5cdFx0ICAgICAgICB2YXIgY2hlY2tlZExlbmd0aCA9IDA7XG5cdFx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcblx0XHQgICAgICAgICAgICB2YXIgYyA9IHRoaXMuY2hhckF0KGkpO1xuXHRcdCAgICAgICAgICAgIHZhciBsID0gYy5nZXRMZW5ndGgoY2hlY2tieXRlKTtcblx0XHQgICAgICAgICAgICBpZiAoY2hlY2tlZExlbmd0aCArIGwgPiBtYXhMZW5ndGggLSBzdWZmaXhMZW5ndGgpIGJyZWFrO1xuXHRcdCAgICAgICAgICAgIGNoZWNrZWRMZW5ndGggKz0gbDtcblx0XHQgICAgICAgICAgICByZXN1bHRTdHJpbmcgKz0gYztcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIHJldHVybiByZXN1bHRTdHJpbmcgKyBzdWZmaXg7XG5cdFx0ICAgIH07XG5cdFx0fVxuXHRcdFxuXHRcdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IFN0cmluZy5wcm90b3R5cGUuY3V0c3RyaW5nO1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXHRcblx0LyoqKi8gfSxcblx0LyogMzcgKi9cblx0LyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cdFxuXHRcdCd1c2Ugc3RyaWN0Jztcblx0XHRcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG5cdFx0ICAgIHZhbHVlOiB0cnVlXG5cdFx0fSk7XG5cdFx0XG5cdFx0X193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblx0XHRcblx0XHRpZiAoIVN0cmluZy5wcm90b3R5cGUuZ2V0TGVuZ3RoKSB7XG5cdFx0ICAgIC8qKlxuXHRcdCAgICAgKiBAcGFyYW0ge2Jvb2xlYW58bnVtYmVyfSBbY2hlY2tieXRlXSBjaGVjayBieXRlIGxlbmd0aCBpZiB0cnVlLiAoZGVmYXVsdCBpcyBmYWxzZSlcblx0XHQgICAgICogQHJldHVybiB7bnVtYmVyfVxuXHRcdCAgICAgKi9cblx0XHQgICAgU3RyaW5nLnByb3RvdHlwZS5nZXRMZW5ndGggPSBmdW5jdGlvbiAoY2hlY2tieXRlKSB7XG5cdFx0ICAgICAgICB2YXIgX2FyZ3VtZW50cyA9IGFyZ3VtZW50cztcblx0XHRcblx0XHQgICAgICAgIHZhciBhcmdJbmRleCA9IDA7XG5cdFx0ICAgICAgICB2YXIgYXJnQ3VyciA9IGZ1bmN0aW9uIGFyZ0N1cnIoKSB7XG5cdFx0ICAgICAgICAgICAgcmV0dXJuIF9hcmd1bWVudHNbYXJnSW5kZXhdO1xuXHRcdCAgICAgICAgfTtcblx0XHQgICAgICAgIHZhciBhcmdTaGlmdCA9IGZ1bmN0aW9uIGFyZ1NoaWZ0KCkge1xuXHRcdCAgICAgICAgICAgIHJldHVybiBfYXJndW1lbnRzW2FyZ0luZGV4KytdO1xuXHRcdCAgICAgICAgfTtcblx0XHRcblx0XHQgICAgICAgIGNoZWNrYnl0ZSA9IFsnYm9vbGVhbicsICdudW1iZXInXS5jb250YWlucyh0eXBlb2YgYXJnQ3VycigpKSA/IGFyZ1NoaWZ0KCkgOiBmYWxzZTtcblx0XHQgICAgICAgIGlmIChjaGVja2J5dGUgPT09IGZhbHNlKSByZXR1cm4gdGhpcy5sZW5ndGg7XG5cdFx0XG5cdFx0ICAgICAgICB2YXIgbGVuZ3RoID0gMDtcblx0XHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuXHRcdCAgICAgICAgICAgIHZhciBjID0gdGhpcy5jaGFyQ29kZUF0KGkpO1xuXHRcdCAgICAgICAgICAgIHN3aXRjaCAoZmFsc2UpIHtcblx0XHQgICAgICAgICAgICAgICAgY2FzZSAhKGMgPD0gMHgwMDAwN0YpOlxuXHRcdCAgICAgICAgICAgICAgICAgICAgbGVuZ3RoICs9IDE7XG5cdFx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0XHQgICAgICAgICAgICAgICAgY2FzZSAhKHR5cGVvZiBjaGVja2J5dGUgPT09ICdudW1iZXInICYmIGNoZWNrYnl0ZSA+IDApOlxuXHRcdCAgICAgICAgICAgICAgICAgICAgbGVuZ3RoICs9IGNoZWNrYnl0ZTtcblx0XHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICAgICAgICBjYXNlICEoYyA8PSAweDAwMDdGRik6XG5cdFx0ICAgICAgICAgICAgICAgICAgICBsZW5ndGggKz0gMjtcblx0XHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICAgICAgICBjYXNlICEoYyA8PSAweDAwRkZGRik6XG5cdFx0ICAgICAgICAgICAgICAgICAgICBsZW5ndGggKz0gMztcblx0XHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXHRcdCAgICAgICAgICAgICAgICBkZWZhdWx0OlxuXHRcdCAgICAgICAgICAgICAgICAgICAgbGVuZ3RoICs9IDQ7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgcmV0dXJuIGxlbmd0aDtcblx0XHQgICAgfTtcblx0XHR9XG5cdFx0XG5cdFx0ZXhwb3J0c1snZGVmYXVsdCddID0gU3RyaW5nLnByb3RvdHlwZS5nZXRMZW5ndGg7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cdFxuXHQvKioqLyB9LFxuXHQvKiAzOCAqL1xuXHQvKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblx0XG5cdFx0J3VzZSBzdHJpY3QnO1xuXHRcdFxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcblx0XHQgICAgdmFsdWU6IHRydWVcblx0XHR9KTtcblx0XHRpZiAoIVN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGgpIHtcblx0XHQgICAgLyoqXG5cdFx0ICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcblx0XHQgICAgICogQHJldHVybnMge2Jvb2xlYW59XG5cdFx0ICAgICAqL1xuXHRcdCAgICBTdHJpbmcucHJvdG90eXBlLmVuZHNXaXRoID0gZnVuY3Rpb24gKHN0cikge1xuXHRcdCAgICAgICAgdmFyIGkgPSB0aGlzLmxhc3RJbmRleE9mKHN0cik7XG5cdFx0ICAgICAgICByZXR1cm4gaSA+IC0xICYmIGkgPT09IHRoaXMubGVuZ3RoIC0gc3RyLnRvU3RyaW5nKCkubGVuZ3RoO1xuXHRcdCAgICB9O1xuXHRcdH1cblx0XHRcblx0XHRleHBvcnRzWydkZWZhdWx0J10gPSBTdHJpbmcucHJvdG90eXBlLmVuZHNXaXRoO1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXHRcblx0LyoqKi8gfSxcblx0LyogMzkgKi9cblx0LyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cdFxuXHRcdCd1c2Ugc3RyaWN0Jztcblx0XHRcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG5cdFx0ICAgIHZhbHVlOiB0cnVlXG5cdFx0fSk7XG5cdFx0XG5cdFx0X193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblx0XHRcblx0XHRpZiAoIVN0cmluZy5wcm90b3R5cGUuZm9ybWF0KSB7XG5cdFx0ICAgIFN0cmluZy5wcm90b3R5cGUuZm9ybWF0ID0gZnVuY3Rpb24gKCkge1xuXHRcdCAgICAgICAgdmFyIF9hcmd1bWVudHMgPSBhcmd1bWVudHM7XG5cdFx0XG5cdFx0ICAgICAgICByZXR1cm4gdGhpcy5yZXBsYWNlKC8oJyd8J1xce3x9J3xcXHsoXFx3Kyl9KS9nLCBmdW5jdGlvbiAoJDAsICQxLCAkMikge1xuXHRcdCAgICAgICAgICAgIHN3aXRjaCAoJDEpIHtcblx0XHQgICAgICAgICAgICAgICAgY2FzZSBcIicnXCI6XG5cdFx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCInXCI7XG5cdFx0ICAgICAgICAgICAgICAgIGNhc2UgXCIne1wiOlxuXHRcdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd7Jztcblx0XHQgICAgICAgICAgICAgICAgY2FzZSBcIn0nXCI6XG5cdFx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ30nO1xuXHRcdCAgICAgICAgICAgICAgICBkZWZhdWx0OlxuXHRcdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuICghL15cXGQrJC9nLnRlc3QoJDIpID8gX2FyZ3VtZW50c1swXSB8fCB7fSA6IEFycmF5LmlzQXJyYXkoX2FyZ3VtZW50c1swXSkgPyBfYXJndW1lbnRzWzBdIDogX2FyZ3VtZW50cylbJDJdO1xuXHRcdCAgICAgICAgICAgIH1cblx0XHQgICAgICAgIH0pO1xuXHRcdCAgICB9O1xuXHRcdH1cblx0XHRcblx0XHRleHBvcnRzWydkZWZhdWx0J10gPSBTdHJpbmcucHJvdG90eXBlLmZvcm1hdDtcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblx0XG5cdC8qKiovIH0sXG5cdC8qIDQwICovXG5cdC8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXHRcblx0XHQndXNlIHN0cmljdCc7XG5cdFx0XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdFx0ICAgIHZhbHVlOiB0cnVlXG5cdFx0fSk7XG5cdFx0aWYgKCFTdHJpbmcucHJvdG90eXBlLmZvcm1hdFZhcmlhYmxlcykge1xuXHRcdCAgICAvKipcblx0XHQgICAgICogQHBhcmFtIHsqfSBhcmd1bWVudHNcblx0XHQgICAgICogQHJldHVybnMge0FycmF5PHN0cmluZz59XG5cdFx0ICAgICAqL1xuXHRcdCAgICBTdHJpbmcucHJvdG90eXBlLmZvcm1hdFZhcmlhYmxlcyA9IGZ1bmN0aW9uICgpIHtcblx0XHQgICAgICAgIHZhciByZWdleCA9IC8oJyd8J1xce3xcXH0nfFxceyhcXHcrKVxcfSkvZztcblx0XHQgICAgICAgIHZhciB2YXJpYWJsZXMgPSBbXTtcblx0XHQgICAgICAgIHZhciBtYXRjaGVzID0gdW5kZWZpbmVkO1xuXHRcdCAgICAgICAgd2hpbGUgKG1hdGNoZXMgPSByZWdleC5leGVjKHRoaXMpKSB7XG5cdFx0ICAgICAgICAgICAgdmFyIG1hdGNoID0gbWF0Y2hlc1swXTtcblx0XHQgICAgICAgICAgICBpZiAobWF0Y2ggIT09IFwiJydcIiAmJiBtYXRjaCAhPT0gXCIne1wiICYmIG1hdGNoICE9PSBcIn0nXCIpIHtcblx0XHQgICAgICAgICAgICAgICAgdmFyaWFibGVzLnB1c2gobWF0Y2hlc1syXSk7XG5cdFx0ICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgcmV0dXJuIHZhcmlhYmxlcztcblx0XHQgICAgfTtcblx0XHR9XG5cdFx0XG5cdFx0ZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBTdHJpbmcucHJvdG90eXBlLmZvcm1hdFZhcmlhYmxlcztcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdO1xuXHRcblx0LyoqKi8gfSxcblx0LyogNDEgKi9cblx0LyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cdFxuXHRcdCd1c2Ugc3RyaWN0Jztcblx0XHRcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG5cdFx0ICAgIHZhbHVlOiB0cnVlXG5cdFx0fSk7XG5cdFx0aWYgKCFTdHJpbmcucHJvdG90eXBlLmdyb3VwZWQpIHtcblx0XHQgICAgLyoqXG5cdFx0ICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzaXplXG5cdFx0ICAgICAqIEByZXR1cm4ge0FycmF5PHN0cmluZz59XG5cdFx0ICAgICAqL1xuXHRcdCAgICBTdHJpbmcucHJvdG90eXBlLmdyb3VwZWQgPSBmdW5jdGlvbiAoc2l6ZSkge1xuXHRcdCAgICAgICAgaWYgKCEoc2l6ZSA+IDEpKSB7XG5cdFx0ICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgc2l6ZSB2YWx1ZScpO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykgc2l6ZSA9IHBhcnNlSW50KHNpemUpO1xuXHRcdCAgICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcblx0XHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gc2l6ZSkge1xuXHRcdCAgICAgICAgICAgIHJlc3VsdHMucHVzaCh0aGlzLnNsaWNlKGksIGkgKyBzaXplKSk7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICByZXR1cm4gcmVzdWx0cztcblx0XHQgICAgfTtcblx0XHR9XG5cdFx0XG5cdFx0ZXhwb3J0c1snZGVmYXVsdCddID0gU3RyaW5nLnByb3RvdHlwZS5ncm91cGVkO1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXHRcblx0LyoqKi8gfSxcblx0LyogNDIgKi9cblx0LyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cdFxuXHRcdCd1c2Ugc3RyaWN0Jztcblx0XHRcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG5cdFx0ICAgIHZhbHVlOiB0cnVlXG5cdFx0fSk7XG5cdFx0aWYgKCFTdHJpbmcucHJvdG90eXBlLmdyb3VwZWRSaWdodCkge1xuXHRcdCAgICAvKipcblx0XHQgICAgICogQHBhcmFtIHtudW1iZXJ9IHNpemVcblx0XHQgICAgICogQHJldHVybiB7QXJyYXk8c3RyaW5nPn1cblx0XHQgICAgICovXG5cdFx0ICAgIFN0cmluZy5wcm90b3R5cGUuZ3JvdXBlZFJpZ2h0ID0gZnVuY3Rpb24gKHNpemUpIHtcblx0XHQgICAgICAgIGlmICghKHNpemUgPiAxKSkge1xuXHRcdCAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHNpemUgdmFsdWUnKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHNpemUgPSBwYXJzZUludChzaXplKTtcblx0XHQgICAgICAgIHZhciByZXN1bHRzID0gW107XG5cdFx0ICAgICAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGg7IGkgPiAwOyBpIC09IHNpemUpIHtcblx0XHQgICAgICAgICAgICByZXN1bHRzLnB1c2godGhpcy5zbGljZShNYXRoLm1heCgwLCBpIC0gc2l6ZSksIGkpKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIHJldHVybiByZXN1bHRzLnJldmVyc2UoKTtcblx0XHQgICAgfTtcblx0XHR9XG5cdFx0XG5cdFx0ZXhwb3J0c1snZGVmYXVsdCddID0gU3RyaW5nLnByb3RvdHlwZS5ncm91cGVkUmlnaHQ7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cdFxuXHQvKioqLyB9LFxuXHQvKiA0MyAqL1xuXHQvKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblx0XG5cdFx0J3VzZSBzdHJpY3QnO1xuXHRcdFxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcblx0XHQgICAgdmFsdWU6IHRydWVcblx0XHR9KTtcblx0XHRcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKDQ0KTtcblx0XHRcblx0XHRpZiAoIVN0cmluZy5wcm90b3R5cGUubGVmdFBhZCkge1xuXHRcdCAgICAvKipcblx0XHQgICAgICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuXHRcdCAgICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsbENoYXJcblx0XHQgICAgICogQHJldHVybnMge3N0cmluZ31cblx0XHQgICAgICovXG5cdFx0ICAgIFN0cmluZy5wcm90b3R5cGUubGVmdFBhZCA9IGZ1bmN0aW9uIChsZW5ndGgsIGZpbGxDaGFyKSB7XG5cdFx0ICAgICAgICBpZiAodHlwZW9mIGxlbmd0aCAhPT0gJ251bWJlcicpIHtcblx0XHQgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGxlbmd0aCArICcgaXMgbm90IGEgbnVtYmVyJyk7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICBpZiAoIWZpbGxDaGFyKSBmaWxsQ2hhciA9ICcgJztcblx0XHQgICAgICAgIGlmICh0aGlzLmxlbmd0aCA+PSBsZW5ndGgpIHJldHVybiB0aGlzLnRvU3RyaW5nKCk7XG5cdFx0ICAgICAgICByZXR1cm4gZmlsbENoYXIucmVwZWF0KGxlbmd0aCAtIHRoaXMubGVuZ3RoKSArIHRoaXMudG9TdHJpbmcoKTtcblx0XHQgICAgfTtcblx0XHR9XG5cdFx0aWYgKCFTdHJpbmcucHJvdG90eXBlLmxwYWQpIHtcblx0XHQgICAgU3RyaW5nLnByb3RvdHlwZS5scGFkID0gU3RyaW5nLnByb3RvdHlwZS5sZWZ0UGFkO1xuXHRcdH1cblx0XHRcblx0XHRleHBvcnRzWydkZWZhdWx0J10gPSBTdHJpbmcucHJvdG90eXBlLmxlZnRQYWQ7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cdFxuXHQvKioqLyB9LFxuXHQvKiA0NCAqL1xuXHQvKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblx0XG5cdFx0J3VzZSBzdHJpY3QnO1xuXHRcdFxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcblx0XHQgICAgdmFsdWU6IHRydWVcblx0XHR9KTtcblx0XHRpZiAoIVN0cmluZy5wcm90b3R5cGUucmVwZWF0KSB7XG5cdFx0ICAgIC8qKlxuXHRcdCAgICAgKiBAcGFyYW0ge251bWJlcn0gY291bnRcblx0XHQgICAgICogQHJldHVybiB7c3RyaW5nfVxuXHRcdCAgICAgKi9cblx0XHQgICAgU3RyaW5nLnByb3RvdHlwZS5yZXBlYXQgPSBmdW5jdGlvbiAoY291bnQpIHtcblx0XHQgICAgICAgIGlmICghKGNvdW50ID49IDApKSB7XG5cdFx0ICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgY291bnQgdmFsdWUnKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIHZhciByZXN1bHQgPSAnJztcblx0XHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuXHRcdCAgICAgICAgICAgIHJlc3VsdCArPSB0aGlzLnRvU3RyaW5nKCk7XG5cdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICByZXR1cm4gcmVzdWx0O1xuXHRcdCAgICB9O1xuXHRcdH1cblx0XHRcblx0XHRleHBvcnRzWydkZWZhdWx0J10gPSBTdHJpbmcucHJvdG90eXBlLnJlcGVhdDtcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblx0XG5cdC8qKiovIH0sXG5cdC8qIDQ1ICovXG5cdC8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXHRcblx0XHQndXNlIHN0cmljdCc7XG5cdFx0XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuXHRcdCAgICB2YWx1ZTogdHJ1ZVxuXHRcdH0pO1xuXHRcdFxuXHRcdF9fd2VicGFja19yZXF1aXJlX18oNDYpO1xuXHRcdFxuXHRcdGlmICghU3RyaW5nLnByb3RvdHlwZS5ubDJicikge1xuXHRcdCAgICAvKipcblx0XHQgICAgICogQHBhcmFtIHtib29sZWFufSB4bWxFc2NhcGVcblx0XHQgICAgICogQHJldHVybnMge3N0cmluZ31cblx0XHQgICAgICovXG5cdFx0ICAgIFN0cmluZy5wcm90b3R5cGUubmwyYnIgPSBmdW5jdGlvbiAoeG1sRXNjYXBlKSB7XG5cdFx0ICAgICAgICByZXR1cm4gKHhtbEVzY2FwZSA/IHRoaXMueG1sRXNjYXBlKCkgOiB0aGlzKS5yZXBsYWNlKC8oXFxyXFxufFxcblxccnxcXHJ8XFxuKS9nLCAnPGJyLz4nKTtcblx0XHQgICAgfTtcblx0XHR9XG5cdFx0XG5cdFx0ZXhwb3J0c1snZGVmYXVsdCddID0gU3RyaW5nLnByb3RvdHlwZS5ubDJicjtcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblx0XG5cdC8qKiovIH0sXG5cdC8qIDQ2ICovXG5cdC8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXHRcblx0XHQndXNlIHN0cmljdCc7XG5cdFx0XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuXHRcdCAgICB2YWx1ZTogdHJ1ZVxuXHRcdH0pO1xuXHRcdGlmICghU3RyaW5nLnByb3RvdHlwZS54bWxFc2NhcGUpIHtcblx0XHQgICAgU3RyaW5nLnByb3RvdHlwZS54bWxFc2NhcGUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0ICAgICAgICByZXR1cm4gdGhpcy5yZXBsYWNlKC8oPHw+fFwifCd8JikvZywgZnVuY3Rpb24gKCQxKSB7XG5cdFx0ICAgICAgICAgICAgc3dpdGNoICgkMSkge1xuXHRcdCAgICAgICAgICAgICAgICBjYXNlICc8Jzpcblx0XHQgICAgICAgICAgICAgICAgICAgIHJldHVybiAnJmx0Oyc7XG5cdFx0ICAgICAgICAgICAgICAgIGNhc2UgJz4nOlxuXHRcdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuICcmZ3Q7Jztcblx0XHQgICAgICAgICAgICAgICAgY2FzZSAnXCInOlxuXHRcdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuICcmIzM0Oyc7XG5cdFx0ICAgICAgICAgICAgICAgIGNhc2UgXCInXCI6XG5cdFx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gJyYjMzk7Jztcblx0XHQgICAgICAgICAgICAgICAgY2FzZSAnJic6XG5cdFx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gJyZhbXA7Jztcblx0XHQgICAgICAgICAgICAgICAgZGVmYXVsdDpcblx0XHQgICAgICAgICAgICAgICAgICAgIHJldHVybiAkMTtcblx0XHQgICAgICAgICAgICB9XG5cdFx0ICAgICAgICB9KTtcblx0XHQgICAgfTtcblx0XHR9XG5cdFx0XG5cdFx0ZXhwb3J0c1snZGVmYXVsdCddID0gU3RyaW5nLnByb3RvdHlwZS54bWxFc2NhcGU7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cdFxuXHQvKioqLyB9LFxuXHQvKiA0NyAqL1xuXHQvKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblx0XG5cdFx0J3VzZSBzdHJpY3QnO1xuXHRcdFxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcblx0XHQgICAgdmFsdWU6IHRydWVcblx0XHR9KTtcblx0XHRpZiAoIVN0cmluZy5wcm90b3R5cGUucXVvdGUpIHtcblx0XHQgICAgLyoqXG5cdFx0ICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gb3ZlcmxhcGFibGVcblx0XHQgICAgICogQHJldHVybiB7c3RyaW5nfVxuXHRcdCAgICAgKi9cblx0XHQgICAgU3RyaW5nLnByb3RvdHlwZS5xdW90ZSA9IGZ1bmN0aW9uIChvdmVybGFwYWJsZSkge1xuXHRcdCAgICAgICAgaWYgKHR5cGVvZiBvdmVybGFwYWJsZSAhPT0gJ2Jvb2xlYW4nKSBvdmVybGFwYWJsZSA9IHRydWU7XG5cdFx0ICAgICAgICBpZiAoIW92ZXJsYXBhYmxlICYmIHRoaXMubGVuZ3RoID49IDIpIHtcblx0XHQgICAgICAgICAgICBpZiAodGhpcy5jaGFyQXQoMCkgPT09ICdcIicgJiYgdGhpcy5jaGFyQXQodGhpcy5sZW5ndGggLSAxKSA9PT0gJ1wiJykgcmV0dXJuIHRoaXMudG9TdHJpbmcoKTtcblx0XHQgICAgICAgICAgICBpZiAodGhpcy5jaGFyQXQoMCkgPT09IFwiJ1wiICYmIHRoaXMuY2hhckF0KHRoaXMubGVuZ3RoIC0gMSkgPT09IFwiJ1wiKSByZXR1cm4gdGhpcy50b1N0cmluZygpO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgcmV0dXJuICdcIicgKyB0aGlzICsgJ1wiJztcblx0XHQgICAgfTtcblx0XHR9XG5cdFx0XG5cdFx0ZXhwb3J0c1snZGVmYXVsdCddID0gU3RyaW5nLnByb3RvdHlwZS5xdW90ZTtcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblx0XG5cdC8qKiovIH0sXG5cdC8qIDQ4ICovXG5cdC8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXHRcblx0XHQndXNlIHN0cmljdCc7XG5cdFx0XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuXHRcdCAgICB2YWx1ZTogdHJ1ZVxuXHRcdH0pO1xuXHRcdGlmICghU3RyaW5nLnByb3RvdHlwZS5yZWdleCkge1xuXHRcdCAgICAvKipcblx0XHQgICAgICogQHBhcmFtIHtzdHJpbmd9IGZsYWdzXG5cdFx0ICAgICAqIEByZXR1cm5zIHtSZWdFeHB9XG5cdFx0ICAgICAqL1xuXHRcdCAgICBTdHJpbmcucHJvdG90eXBlLnJlZ2V4ID0gZnVuY3Rpb24gKGZsYWdzKSB7XG5cdFx0ICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCh0aGlzLCBmbGFncyk7XG5cdFx0ICAgIH07XG5cdFx0fVxuXHRcdGlmICghU3RyaW5nLnByb3RvdHlwZS5yKSB7XG5cdFx0ICAgIFN0cmluZy5wcm90b3R5cGUuciA9IFN0cmluZy5wcm90b3R5cGUucmVnZXg7XG5cdFx0fVxuXHRcdFxuXHRcdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IFN0cmluZy5wcm90b3R5cGUucmVnZXg7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cdFxuXHQvKioqLyB9LFxuXHQvKiA0OSAqL1xuXHQvKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblx0XG5cdFx0J3VzZSBzdHJpY3QnO1xuXHRcdFxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcblx0XHQgICAgdmFsdWU6IHRydWVcblx0XHR9KTtcblx0XHRcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKDQ0KTtcblx0XHRcblx0XHRpZiAoIVN0cmluZy5wcm90b3R5cGUucmlnaHRQYWQpIHtcblx0XHQgICAgLyoqXG5cdFx0ICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGhcblx0XHQgICAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGxDaGFyXG5cdFx0ICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG5cdFx0ICAgICAqL1xuXHRcdCAgICBTdHJpbmcucHJvdG90eXBlLnJpZ2h0UGFkID0gZnVuY3Rpb24gKGxlbmd0aCwgZmlsbENoYXIpIHtcblx0XHQgICAgICAgIGlmICh0eXBlb2YgbGVuZ3RoICE9PSAnbnVtYmVyJykge1xuXHRcdCAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IobGVuZ3RoICsgJyBpcyBub3QgYSBudW1iZXInKTtcblx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIGlmICghZmlsbENoYXIpIGZpbGxDaGFyID0gJyAnO1xuXHRcdCAgICAgICAgaWYgKHRoaXMubGVuZ3RoID49IGxlbmd0aCkgcmV0dXJuIHRoaXMudG9TdHJpbmcoKTtcblx0XHQgICAgICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKCkgKyBmaWxsQ2hhci5yZXBlYXQobGVuZ3RoIC0gdGhpcy5sZW5ndGgpO1xuXHRcdCAgICB9O1xuXHRcdH1cblx0XHRpZiAoIVN0cmluZy5wcm90b3R5cGUucnBhZCkge1xuXHRcdCAgICBTdHJpbmcucHJvdG90eXBlLnJwYWQgPSBTdHJpbmcucHJvdG90eXBlLnJpZ2h0UGFkO1xuXHRcdH1cblx0XHRcblx0XHRleHBvcnRzWydkZWZhdWx0J10gPSBTdHJpbmcucHJvdG90eXBlLnJpZ2h0UGFkO1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXHRcblx0LyoqKi8gfSxcblx0LyogNTAgKi9cblx0LyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cdFxuXHRcdCd1c2Ugc3RyaWN0Jztcblx0XHRcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG5cdFx0ICB2YWx1ZTogdHJ1ZVxuXHRcdH0pO1xuXHRcdGlmICghU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoKSB7XG5cdFx0ICAvKipcblx0XHQgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcblx0XHQgICAqL1xuXHRcdCAgU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoID0gZnVuY3Rpb24gKHN0cikge1xuXHRcdCAgICByZXR1cm4gdGhpcy5pbmRleE9mKHN0cikgPT09IDA7XG5cdFx0ICB9O1xuXHRcdH1cblx0XHRcblx0XHRleHBvcnRzWydkZWZhdWx0J10gPSBTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGg7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cdFxuXHQvKioqLyB9LFxuXHQvKiA1MSAqL1xuXHQvKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblx0XG5cdFx0J3VzZSBzdHJpY3QnO1xuXHRcdFxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcblx0XHQgICAgdmFsdWU6IHRydWVcblx0XHR9KTtcblx0XHRpZiAoIVN0cmluZy5wcm90b3R5cGUudW5xdW90ZSkge1xuXHRcdCAgICBTdHJpbmcucHJvdG90eXBlLnVucXVvdGUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0ICAgICAgICBpZiAodGhpcy5sZW5ndGggPj0gMiAmJiAodGhpcy5jaGFyQXQoMCkgPT09ICdcIicgJiYgdGhpcy5jaGFyQXQodGhpcy5sZW5ndGggLSAxKSA9PT0gJ1wiJyB8fCB0aGlzLmNoYXJBdCgwKSA9PT0gXCInXCIgJiYgdGhpcy5jaGFyQXQodGhpcy5sZW5ndGggLSAxKSA9PT0gXCInXCIpKSB7XG5cdFx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2xpY2UoMSwgLTEpO1xuXHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgcmV0dXJuIHRoaXMudG9TdHJpbmcoKTtcblx0XHQgICAgfTtcblx0XHR9XG5cdFx0XG5cdFx0ZXhwb3J0c1snZGVmYXVsdCddID0gU3RyaW5nLnByb3RvdHlwZS51bnF1b3RlO1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXHRcblx0LyoqKi8gfVxuXHQvKioqKioqLyBdKTtcblxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyg1KSkpXG5cbi8qKiovIH0sXG4vKiA1ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24oZ2xvYmFsKSB7J3VzZSBzdHJpY3QnO1xuXHRcblx0aWYgKCFnbG9iYWwuZG9jdW1lbnQpIHtcblx0ICAgIHRocm93IG5ldyBFcnJvcihcImpRdWVyeS5leHRlbmRzIHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiKTtcblx0fVxuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBnbG9iYWw7XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCAoZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KCkpKSlcblxuLyoqKi8gfSxcbi8qIDYgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbigkKSB7J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cdFxuXHQvKipcblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcblx0ICogQHBhcmFtIHsqfSBbY29udGV4dF1cblx0ICogQHJldHVybiB7T2JqZWN0fVxuXHQgKi9cblx0JC5mbi5ncm91cEJ5ID0gZnVuY3Rpb24gKGNhbGxiYWNrLCBjb250ZXh0KSB7XG5cdCAgICBpZiAoISQuaXNGdW5jdGlvbihjYWxsYmFjaykpIHtcblx0ICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGNhbGxiYWNrICsgXCIgaXMgbm90IGEgZnVuY3Rpb25cIik7XG5cdCAgICB9XG5cdCAgICB2YXIgcmVzdWx0ID0ge307XG5cdCAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICB2YXIgZWxlbSA9IHRoaXNbaV07XG5cdCAgICAgICAgdmFyIGtleSA9IGNhbGxiYWNrLmNhbGwoY29udGV4dCB8fCBlbGVtLCBlbGVtLCBpLCB0aGlzKTtcblx0ICAgICAgICBpZiAoa2V5ICE9IG51bGwpIHtcblx0ICAgICAgICAgICAgaWYgKGtleSBpbiByZXN1bHQpIHJlc3VsdFtrZXldLnB1c2goZWxlbSk7ZWxzZSByZXN1bHRba2V5XSA9ICQoZWxlbSk7XG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHQgICAgcmV0dXJuIHJlc3VsdDtcblx0fTtcblx0XG5cdGV4cG9ydHMuZGVmYXVsdCA9ICQuZm4uZ3JvdXBCeTtcblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oMSkpKVxuXG4vKioqLyB9LFxuLyogNyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKCQsIGRvY3VtZW50KSB7J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cdFxuXHQvKipcblx0ICogQHBhcmFtIHtzdHJpbmd8QXJyYXk8SFRNTEVsZW1lbnQ+fGpRdWVyeTxIVE1MRWxlbWVudD59IGV4Y2x1ZGVzXG5cdCAqIEByZXR1cm4ge251bWJlcn1cblx0ICovXG5cdCQuZm4ubWF4WkluZGV4ID0gZnVuY3Rpb24gKGV4Y2x1ZGVzKSB7XG5cdCAgICB2YXIgekluZGV4ID0gMDtcblx0ICAgIHRoaXMuZmluZCgnOnZpc2libGUnKS5hbmRTZWxmKCkuYWRkKHRoaXMucGFyZW50c1VudGlsKCdodG1sJykpLm5vdChleGNsdWRlcykuZWFjaChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgaWYgKHRoaXMubm9kZU5hbWUgIT09ICcjZG9jdW1lbnQnKSB7XG5cdCAgICAgICAgICAgIHZhciAkdGhpcyA9ICQodGhpcyk7XG5cdCAgICAgICAgICAgIGlmIChbJ2Fic29sdXRlJywgJ3JlbGF0aXZlJywgJ2ZpeGVkJ10uY29udGFpbnMoJHRoaXMuY3NzKCdwb3NpdGlvbicpKSkge1xuXHQgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gcGFyc2VJbnQoJHRoaXMuY3NzKCd6SW5kZXgnKSk7XG5cdCAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKHZhbHVlKSAmJiB2YWx1ZSA+IHpJbmRleCkgekluZGV4ID0gdmFsdWU7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIHJldHVybiB6SW5kZXg7XG5cdH07XG5cdFxuXHQvKipcblx0ICogQGRlc2NyaXB0aW9uIE1heCB6SW5kZXggZnJvbSBkb2N1bWVudCBib2R5LlxuXHQgKiBAcGFyYW0ge3N0cmluZ3xBcnJheTxIVE1MRWxlbWVudD58alF1ZXJ5PEhUTUxFbGVtZW50Pn0gZXhjbHVkZXNcblx0ICogQHJldHVybiB7bnVtYmVyfVxuXHQgKi9cblx0JC5tYXhaSW5kZXggPSBmdW5jdGlvbiAoZXhjbHVkZXMpIHtcblx0ICAgIHJldHVybiAkKGRvY3VtZW50LmJvZHkpLm1heFpJbmRleChleGNsdWRlcyk7XG5cdH07XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSAkLmZuLm1heFpJbmRleDtcblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oMSksIF9fd2VicGFja19yZXF1aXJlX18oOCkpKVxuXG4vKioqLyB9LFxuLyogOCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIF93aW5kb3cgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXHRcblx0dmFyIF93aW5kb3cyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2luZG93KTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IF93aW5kb3cyLmRlZmF1bHQuZG9jdW1lbnQ7XG5cbi8qKiovIH0sXG4vKiA5ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24oJCkgeyd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0X193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblx0XG5cdC8qKlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuXHQgKiBAcmV0dXJuIHtudW1iZXJ9XG5cdCAqL1xuXHQkLm5leHRUaWNrID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG5cdCAgcmV0dXJuIHNldFRpbWVvdXQoY2FsbGJhY2ssIDApO1xuXHR9O1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gJC5uZXh0VGljaztcblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oMSkpKVxuXG4vKioqLyB9LFxuLyogMTAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbigkKSB7J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfdHlwZW9mMiA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xuXHRcblx0dmFyIF90eXBlb2YzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHlwZW9mMik7XG5cdFxuXHR2YXIgX2dldEl0ZXJhdG9yMiA9IF9fd2VicGFja19yZXF1aXJlX18oNDMpO1xuXHRcblx0dmFyIF9nZXRJdGVyYXRvcjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRJdGVyYXRvcjIpO1xuXHRcblx0X193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oNTgpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdCQub2JqID0ge1xuXHRcblx0ICAgIC8qKlxuXHQgICAgICogQHBhcmFtIHtPYmplY3R9IG9ialxuXHQgICAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxuXHQgICAgICogQHBhcmFtIHsqfSBbZGVmYXVsdFZhbHVlXVxuXHQgICAgICogQHJldHVybiB7Kn1cblx0ICAgICAqL1xuXHQgICAgZ2V0OiBmdW5jdGlvbiBnZXQob2JqLCBrZXksIGRlZmF1bHRWYWx1ZSkge1xuXHQgICAgICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcblx0ICAgICAgICBpZiAoIWtleSkgcmV0dXJuIG9iajtcblx0ICAgICAgICB2YXIga2V5RnJhZ21lbnRzID0gJC5zcGxpdChrZXksICcuJywgJy8nKTtcblx0ICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7XG5cdCAgICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2U7XG5cdCAgICAgICAgdmFyIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuXHRcblx0ICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSAoMCwgX2dldEl0ZXJhdG9yMy5kZWZhdWx0KShrZXlGcmFnbWVudHMpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIga2V5RnJhZ21lbnQgPSBfc3RlcC52YWx1ZTtcblx0XG5cdCAgICAgICAgICAgICAgICBpZiAoKG9iaiA9IG9ialtrZXlGcmFnbWVudF0pID09IG51bGwpIHJldHVybiBkZWZhdWx0VmFsdWU7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9IGNhdGNoIChlcnIpIHtcblx0ICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuXHQgICAgICAgICAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcblx0ICAgICAgICB9IGZpbmFsbHkge1xuXHQgICAgICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvci5yZXR1cm4pIHtcblx0ICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IucmV0dXJuKCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0gZmluYWxseSB7XG5cdCAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcblx0ICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgaWYgKCQuaXNBcnJheShkZWZhdWx0VmFsdWUpICYmICEkLmlzQXJyYXkob2JqKSkgb2JqID0gJC5tYWtlQXJyYXkob2JqKTtcblx0XG5cdCAgICAgICAgcmV0dXJuIG9iajtcblx0ICAgIH0sXG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFthcHBlbmRBcnJheV1cblx0ICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcblx0ICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmdWxsa2V5XG5cdCAgICAgKiBAcGFyYW0geyp9IHZhbHVlXG5cdCAgICAgKiBAcmV0dXJuIHtPYmplY3R9XG5cdCAgICAgKi9cblx0ICAgIHNldDogZnVuY3Rpb24gc2V0KGFwcGVuZEFycmF5LCBvYmosIGZ1bGxrZXksIHZhbHVlKSB7XG5cdCAgICAgICAgdmFyIGFyZ3MgPSAkLm1ha2VBcnJheShhcmd1bWVudHMpO1xuXHQgICAgICAgIGFwcGVuZEFycmF5ID0gdHlwZW9mIGFyZ3MuZmlyc3QoKSA9PT0gJ2Jvb2xlYW4nID8gYXJncy5zaGlmdCgpIDogZmFsc2U7XG5cdCAgICAgICAgb2JqID0gKDAsIF90eXBlb2YzLmRlZmF1bHQpKGFyZ3MuZmlyc3QoKSkgPT09ICdvYmplY3QnIHx8ICQuaXNGdW5jdGlvbihhcmdzLmZpcnN0KCkpID8gYXJncy5zaGlmdCgpIDoge307XG5cdCAgICAgICAgaWYgKHR5cGVvZiBhcmdzLmZpcnN0KCkgIT09ICdzdHJpbmcnKSB7XG5cdCAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJPYmplY3Qga2V5IG11c3QgYmUgc3RyaW5nIHR5cGUgOiBcIiArIGFyZ3MuZmlyc3QoKSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGZ1bGxrZXkgPSBhcmdzLnNoaWZ0KCk7XG5cdCAgICAgICAgdmFsdWUgPSBhcmdzLnNoaWZ0KCk7XG5cdCAgICAgICAgdmFyIGtleXMgPSAkLm1hcCgkLnNwbGl0KGZ1bGxrZXksICcuJywgJy8nKSwgZnVuY3Rpb24gKGtleSkge1xuXHQgICAgICAgICAgICBpZiAoL14oW15cXFtdKyk/XFxbKFteXFxdXSspP1xcXS8udGVzdChrZXkpKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgaW5LZXlzID0gW2tleS5tYXRjaCgvXihbXlxcW10rKT8vKVsxXV07XG5cdCAgICAgICAgICAgICAgICB2YXIgaW5CcmFja2V0ID0gL1xcWyhbXlxcXV0rKT9cXF0vZztcblx0ICAgICAgICAgICAgICAgIHZhciBuZXh0TWF0Y2hlcyA9IHZvaWQgMDtcblx0ICAgICAgICAgICAgICAgIHdoaWxlIChuZXh0TWF0Y2hlcyA9IGluQnJhY2tldC5leGVjKGtleSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICBpbktleXMucHVzaChuZXh0TWF0Y2hlc1sxXSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gaW5LZXlzO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHJldHVybiBrZXk7XG5cdCAgICAgICAgfSk7XG5cdFxuXHQgICAgICAgIGZ1bmN0aW9uIGlzTnVsbChvLCBrZXkpIHtcblx0ICAgICAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiAhKGtleSBpbiBvICYmIG9ba2V5XSAhPSBudWxsKTtcblx0ICAgICAgICAgICAgfSBjYXRjaCAoaWdub3JlZCkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICB2YXIgY3Vyck9iaiA9IG9iajtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XG5cdCAgICAgICAgICAgIGlmIChpID09PSBrZXlzLmxlbmd0aCAtIDEpIHtcblx0ICAgICAgICAgICAgICAgIGlmICghYXBwZW5kQXJyYXkgfHwgaXNOdWxsKGN1cnJPYmosIGtleSkpIGN1cnJPYmpba2V5XSA9IHZhbHVlO2Vsc2UgaWYgKCQuaXNBcnJheShjdXJyT2JqW2tleV0pKSBjdXJyT2JqW2tleV0ucHVzaCh2YWx1ZSk7ZWxzZSBjdXJyT2JqW2tleV0gPSBbY3Vyck9ialtrZXldLCB2YWx1ZV07XG5cdCAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNOdWxsKGN1cnJPYmosIGtleSkpIHtcblx0ICAgICAgICAgICAgICAgIGlmICgha2V5c1tpICsgMV0pIGtleXNbaSArIDFdID0gJzAnO1xuXHQgICAgICAgICAgICAgICAgY3Vyck9ialtrZXldID0gL15cXGQrJC8udGVzdChrZXlzW2kgKyAxXSkgPyBbXSA6IHt9O1xuXHQgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBrZXlzW2kgKyAxXSA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgICAgICAgICAgICAgIGtleXNbaSArIDFdID0gJC5pc0FycmF5KGN1cnJPYmpba2V5XSkgPyBjdXJyT2JqW2tleV0ubGVuZ3RoICsgJycgOiAnJztcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBjdXJyT2JqID0gY3Vyck9ialtrZXldO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gb2JqO1xuXHQgICAgfSxcblx0XG5cdCAgICAvKipcblx0ICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcblx0ICAgICAqIEByZXR1cm4ge09iamVjdH1cblx0ICAgICAqL1xuXHQgICAgZ2VuZXJhbGl6ZTogZnVuY3Rpb24gZ2VuZXJhbGl6ZShvYmopIHtcblx0ICAgICAgICBpZiAoISQuaXNQbGFpbk9iamVjdChvYmopKSByZXR1cm4gb2JqO1xuXHQgICAgICAgIHZhciByZXN1bHQgPSB7fTtcblx0ICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG5cdCAgICAgICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xuXHQgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gb2JqW2tleV07XG5cdCAgICAgICAgICAgICAgICBpZiAoa2V5LmNvbnRhaW5zKCcuJykgfHwgL1xcWyhcXHcrKT9cXF0vLnRlc3Qoa2V5KSkgJC5vYmouc2V0KHRydWUsIHJlc3VsdCwga2V5LCB2YWx1ZSk7ZWxzZSByZXN1bHRba2V5XSA9IHZhbHVlO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiByZXN1bHQ7XG5cdCAgICB9LFxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogQHBhcmFtIHtib29sZWFufSBbZGVlcF1cblx0ICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2FwcGVuZEFycmF5XVxuXHQgICAgICogQHBhcmFtIHsqfE9iamVjdH0gdGFyZ2V0XG5cdCAgICAgKiBAcGFyYW0geyp8Li4uT2JqZWN0fSBzb3VyY2VzXG5cdCAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtleHRlbmRJZlVuZGVmaW5lZF1cblx0ICAgICAqIEByZXR1cm4ge09iamVjdH1cblx0ICAgICAqL1xuXHQgICAgZXh0ZW5kOiBmdW5jdGlvbiBleHRlbmQoZGVlcCwgYXBwZW5kQXJyYXksIHRhcmdldCwgc291cmNlcywgZXh0ZW5kSWZVbmRlZmluZWQpIHtcblx0ICAgICAgICB2YXIgYXJncyA9ICQubWFrZUFycmF5KGFyZ3VtZW50cyk7XG5cdCAgICAgICAgZGVlcCA9IHR5cGVvZiBhcmdzLmZpcnN0KCkgPT09ICdib29sZWFuJyA/IGFyZ3Muc2hpZnQoKSA6IGZhbHNlO1xuXHQgICAgICAgIGFwcGVuZEFycmF5ID0gdHlwZW9mIGFyZ3MuZmlyc3QoKSA9PT0gJ2Jvb2xlYW4nID8gYXJncy5zaGlmdCgpIDogZmFsc2U7XG5cdCAgICAgICAgZXh0ZW5kSWZVbmRlZmluZWQgPSB0eXBlb2YgYXJncy5sYXN0KCkgPT09ICdib29sZWFuJyA/IGFyZ3MucG9wKCkgOiBmYWxzZTtcblx0ICAgICAgICB0YXJnZXQgPSBhcmdzLmxlbmd0aCA9PT0gMSA/IHt9IDogYXJncy5zaGlmdCgpIHx8IHt9O1xuXHQgICAgICAgIGlmICgodHlwZW9mIHRhcmdldCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KSh0YXJnZXQpKSAhPT0gJ29iamVjdCcgJiYgISQuaXNGdW5jdGlvbih0YXJnZXQpKSB0YXJnZXQgPSB7fTtcblx0XG5cdCAgICAgICAgc291cmNlcyA9IGFyZ3M7XG5cdCAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gdHJ1ZTtcblx0ICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IyID0gZmFsc2U7XG5cdCAgICAgICAgdmFyIF9pdGVyYXRvckVycm9yMiA9IHVuZGVmaW5lZDtcblx0XG5cdCAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yMiA9ICgwLCBfZ2V0SXRlcmF0b3IzLmRlZmF1bHQpKHNvdXJjZXMpLCBfc3RlcDI7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSAoX3N0ZXAyID0gX2l0ZXJhdG9yMi5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IHRydWUpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBzb3VyY2UgPSBfc3RlcDIudmFsdWU7XG5cdFxuXHQgICAgICAgICAgICAgICAgaWYgKHNvdXJjZSAhPSBudWxsKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbmFtZSBpbiBzb3VyY2UpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNyYyA9IHRhcmdldFtuYW1lXTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb3B5ID0gc291cmNlW25hbWVdO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvcHkgPT09IHRhcmdldCkgY29udGludWU7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29weUlzQXJyYXkgPSBmYWxzZTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWVwICYmIGNvcHkgJiYgKCQuaXNQbGFpbk9iamVjdChjb3B5KSB8fCAoY29weUlzQXJyYXkgPSAkLmlzQXJyYXkoY29weSkpKSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY29weUlzQXJyYXkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNyY0lzUGxhaW5PYmplY3QgPSBmYWxzZTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNyYyA9PT0gdW5kZWZpbmVkIHx8IChzcmNJc1BsYWluT2JqZWN0ID0gJC5pc1BsYWluT2JqZWN0KHNyYykpIHx8ICFleHRlbmRJZlVuZGVmaW5lZCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0W25hbWVdID0gJC5vYmouZXh0ZW5kKGRlZXAsIGFwcGVuZEFycmF5LCBzcmNJc1BsYWluT2JqZWN0ID8gc3JjIDoge30sIGNvcHksIGV4dGVuZElmVW5kZWZpbmVkKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3JjID09PSB1bmRlZmluZWQgfHwgIWV4dGVuZElmVW5kZWZpbmVkKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldFtuYW1lXSA9ICQubWVyZ2UoYXBwZW5kQXJyYXkgJiYgJC5pc0FycmF5KHNyYykgPyBzcmMgOiBbXSwgJC5vYmouZXh0ZW5kKGRlZXAsIFtdLCBjb3B5KSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb3B5ICE9PSB1bmRlZmluZWQgJiYgKHNyYyA9PT0gdW5kZWZpbmVkIHx8ICFleHRlbmRJZlVuZGVmaW5lZCkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29weSBpbnN0YW5jZW9mIERhdGUpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0W25hbWVdID0gbmV3IERhdGUoY29weS5nZXRUaW1lKCkpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29weSBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmxhZ3MgPSAnJztcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvcHkuZ2xvYmFsICE9IG51bGwpIGZsYWdzICs9ICdnJztcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvcHkuaWdub3JlQ2FzZSAhPSBudWxsKSBmbGFncyArPSAnaSc7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb3B5Lm11bHRpbGluZSAhPSBudWxsKSBmbGFncyArPSAnbSc7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb3B5LnN0aWNreSAhPSBudWxsKSBmbGFncyArPSAneSc7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldFtuYW1lXSA9IG5ldyBSZWdFeHAoY29weS5zb3VyY2UsIGZsYWdzKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRbbmFtZV0gPSBjb3B5O1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0gY2F0Y2ggKGVycikge1xuXHQgICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjIgPSB0cnVlO1xuXHQgICAgICAgICAgICBfaXRlcmF0b3JFcnJvcjIgPSBlcnI7XG5cdCAgICAgICAgfSBmaW5hbGx5IHtcblx0ICAgICAgICAgICAgdHJ5IHtcblx0ICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgJiYgX2l0ZXJhdG9yMi5yZXR1cm4pIHtcblx0ICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IyLnJldHVybigpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9IGZpbmFsbHkge1xuXHQgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yMikge1xuXHQgICAgICAgICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yMjtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgcmV0dXJuIHRhcmdldDtcblx0ICAgIH0sXG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBAcGFyYW0geyp9IGtleVZhbHVlUGFpcnNcblx0ICAgICAqIEByZXR1cm4ge09iamVjdH1cblx0ICAgICAqL1xuXHQgICAgbWFrZTogZnVuY3Rpb24gbWFrZSgpIHtcblx0ICAgICAgICB2YXIgb2JqID0ge307XG5cdFxuXHQgICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBrZXlWYWx1ZVBhaXJzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG5cdCAgICAgICAgICAgIGtleVZhbHVlUGFpcnNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleVZhbHVlUGFpcnMubGVuZ3RoOyBpICs9IDIpIHtcblx0ICAgICAgICAgICAgb2JqW2tleVZhbHVlUGFpcnNbaV1dID0ga2V5VmFsdWVQYWlyc1tpICsgMV07XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBvYmo7XG5cdCAgICB9LFxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogQHBhcmFtIHtPYmplY3R9IG9ialxuXHQgICAgICogQHJldHVybiB7T2JqZWN0fVxuXHQgICAgICovXG5cdCAgICBlbXB0eTogZnVuY3Rpb24gZW1wdHkob2JqKSB7XG5cdCAgICAgICAgaWYgKCQuaXNQbGFpbk9iamVjdChvYmopKSB7XG5cdCAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcblx0ICAgICAgICAgICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkgZGVsZXRlIG9ialtrZXldO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBvYmo7XG5cdCAgICB9XG5cdH07XG5cdFxuXHRmb3IgKHZhciBrZXkgaW4gJC5vYmopIHtcblx0ICAgIHZhciBzaG9ydEtleSA9IGtleSArICdPYmplY3QnO1xuXHQgICAgaWYgKCEoc2hvcnRLZXkgaW4gJCkpIHtcblx0ICAgICAgICBpZiAoJC5vYmouaGFzT3duUHJvcGVydHkoa2V5KSkgJFtzaG9ydEtleV0gPSAkLm9ialtrZXldO1xuXHQgICAgfVxuXHR9XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSAkLm9iajtcblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oMSkpKVxuXG4vKioqLyB9LFxuLyogMTEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0dmFyIF9TeW1ib2wgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKVtcImRlZmF1bHRcIl07XG5cdFxuXHRleHBvcnRzW1wiZGVmYXVsdFwiXSA9IGZ1bmN0aW9uIChvYmopIHtcblx0ICByZXR1cm4gb2JqICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gX1N5bWJvbCA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuXHR9O1xuXHRcblx0ZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuLyoqKi8gfSxcbi8qIDEyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IF9fd2VicGFja19yZXF1aXJlX18oMTMpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cbi8qKiovIH0sXG4vKiAxMyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0X193ZWJwYWNrX3JlcXVpcmVfXygxNCk7XG5cdF9fd2VicGFja19yZXF1aXJlX18oNDIpO1xuXHRtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMjEpLlN5bWJvbDtcblxuLyoqKi8gfSxcbi8qIDE0ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdC8vIEVDTUFTY3JpcHQgNiBzeW1ib2xzIHNoaW1cblx0dmFyICQgICAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSlcblx0ICAsIGdsb2JhbCAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNilcblx0ICAsIGhhcyAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNylcblx0ICAsIERFU0NSSVBUT1JTICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOClcblx0ICAsICRleHBvcnQgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMClcblx0ICAsIHJlZGVmaW5lICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNClcblx0ICAsICRmYWlscyAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOSlcblx0ICAsIHNoYXJlZCAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNylcblx0ICAsIHNldFRvU3RyaW5nVGFnID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOClcblx0ICAsIHVpZCAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMClcblx0ICAsIHdrcyAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOSlcblx0ICAsIGtleU9mICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMSlcblx0ICAsICRuYW1lcyAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNilcblx0ICAsIGVudW1LZXlzICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNylcblx0ICAsIGlzQXJyYXkgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOClcblx0ICAsIGFuT2JqZWN0ICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOSlcblx0ICAsIHRvSU9iamVjdCAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMilcblx0ICAsIGNyZWF0ZURlc2MgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNilcblx0ICAsIGdldERlc2MgICAgICAgID0gJC5nZXREZXNjXG5cdCAgLCBzZXREZXNjICAgICAgICA9ICQuc2V0RGVzY1xuXHQgICwgX2NyZWF0ZSAgICAgICAgPSAkLmNyZWF0ZVxuXHQgICwgZ2V0TmFtZXMgICAgICAgPSAkbmFtZXMuZ2V0XG5cdCAgLCAkU3ltYm9sICAgICAgICA9IGdsb2JhbC5TeW1ib2xcblx0ICAsICRKU09OICAgICAgICAgID0gZ2xvYmFsLkpTT05cblx0ICAsIF9zdHJpbmdpZnkgICAgID0gJEpTT04gJiYgJEpTT04uc3RyaW5naWZ5XG5cdCAgLCBzZXR0ZXIgICAgICAgICA9IGZhbHNlXG5cdCAgLCBISURERU4gICAgICAgICA9IHdrcygnX2hpZGRlbicpXG5cdCAgLCBpc0VudW0gICAgICAgICA9ICQuaXNFbnVtXG5cdCAgLCBTeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXJlZ2lzdHJ5Jylcblx0ICAsIEFsbFN5bWJvbHMgICAgID0gc2hhcmVkKCdzeW1ib2xzJylcblx0ICAsIHVzZU5hdGl2ZSAgICAgID0gdHlwZW9mICRTeW1ib2wgPT0gJ2Z1bmN0aW9uJ1xuXHQgICwgT2JqZWN0UHJvdG8gICAgPSBPYmplY3QucHJvdG90eXBlO1xuXHRcblx0Ly8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG5cdHZhciBzZXRTeW1ib2xEZXNjID0gREVTQ1JJUFRPUlMgJiYgJGZhaWxzKGZ1bmN0aW9uKCl7XG5cdCAgcmV0dXJuIF9jcmVhdGUoc2V0RGVzYyh7fSwgJ2EnLCB7XG5cdCAgICBnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiBzZXREZXNjKHRoaXMsICdhJywge3ZhbHVlOiA3fSkuYTsgfVxuXHQgIH0pKS5hICE9IDc7XG5cdH0pID8gZnVuY3Rpb24oaXQsIGtleSwgRCl7XG5cdCAgdmFyIHByb3RvRGVzYyA9IGdldERlc2MoT2JqZWN0UHJvdG8sIGtleSk7XG5cdCAgaWYocHJvdG9EZXNjKWRlbGV0ZSBPYmplY3RQcm90b1trZXldO1xuXHQgIHNldERlc2MoaXQsIGtleSwgRCk7XG5cdCAgaWYocHJvdG9EZXNjICYmIGl0ICE9PSBPYmplY3RQcm90bylzZXREZXNjKE9iamVjdFByb3RvLCBrZXksIHByb3RvRGVzYyk7XG5cdH0gOiBzZXREZXNjO1xuXHRcblx0dmFyIHdyYXAgPSBmdW5jdGlvbih0YWcpe1xuXHQgIHZhciBzeW0gPSBBbGxTeW1ib2xzW3RhZ10gPSBfY3JlYXRlKCRTeW1ib2wucHJvdG90eXBlKTtcblx0ICBzeW0uX2sgPSB0YWc7XG5cdCAgREVTQ1JJUFRPUlMgJiYgc2V0dGVyICYmIHNldFN5bWJvbERlc2MoT2JqZWN0UHJvdG8sIHRhZywge1xuXHQgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuXHQgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSl7XG5cdCAgICAgIGlmKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTtcblx0ICAgICAgc2V0U3ltYm9sRGVzYyh0aGlzLCB0YWcsIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcblx0ICAgIH1cblx0ICB9KTtcblx0ICByZXR1cm4gc3ltO1xuXHR9O1xuXHRcblx0dmFyIGlzU3ltYm9sID0gZnVuY3Rpb24oaXQpe1xuXHQgIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCc7XG5cdH07XG5cdFxuXHR2YXIgJGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgRCl7XG5cdCAgaWYoRCAmJiBoYXMoQWxsU3ltYm9scywga2V5KSl7XG5cdCAgICBpZighRC5lbnVtZXJhYmxlKXtcblx0ICAgICAgaWYoIWhhcyhpdCwgSElEREVOKSlzZXREZXNjKGl0LCBISURERU4sIGNyZWF0ZURlc2MoMSwge30pKTtcblx0ICAgICAgaXRbSElEREVOXVtrZXldID0gdHJ1ZTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIGlmKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0paXRbSElEREVOXVtrZXldID0gZmFsc2U7XG5cdCAgICAgIEQgPSBfY3JlYXRlKEQsIHtlbnVtZXJhYmxlOiBjcmVhdGVEZXNjKDAsIGZhbHNlKX0pO1xuXHQgICAgfSByZXR1cm4gc2V0U3ltYm9sRGVzYyhpdCwga2V5LCBEKTtcblx0ICB9IHJldHVybiBzZXREZXNjKGl0LCBrZXksIEQpO1xuXHR9O1xuXHR2YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKGl0LCBQKXtcblx0ICBhbk9iamVjdChpdCk7XG5cdCAgdmFyIGtleXMgPSBlbnVtS2V5cyhQID0gdG9JT2JqZWN0KFApKVxuXHQgICAgLCBpICAgID0gMFxuXHQgICAgLCBsID0ga2V5cy5sZW5ndGhcblx0ICAgICwga2V5O1xuXHQgIHdoaWxlKGwgPiBpKSRkZWZpbmVQcm9wZXJ0eShpdCwga2V5ID0ga2V5c1tpKytdLCBQW2tleV0pO1xuXHQgIHJldHVybiBpdDtcblx0fTtcblx0dmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaXQsIFApe1xuXHQgIHJldHVybiBQID09PSB1bmRlZmluZWQgPyBfY3JlYXRlKGl0KSA6ICRkZWZpbmVQcm9wZXJ0aWVzKF9jcmVhdGUoaXQpLCBQKTtcblx0fTtcblx0dmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKGtleSl7XG5cdCAgdmFyIEUgPSBpc0VudW0uY2FsbCh0aGlzLCBrZXkpO1xuXHQgIHJldHVybiBFIHx8ICFoYXModGhpcywga2V5KSB8fCAhaGFzKEFsbFN5bWJvbHMsIGtleSkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW2tleV1cblx0ICAgID8gRSA6IHRydWU7XG5cdH07XG5cdHZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpe1xuXHQgIHZhciBEID0gZ2V0RGVzYyhpdCA9IHRvSU9iamVjdChpdCksIGtleSk7XG5cdCAgaWYoRCAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pKUQuZW51bWVyYWJsZSA9IHRydWU7XG5cdCAgcmV0dXJuIEQ7XG5cdH07XG5cdHZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpe1xuXHQgIHZhciBuYW1lcyAgPSBnZXROYW1lcyh0b0lPYmplY3QoaXQpKVxuXHQgICAgLCByZXN1bHQgPSBbXVxuXHQgICAgLCBpICAgICAgPSAwXG5cdCAgICAsIGtleTtcblx0ICB3aGlsZShuYW1lcy5sZW5ndGggPiBpKWlmKCFoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYga2V5ICE9IEhJRERFTilyZXN1bHQucHVzaChrZXkpO1xuXHQgIHJldHVybiByZXN1bHQ7XG5cdH07XG5cdHZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KXtcblx0ICB2YXIgbmFtZXMgID0gZ2V0TmFtZXModG9JT2JqZWN0KGl0KSlcblx0ICAgICwgcmVzdWx0ID0gW11cblx0ICAgICwgaSAgICAgID0gMFxuXHQgICAgLCBrZXk7XG5cdCAgd2hpbGUobmFtZXMubGVuZ3RoID4gaSlpZihoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkpcmVzdWx0LnB1c2goQWxsU3ltYm9sc1trZXldKTtcblx0ICByZXR1cm4gcmVzdWx0O1xuXHR9O1xuXHR2YXIgJHN0cmluZ2lmeSA9IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCl7XG5cdCAgaWYoaXQgPT09IHVuZGVmaW5lZCB8fCBpc1N5bWJvbChpdCkpcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXG5cdCAgdmFyIGFyZ3MgPSBbaXRdXG5cdCAgICAsIGkgICAgPSAxXG5cdCAgICAsICQkICAgPSBhcmd1bWVudHNcblx0ICAgICwgcmVwbGFjZXIsICRyZXBsYWNlcjtcblx0ICB3aGlsZSgkJC5sZW5ndGggPiBpKWFyZ3MucHVzaCgkJFtpKytdKTtcblx0ICByZXBsYWNlciA9IGFyZ3NbMV07XG5cdCAgaWYodHlwZW9mIHJlcGxhY2VyID09ICdmdW5jdGlvbicpJHJlcGxhY2VyID0gcmVwbGFjZXI7XG5cdCAgaWYoJHJlcGxhY2VyIHx8ICFpc0FycmF5KHJlcGxhY2VyKSlyZXBsYWNlciA9IGZ1bmN0aW9uKGtleSwgdmFsdWUpe1xuXHQgICAgaWYoJHJlcGxhY2VyKXZhbHVlID0gJHJlcGxhY2VyLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XG5cdCAgICBpZighaXNTeW1ib2wodmFsdWUpKXJldHVybiB2YWx1ZTtcblx0ICB9O1xuXHQgIGFyZ3NbMV0gPSByZXBsYWNlcjtcblx0ICByZXR1cm4gX3N0cmluZ2lmeS5hcHBseSgkSlNPTiwgYXJncyk7XG5cdH07XG5cdHZhciBidWdneUpTT04gPSAkZmFpbHMoZnVuY3Rpb24oKXtcblx0ICB2YXIgUyA9ICRTeW1ib2woKTtcblx0ICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fVxuXHQgIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbFxuXHQgIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzXG5cdCAgcmV0dXJuIF9zdHJpbmdpZnkoW1NdKSAhPSAnW251bGxdJyB8fCBfc3RyaW5naWZ5KHthOiBTfSkgIT0gJ3t9JyB8fCBfc3RyaW5naWZ5KE9iamVjdChTKSkgIT0gJ3t9Jztcblx0fSk7XG5cdFxuXHQvLyAxOS40LjEuMSBTeW1ib2woW2Rlc2NyaXB0aW9uXSlcblx0aWYoIXVzZU5hdGl2ZSl7XG5cdCAgJFN5bWJvbCA9IGZ1bmN0aW9uIFN5bWJvbCgpe1xuXHQgICAgaWYoaXNTeW1ib2wodGhpcykpdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3InKTtcblx0ICAgIHJldHVybiB3cmFwKHVpZChhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCkpO1xuXHQgIH07XG5cdCAgcmVkZWZpbmUoJFN5bWJvbC5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCl7XG5cdCAgICByZXR1cm4gdGhpcy5faztcblx0ICB9KTtcblx0XG5cdCAgaXNTeW1ib2wgPSBmdW5jdGlvbihpdCl7XG5cdCAgICByZXR1cm4gaXQgaW5zdGFuY2VvZiAkU3ltYm9sO1xuXHQgIH07XG5cdFxuXHQgICQuY3JlYXRlICAgICA9ICRjcmVhdGU7XG5cdCAgJC5pc0VudW0gICAgID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXHQgICQuZ2V0RGVzYyAgICA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cdCAgJC5zZXREZXNjICAgID0gJGRlZmluZVByb3BlcnR5O1xuXHQgICQuc2V0RGVzY3MgICA9ICRkZWZpbmVQcm9wZXJ0aWVzO1xuXHQgICQuZ2V0TmFtZXMgICA9ICRuYW1lcy5nZXQgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcblx0ICAkLmdldFN5bWJvbHMgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXHRcblx0ICBpZihERVNDUklQVE9SUyAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXyg0MSkpe1xuXHQgICAgcmVkZWZpbmUoT2JqZWN0UHJvdG8sICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgdHJ1ZSk7XG5cdCAgfVxuXHR9XG5cdFxuXHR2YXIgc3ltYm9sU3RhdGljcyA9IHtcblx0ICAvLyAxOS40LjIuMSBTeW1ib2wuZm9yKGtleSlcblx0ICAnZm9yJzogZnVuY3Rpb24oa2V5KXtcblx0ICAgIHJldHVybiBoYXMoU3ltYm9sUmVnaXN0cnksIGtleSArPSAnJylcblx0ICAgICAgPyBTeW1ib2xSZWdpc3RyeVtrZXldXG5cdCAgICAgIDogU3ltYm9sUmVnaXN0cnlba2V5XSA9ICRTeW1ib2woa2V5KTtcblx0ICB9LFxuXHQgIC8vIDE5LjQuMi41IFN5bWJvbC5rZXlGb3Ioc3ltKVxuXHQgIGtleUZvcjogZnVuY3Rpb24ga2V5Rm9yKGtleSl7XG5cdCAgICByZXR1cm4ga2V5T2YoU3ltYm9sUmVnaXN0cnksIGtleSk7XG5cdCAgfSxcblx0ICB1c2VTZXR0ZXI6IGZ1bmN0aW9uKCl7IHNldHRlciA9IHRydWU7IH0sXG5cdCAgdXNlU2ltcGxlOiBmdW5jdGlvbigpeyBzZXR0ZXIgPSBmYWxzZTsgfVxuXHR9O1xuXHQvLyAxOS40LjIuMiBTeW1ib2wuaGFzSW5zdGFuY2Vcblx0Ly8gMTkuNC4yLjMgU3ltYm9sLmlzQ29uY2F0U3ByZWFkYWJsZVxuXHQvLyAxOS40LjIuNCBTeW1ib2wuaXRlcmF0b3Jcblx0Ly8gMTkuNC4yLjYgU3ltYm9sLm1hdGNoXG5cdC8vIDE5LjQuMi44IFN5bWJvbC5yZXBsYWNlXG5cdC8vIDE5LjQuMi45IFN5bWJvbC5zZWFyY2hcblx0Ly8gMTkuNC4yLjEwIFN5bWJvbC5zcGVjaWVzXG5cdC8vIDE5LjQuMi4xMSBTeW1ib2wuc3BsaXRcblx0Ly8gMTkuNC4yLjEyIFN5bWJvbC50b1ByaW1pdGl2ZVxuXHQvLyAxOS40LjIuMTMgU3ltYm9sLnRvU3RyaW5nVGFnXG5cdC8vIDE5LjQuMi4xNCBTeW1ib2wudW5zY29wYWJsZXNcblx0JC5lYWNoLmNhbGwoKFxuXHQgICdoYXNJbnN0YW5jZSxpc0NvbmNhdFNwcmVhZGFibGUsaXRlcmF0b3IsbWF0Y2gscmVwbGFjZSxzZWFyY2gsJyArXG5cdCAgJ3NwZWNpZXMsc3BsaXQsdG9QcmltaXRpdmUsdG9TdHJpbmdUYWcsdW5zY29wYWJsZXMnXG5cdCkuc3BsaXQoJywnKSwgZnVuY3Rpb24oaXQpe1xuXHQgIHZhciBzeW0gPSB3a3MoaXQpO1xuXHQgIHN5bWJvbFN0YXRpY3NbaXRdID0gdXNlTmF0aXZlID8gc3ltIDogd3JhcChzeW0pO1xuXHR9KTtcblx0XG5cdHNldHRlciA9IHRydWU7XG5cdFxuXHQkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVywge1N5bWJvbDogJFN5bWJvbH0pO1xuXHRcblx0JGV4cG9ydCgkZXhwb3J0LlMsICdTeW1ib2wnLCBzeW1ib2xTdGF0aWNzKTtcblx0XG5cdCRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXVzZU5hdGl2ZSwgJ09iamVjdCcsIHtcblx0ICAvLyAxOS4xLjIuMiBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG5cdCAgY3JlYXRlOiAkY3JlYXRlLFxuXHQgIC8vIDE5LjEuMi40IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuXHQgIGRlZmluZVByb3BlcnR5OiAkZGVmaW5lUHJvcGVydHksXG5cdCAgLy8gMTkuMS4yLjMgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcblx0ICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcyxcblx0ICAvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG5cdCAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuXHQgIC8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG5cdCAgZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXMsXG5cdCAgLy8gMTkuMS4yLjggT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhPKVxuXHQgIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9sc1xuXHR9KTtcblx0XG5cdC8vIDI0LjMuMiBKU09OLnN0cmluZ2lmeSh2YWx1ZSBbLCByZXBsYWNlciBbLCBzcGFjZV1dKVxuXHQkSlNPTiAmJiAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghdXNlTmF0aXZlIHx8IGJ1Z2d5SlNPTiksICdKU09OJywge3N0cmluZ2lmeTogJHN0cmluZ2lmeX0pO1xuXHRcblx0Ly8gMTkuNC4zLjUgU3ltYm9sLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXVxuXHRzZXRUb1N0cmluZ1RhZygkU3ltYm9sLCAnU3ltYm9sJyk7XG5cdC8vIDIwLjIuMS45IE1hdGhbQEB0b1N0cmluZ1RhZ11cblx0c2V0VG9TdHJpbmdUYWcoTWF0aCwgJ01hdGgnLCB0cnVlKTtcblx0Ly8gMjQuMy4zIEpTT05bQEB0b1N0cmluZ1RhZ11cblx0c2V0VG9TdHJpbmdUYWcoZ2xvYmFsLkpTT04sICdKU09OJywgdHJ1ZSk7XG5cbi8qKiovIH0sXG4vKiAxNSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0dmFyICRPYmplY3QgPSBPYmplY3Q7XG5cdG1vZHVsZS5leHBvcnRzID0ge1xuXHQgIGNyZWF0ZTogICAgICRPYmplY3QuY3JlYXRlLFxuXHQgIGdldFByb3RvOiAgICRPYmplY3QuZ2V0UHJvdG90eXBlT2YsXG5cdCAgaXNFbnVtOiAgICAge30ucHJvcGVydHlJc0VudW1lcmFibGUsXG5cdCAgZ2V0RGVzYzogICAgJE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsXG5cdCAgc2V0RGVzYzogICAgJE9iamVjdC5kZWZpbmVQcm9wZXJ0eSxcblx0ICBzZXREZXNjczogICAkT2JqZWN0LmRlZmluZVByb3BlcnRpZXMsXG5cdCAgZ2V0S2V5czogICAgJE9iamVjdC5rZXlzLFxuXHQgIGdldE5hbWVzOiAgICRPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyxcblx0ICBnZXRTeW1ib2xzOiAkT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyxcblx0ICBlYWNoOiAgICAgICBbXS5mb3JFYWNoXG5cdH07XG5cbi8qKiovIH0sXG4vKiAxNiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKHdpbmRvdykgey8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG5cdHZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxuXHQgID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0aWYodHlwZW9mIF9fZyA9PSAnbnVtYmVyJylfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oNSkpKVxuXG4vKioqLyB9LFxuLyogMTcgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdHZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0LCBrZXkpe1xuXHQgIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xuXHR9O1xuXG4vKioqLyB9LFxuLyogMTggKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcblx0bW9kdWxlLmV4cG9ydHMgPSAhX193ZWJwYWNrX3JlcXVpcmVfXygxOSkoZnVuY3Rpb24oKXtcblx0ICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHtnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiA3OyB9fSkuYSAhPSA3O1xuXHR9KTtcblxuLyoqKi8gfSxcbi8qIDE5ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGV4ZWMpe1xuXHQgIHRyeSB7XG5cdCAgICByZXR1cm4gISFleGVjKCk7XG5cdCAgfSBjYXRjaChlKXtcblx0ICAgIHJldHVybiB0cnVlO1xuXHQgIH1cblx0fTtcblxuLyoqKi8gfSxcbi8qIDIwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHR2YXIgZ2xvYmFsICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNilcblx0ICAsIGNvcmUgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjEpXG5cdCAgLCBjdHggICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIyKVxuXHQgICwgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cdFxuXHR2YXIgJGV4cG9ydCA9IGZ1bmN0aW9uKHR5cGUsIG5hbWUsIHNvdXJjZSl7XG5cdCAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkZcblx0ICAgICwgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuR1xuXHQgICAgLCBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TXG5cdCAgICAsIElTX1BST1RPICA9IHR5cGUgJiAkZXhwb3J0LlBcblx0ICAgICwgSVNfQklORCAgID0gdHlwZSAmICRleHBvcnQuQlxuXHQgICAgLCBJU19XUkFQICAgPSB0eXBlICYgJGV4cG9ydC5XXG5cdCAgICAsIGV4cG9ydHMgICA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pXG5cdCAgICAsIHRhcmdldCAgICA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV1cblx0ICAgICwga2V5LCBvd24sIG91dDtcblx0ICBpZihJU19HTE9CQUwpc291cmNlID0gbmFtZTtcblx0ICBmb3Ioa2V5IGluIHNvdXJjZSl7XG5cdCAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcblx0ICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIGtleSBpbiB0YXJnZXQ7XG5cdCAgICBpZihvd24gJiYga2V5IGluIGV4cG9ydHMpY29udGludWU7XG5cdCAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuXHQgICAgb3V0ID0gb3duID8gdGFyZ2V0W2tleV0gOiBzb3VyY2Vba2V5XTtcblx0ICAgIC8vIHByZXZlbnQgZ2xvYmFsIHBvbGx1dGlvbiBmb3IgbmFtZXNwYWNlc1xuXHQgICAgZXhwb3J0c1trZXldID0gSVNfR0xPQkFMICYmIHR5cGVvZiB0YXJnZXRba2V5XSAhPSAnZnVuY3Rpb24nID8gc291cmNlW2tleV1cblx0ICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG5cdCAgICA6IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKVxuXHQgICAgLy8gd3JhcCBnbG9iYWwgY29uc3RydWN0b3JzIGZvciBwcmV2ZW50IGNoYW5nZSB0aGVtIGluIGxpYnJhcnlcblx0ICAgIDogSVNfV1JBUCAmJiB0YXJnZXRba2V5XSA9PSBvdXQgPyAoZnVuY3Rpb24oQyl7XG5cdCAgICAgIHZhciBGID0gZnVuY3Rpb24ocGFyYW0pe1xuXHQgICAgICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgQyA/IG5ldyBDKHBhcmFtKSA6IEMocGFyYW0pO1xuXHQgICAgICB9O1xuXHQgICAgICBGW1BST1RPVFlQRV0gPSBDW1BST1RPVFlQRV07XG5cdCAgICAgIHJldHVybiBGO1xuXHQgICAgLy8gbWFrZSBzdGF0aWMgdmVyc2lvbnMgZm9yIHByb3RvdHlwZSBtZXRob2RzXG5cdCAgICB9KShvdXQpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG5cdCAgICBpZihJU19QUk9UTykoZXhwb3J0c1tQUk9UT1RZUEVdIHx8IChleHBvcnRzW1BST1RPVFlQRV0gPSB7fSkpW2tleV0gPSBvdXQ7XG5cdCAgfVxuXHR9O1xuXHQvLyB0eXBlIGJpdG1hcFxuXHQkZXhwb3J0LkYgPSAxOyAgLy8gZm9yY2VkXG5cdCRleHBvcnQuRyA9IDI7ICAvLyBnbG9iYWxcblx0JGV4cG9ydC5TID0gNDsgIC8vIHN0YXRpY1xuXHQkZXhwb3J0LlAgPSA4OyAgLy8gcHJvdG9cblx0JGV4cG9ydC5CID0gMTY7IC8vIGJpbmRcblx0JGV4cG9ydC5XID0gMzI7IC8vIHdyYXBcblx0bW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuXG4vKioqLyB9LFxuLyogMjEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdHZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7dmVyc2lvbjogJzEuMi42J307XG5cdGlmKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuXG4vKioqLyB9LFxuLyogMjIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xuXHR2YXIgYUZ1bmN0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMyk7XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZm4sIHRoYXQsIGxlbmd0aCl7XG5cdCAgYUZ1bmN0aW9uKGZuKTtcblx0ICBpZih0aGF0ID09PSB1bmRlZmluZWQpcmV0dXJuIGZuO1xuXHQgIHN3aXRjaChsZW5ndGgpe1xuXHQgICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24oYSl7XG5cdCAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuXHQgICAgfTtcblx0ICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uKGEsIGIpe1xuXHQgICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcblx0ICAgIH07XG5cdCAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbihhLCBiLCBjKXtcblx0ICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG5cdCAgICB9O1xuXHQgIH1cblx0ICByZXR1cm4gZnVuY3Rpb24oLyogLi4uYXJncyAqLyl7XG5cdCAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcblx0ICB9O1xuXHR9O1xuXG4vKioqLyB9LFxuLyogMjMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuXHQgIGlmKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKXRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG5cdCAgcmV0dXJuIGl0O1xuXHR9O1xuXG4vKioqLyB9LFxuLyogMjQgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdG1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNSk7XG5cbi8qKiovIH0sXG4vKiAyNSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyICQgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KVxuXHQgICwgY3JlYXRlRGVzYyA9IF9fd2VicGFja19yZXF1aXJlX18oMjYpO1xuXHRtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpID8gZnVuY3Rpb24ob2JqZWN0LCBrZXksIHZhbHVlKXtcblx0ICByZXR1cm4gJC5zZXREZXNjKG9iamVjdCwga2V5LCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG5cdH0gOiBmdW5jdGlvbihvYmplY3QsIGtleSwgdmFsdWUpe1xuXHQgIG9iamVjdFtrZXldID0gdmFsdWU7XG5cdCAgcmV0dXJuIG9iamVjdDtcblx0fTtcblxuLyoqKi8gfSxcbi8qIDI2ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGJpdG1hcCwgdmFsdWUpe1xuXHQgIHJldHVybiB7XG5cdCAgICBlbnVtZXJhYmxlICA6ICEoYml0bWFwICYgMSksXG5cdCAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG5cdCAgICB3cml0YWJsZSAgICA6ICEoYml0bWFwICYgNCksXG5cdCAgICB2YWx1ZSAgICAgICA6IHZhbHVlXG5cdCAgfTtcblx0fTtcblxuLyoqKi8gfSxcbi8qIDI3ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHR2YXIgZ2xvYmFsID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNilcblx0ICAsIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nXG5cdCAgLCBzdG9yZSAgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oa2V5KXtcblx0ICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHt9KTtcblx0fTtcblxuLyoqKi8gfSxcbi8qIDI4ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHR2YXIgZGVmID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSkuc2V0RGVzY1xuXHQgICwgaGFzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNylcblx0ICAsIFRBRyA9IF9fd2VicGFja19yZXF1aXJlX18oMjkpKCd0b1N0cmluZ1RhZycpO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCwgdGFnLCBzdGF0KXtcblx0ICBpZihpdCAmJiAhaGFzKGl0ID0gc3RhdCA/IGl0IDogaXQucHJvdG90eXBlLCBUQUcpKWRlZihpdCwgVEFHLCB7Y29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogdGFnfSk7XG5cdH07XG5cbi8qKiovIH0sXG4vKiAyOSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIHN0b3JlICA9IF9fd2VicGFja19yZXF1aXJlX18oMjcpKCd3a3MnKVxuXHQgICwgdWlkICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMClcblx0ICAsIFN5bWJvbCA9IF9fd2VicGFja19yZXF1aXJlX18oMTYpLlN5bWJvbDtcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihuYW1lKXtcblx0ICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID1cblx0ICAgIFN5bWJvbCAmJiBTeW1ib2xbbmFtZV0gfHwgKFN5bWJvbCB8fCB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTtcblx0fTtcblxuLyoqKi8gfSxcbi8qIDMwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHR2YXIgaWQgPSAwXG5cdCAgLCBweCA9IE1hdGgucmFuZG9tKCk7XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oa2V5KXtcblx0ICByZXR1cm4gJ1N5bWJvbCgnLmNvbmNhdChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5LCAnKV8nLCAoKytpZCArIHB4KS50b1N0cmluZygzNikpO1xuXHR9O1xuXG4vKioqLyB9LFxuLyogMzEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdHZhciAkICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KVxuXHQgICwgdG9JT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMik7XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqZWN0LCBlbCl7XG5cdCAgdmFyIE8gICAgICA9IHRvSU9iamVjdChvYmplY3QpXG5cdCAgICAsIGtleXMgICA9ICQuZ2V0S2V5cyhPKVxuXHQgICAgLCBsZW5ndGggPSBrZXlzLmxlbmd0aFxuXHQgICAgLCBpbmRleCAgPSAwXG5cdCAgICAsIGtleTtcblx0ICB3aGlsZShsZW5ndGggPiBpbmRleClpZihPW2tleSA9IGtleXNbaW5kZXgrK11dID09PSBlbClyZXR1cm4ga2V5O1xuXHR9O1xuXG4vKioqLyB9LFxuLyogMzIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8vIHRvIGluZGV4ZWQgb2JqZWN0LCB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xuXHR2YXIgSU9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMzMpXG5cdCAgLCBkZWZpbmVkID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNSk7XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuXHQgIHJldHVybiBJT2JqZWN0KGRlZmluZWQoaXQpKTtcblx0fTtcblxuLyoqKi8gfSxcbi8qIDMzICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xuXHR2YXIgY29mID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNCk7XG5cdG1vZHVsZS5leHBvcnRzID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbihpdCl7XG5cdCAgcmV0dXJuIGNvZihpdCkgPT0gJ1N0cmluZycgPyBpdC5zcGxpdCgnJykgOiBPYmplY3QoaXQpO1xuXHR9O1xuXG4vKioqLyB9LFxuLyogMzQgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdHZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG5cdCAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcblx0fTtcblxuLyoqKi8gfSxcbi8qIDM1ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQvLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KVxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcblx0ICBpZihpdCA9PSB1bmRlZmluZWQpdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpO1xuXHQgIHJldHVybiBpdDtcblx0fTtcblxuLyoqKi8gfSxcbi8qIDM2ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24od2luZG93KSB7Ly8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xuXHR2YXIgdG9JT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMilcblx0ICAsIGdldE5hbWVzICA9IF9fd2VicGFja19yZXF1aXJlX18oMTUpLmdldE5hbWVzXG5cdCAgLCB0b1N0cmluZyAgPSB7fS50b1N0cmluZztcblx0XG5cdHZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNcblx0ICA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdykgOiBbXTtcblx0XG5cdHZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uKGl0KXtcblx0ICB0cnkge1xuXHQgICAgcmV0dXJuIGdldE5hbWVzKGl0KTtcblx0ICB9IGNhdGNoKGUpe1xuXHQgICAgcmV0dXJuIHdpbmRvd05hbWVzLnNsaWNlKCk7XG5cdCAgfVxuXHR9O1xuXHRcblx0bW9kdWxlLmV4cG9ydHMuZ2V0ID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCl7XG5cdCAgaWYod2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XScpcmV0dXJuIGdldFdpbmRvd05hbWVzKGl0KTtcblx0ICByZXR1cm4gZ2V0TmFtZXModG9JT2JqZWN0KGl0KSk7XG5cdH07XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpKSlcblxuLyoqKi8gfSxcbi8qIDM3ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvLyBhbGwgZW51bWVyYWJsZSBvYmplY3Qga2V5cywgaW5jbHVkZXMgc3ltYm9sc1xuXHR2YXIgJCA9IF9fd2VicGFja19yZXF1aXJlX18oMTUpO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcblx0ICB2YXIga2V5cyAgICAgICA9ICQuZ2V0S2V5cyhpdClcblx0ICAgICwgZ2V0U3ltYm9scyA9ICQuZ2V0U3ltYm9scztcblx0ICBpZihnZXRTeW1ib2xzKXtcblx0ICAgIHZhciBzeW1ib2xzID0gZ2V0U3ltYm9scyhpdClcblx0ICAgICAgLCBpc0VudW0gID0gJC5pc0VudW1cblx0ICAgICAgLCBpICAgICAgID0gMFxuXHQgICAgICAsIGtleTtcblx0ICAgIHdoaWxlKHN5bWJvbHMubGVuZ3RoID4gaSlpZihpc0VudW0uY2FsbChpdCwga2V5ID0gc3ltYm9sc1tpKytdKSlrZXlzLnB1c2goa2V5KTtcblx0ICB9XG5cdCAgcmV0dXJuIGtleXM7XG5cdH07XG5cbi8qKiovIH0sXG4vKiAzOCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0Ly8gNy4yLjIgSXNBcnJheShhcmd1bWVudClcblx0dmFyIGNvZiA9IF9fd2VicGFja19yZXF1aXJlX18oMzQpO1xuXHRtb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24oYXJnKXtcblx0ICByZXR1cm4gY29mKGFyZykgPT0gJ0FycmF5Jztcblx0fTtcblxuLyoqKi8gfSxcbi8qIDM5ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHR2YXIgaXNPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQwKTtcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG5cdCAgaWYoIWlzT2JqZWN0KGl0KSl0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG5cdCAgcmV0dXJuIGl0O1xuXHR9O1xuXG4vKioqLyB9LFxuLyogNDAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuXHQgIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG5cdH07XG5cbi8qKiovIH0sXG4vKiA0MSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSB0cnVlO1xuXG4vKioqLyB9LFxuLyogNDIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cblxuLyoqKi8gfSxcbi8qIDQzICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IF9fd2VicGFja19yZXF1aXJlX18oNDQpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cbi8qKiovIH0sXG4vKiA0NCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0X193ZWJwYWNrX3JlcXVpcmVfXyg0NSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18oNTIpO1xuXHRtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oNTUpO1xuXG4vKioqLyB9LFxuLyogNDUgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdF9fd2VicGFja19yZXF1aXJlX18oNDYpO1xuXHR2YXIgSXRlcmF0b3JzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0OSk7XG5cdEl0ZXJhdG9ycy5Ob2RlTGlzdCA9IEl0ZXJhdG9ycy5IVE1MQ29sbGVjdGlvbiA9IEl0ZXJhdG9ycy5BcnJheTtcblxuLyoqKi8gfSxcbi8qIDQ2ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdHZhciBhZGRUb1Vuc2NvcGFibGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0Nylcblx0ICAsIHN0ZXAgICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ4KVxuXHQgICwgSXRlcmF0b3JzICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNDkpXG5cdCAgLCB0b0lPYmplY3QgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMik7XG5cdFxuXHQvLyAyMi4xLjMuNCBBcnJheS5wcm90b3R5cGUuZW50cmllcygpXG5cdC8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUua2V5cygpXG5cdC8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKClcblx0Ly8gMjIuMS4zLjMwIEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5cdG1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MCkoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uKGl0ZXJhdGVkLCBraW5kKXtcblx0ICB0aGlzLl90ID0gdG9JT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG5cdCAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcblx0ICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgLy8ga2luZFxuXHQvLyAyMi4xLjUuMi4xICVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcblx0fSwgZnVuY3Rpb24oKXtcblx0ICB2YXIgTyAgICAgPSB0aGlzLl90XG5cdCAgICAsIGtpbmQgID0gdGhpcy5fa1xuXHQgICAgLCBpbmRleCA9IHRoaXMuX2krKztcblx0ICBpZighTyB8fCBpbmRleCA+PSBPLmxlbmd0aCl7XG5cdCAgICB0aGlzLl90ID0gdW5kZWZpbmVkO1xuXHQgICAgcmV0dXJuIHN0ZXAoMSk7XG5cdCAgfVxuXHQgIGlmKGtpbmQgPT0gJ2tleXMnICApcmV0dXJuIHN0ZXAoMCwgaW5kZXgpO1xuXHQgIGlmKGtpbmQgPT0gJ3ZhbHVlcycpcmV0dXJuIHN0ZXAoMCwgT1tpbmRleF0pO1xuXHQgIHJldHVybiBzdGVwKDAsIFtpbmRleCwgT1tpbmRleF1dKTtcblx0fSwgJ3ZhbHVlcycpO1xuXHRcblx0Ly8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlICg5LjQuNC42LCA5LjQuNC43KVxuXHRJdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXHRcblx0YWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuXHRhZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcblx0YWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuXG4vKioqLyB9LFxuLyogNDcgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKXsgLyogZW1wdHkgKi8gfTtcblxuLyoqKi8gfSxcbi8qIDQ4ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGRvbmUsIHZhbHVlKXtcblx0ICByZXR1cm4ge3ZhbHVlOiB2YWx1ZSwgZG9uZTogISFkb25lfTtcblx0fTtcblxuLyoqKi8gfSxcbi8qIDQ5ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vKioqLyB9LFxuLyogNTAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0dmFyIExJQlJBUlkgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MSlcblx0ICAsICRleHBvcnQgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMClcblx0ICAsIHJlZGVmaW5lICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNClcblx0ICAsIGhpZGUgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNSlcblx0ICAsIGhhcyAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNylcblx0ICAsIEl0ZXJhdG9ycyAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0OSlcblx0ICAsICRpdGVyQ3JlYXRlICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MSlcblx0ICAsIHNldFRvU3RyaW5nVGFnID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOClcblx0ICAsIGdldFByb3RvICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSkuZ2V0UHJvdG9cblx0ICAsIElURVJBVE9SICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOSkoJ2l0ZXJhdG9yJylcblx0ICAsIEJVR0dZICAgICAgICAgID0gIShbXS5rZXlzICYmICduZXh0JyBpbiBbXS5rZXlzKCkpIC8vIFNhZmFyaSBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcblx0ICAsIEZGX0lURVJBVE9SICAgID0gJ0BAaXRlcmF0b3InXG5cdCAgLCBLRVlTICAgICAgICAgICA9ICdrZXlzJ1xuXHQgICwgVkFMVUVTICAgICAgICAgPSAndmFsdWVzJztcblx0XG5cdHZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXM7IH07XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCl7XG5cdCAgJGl0ZXJDcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuXHQgIHZhciBnZXRNZXRob2QgPSBmdW5jdGlvbihraW5kKXtcblx0ICAgIGlmKCFCVUdHWSAmJiBraW5kIGluIHByb3RvKXJldHVybiBwcm90b1traW5kXTtcblx0ICAgIHN3aXRjaChraW5kKXtcblx0ICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuXHQgICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuXHQgICAgfSByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuXHQgIH07XG5cdCAgdmFyIFRBRyAgICAgICAgPSBOQU1FICsgJyBJdGVyYXRvcidcblx0ICAgICwgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTXG5cdCAgICAsIFZBTFVFU19CVUcgPSBmYWxzZVxuXHQgICAgLCBwcm90byAgICAgID0gQmFzZS5wcm90b3R5cGVcblx0ICAgICwgJG5hdGl2ZSAgICA9IHByb3RvW0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXVxuXHQgICAgLCAkZGVmYXVsdCAgID0gJG5hdGl2ZSB8fCBnZXRNZXRob2QoREVGQVVMVClcblx0ICAgICwgbWV0aG9kcywga2V5O1xuXHQgIC8vIEZpeCBuYXRpdmVcblx0ICBpZigkbmF0aXZlKXtcblx0ICAgIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvKCRkZWZhdWx0LmNhbGwobmV3IEJhc2UpKTtcblx0ICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcblx0ICAgIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yUHJvdG90eXBlLCBUQUcsIHRydWUpO1xuXHQgICAgLy8gRkYgZml4XG5cdCAgICBpZighTElCUkFSWSAmJiBoYXMocHJvdG8sIEZGX0lURVJBVE9SKSloaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG5cdCAgICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG5cdCAgICBpZihERUZfVkFMVUVTICYmICRuYXRpdmUubmFtZSAhPT0gVkFMVUVTKXtcblx0ICAgICAgVkFMVUVTX0JVRyA9IHRydWU7XG5cdCAgICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCl7IHJldHVybiAkbmF0aXZlLmNhbGwodGhpcyk7IH07XG5cdCAgICB9XG5cdCAgfVxuXHQgIC8vIERlZmluZSBpdGVyYXRvclxuXHQgIGlmKCghTElCUkFSWSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKXtcblx0ICAgIGhpZGUocHJvdG8sIElURVJBVE9SLCAkZGVmYXVsdCk7XG5cdCAgfVxuXHQgIC8vIFBsdWcgZm9yIGxpYnJhcnlcblx0ICBJdGVyYXRvcnNbTkFNRV0gPSAkZGVmYXVsdDtcblx0ICBJdGVyYXRvcnNbVEFHXSAgPSByZXR1cm5UaGlzO1xuXHQgIGlmKERFRkFVTFQpe1xuXHQgICAgbWV0aG9kcyA9IHtcblx0ICAgICAgdmFsdWVzOiAgREVGX1ZBTFVFUyAgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChWQUxVRVMpLFxuXHQgICAgICBrZXlzOiAgICBJU19TRVQgICAgICA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKEtFWVMpLFxuXHQgICAgICBlbnRyaWVzOiAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJylcblx0ICAgIH07XG5cdCAgICBpZihGT1JDRUQpZm9yKGtleSBpbiBtZXRob2RzKXtcblx0ICAgICAgaWYoIShrZXkgaW4gcHJvdG8pKXJlZGVmaW5lKHByb3RvLCBrZXksIG1ldGhvZHNba2V5XSk7XG5cdCAgICB9IGVsc2UgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoQlVHR1kgfHwgVkFMVUVTX0JVRyksIE5BTUUsIG1ldGhvZHMpO1xuXHQgIH1cblx0ICByZXR1cm4gbWV0aG9kcztcblx0fTtcblxuLyoqKi8gfSxcbi8qIDUxICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdHZhciAkICAgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTUpXG5cdCAgLCBkZXNjcmlwdG9yICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjYpXG5cdCAgLCBzZXRUb1N0cmluZ1RhZyA9IF9fd2VicGFja19yZXF1aXJlX18oMjgpXG5cdCAgLCBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXHRcblx0Ly8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcblx0X193ZWJwYWNrX3JlcXVpcmVfXygyNSkoSXRlcmF0b3JQcm90b3R5cGUsIF9fd2VicGFja19yZXF1aXJlX18oMjkpKCdpdGVyYXRvcicpLCBmdW5jdGlvbigpeyByZXR1cm4gdGhpczsgfSk7XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KXtcblx0ICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSAkLmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwge25leHQ6IGRlc2NyaXB0b3IoMSwgbmV4dCl9KTtcblx0ICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgTkFNRSArICcgSXRlcmF0b3InKTtcblx0fTtcblxuLyoqKi8gfSxcbi8qIDUyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdHZhciAkYXQgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MykodHJ1ZSk7XG5cdFxuXHQvLyAyMS4xLjMuMjcgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5cdF9fd2VicGFja19yZXF1aXJlX18oNTApKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uKGl0ZXJhdGVkKXtcblx0ICB0aGlzLl90ID0gU3RyaW5nKGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG5cdCAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcblx0Ly8gMjEuMS41LjIuMSAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxuXHR9LCBmdW5jdGlvbigpe1xuXHQgIHZhciBPICAgICA9IHRoaXMuX3Rcblx0ICAgICwgaW5kZXggPSB0aGlzLl9pXG5cdCAgICAsIHBvaW50O1xuXHQgIGlmKGluZGV4ID49IE8ubGVuZ3RoKXJldHVybiB7dmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZX07XG5cdCAgcG9pbnQgPSAkYXQoTywgaW5kZXgpO1xuXHQgIHRoaXMuX2kgKz0gcG9pbnQubGVuZ3RoO1xuXHQgIHJldHVybiB7dmFsdWU6IHBvaW50LCBkb25lOiBmYWxzZX07XG5cdH0pO1xuXG4vKioqLyB9LFxuLyogNTMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdHZhciB0b0ludGVnZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU0KVxuXHQgICwgZGVmaW5lZCAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNSk7XG5cdC8vIHRydWUgIC0+IFN0cmluZyNhdFxuXHQvLyBmYWxzZSAtPiBTdHJpbmcjY29kZVBvaW50QXRcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihUT19TVFJJTkcpe1xuXHQgIHJldHVybiBmdW5jdGlvbih0aGF0LCBwb3Mpe1xuXHQgICAgdmFyIHMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSlcblx0ICAgICAgLCBpID0gdG9JbnRlZ2VyKHBvcylcblx0ICAgICAgLCBsID0gcy5sZW5ndGhcblx0ICAgICAgLCBhLCBiO1xuXHQgICAgaWYoaSA8IDAgfHwgaSA+PSBsKXJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcblx0ICAgIGEgPSBzLmNoYXJDb2RlQXQoaSk7XG5cdCAgICByZXR1cm4gYSA8IDB4ZDgwMCB8fCBhID4gMHhkYmZmIHx8IGkgKyAxID09PSBsIHx8IChiID0gcy5jaGFyQ29kZUF0KGkgKyAxKSkgPCAweGRjMDAgfHwgYiA+IDB4ZGZmZlxuXHQgICAgICA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYVxuXHQgICAgICA6IFRPX1NUUklORyA/IHMuc2xpY2UoaSwgaSArIDIpIDogKGEgLSAweGQ4MDAgPDwgMTApICsgKGIgLSAweGRjMDApICsgMHgxMDAwMDtcblx0ICB9O1xuXHR9O1xuXG4vKioqLyB9LFxuLyogNTQgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdC8vIDcuMS40IFRvSW50ZWdlclxuXHR2YXIgY2VpbCAgPSBNYXRoLmNlaWxcblx0ICAsIGZsb29yID0gTWF0aC5mbG9vcjtcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG5cdCAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG5cdH07XG5cbi8qKiovIH0sXG4vKiA1NSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIGFuT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOSlcblx0ICAsIGdldCAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1Nik7XG5cdG1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMSkuZ2V0SXRlcmF0b3IgPSBmdW5jdGlvbihpdCl7XG5cdCAgdmFyIGl0ZXJGbiA9IGdldChpdCk7XG5cdCAgaWYodHlwZW9mIGl0ZXJGbiAhPSAnZnVuY3Rpb24nKXRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGl0ZXJhYmxlIScpO1xuXHQgIHJldHVybiBhbk9iamVjdChpdGVyRm4uY2FsbChpdCkpO1xuXHR9O1xuXG4vKioqLyB9LFxuLyogNTYgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdHZhciBjbGFzc29mICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU3KVxuXHQgICwgSVRFUkFUT1IgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOSkoJ2l0ZXJhdG9yJylcblx0ICAsIEl0ZXJhdG9ycyA9IF9fd2VicGFja19yZXF1aXJlX18oNDkpO1xuXHRtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMjEpLmdldEl0ZXJhdG9yTWV0aG9kID0gZnVuY3Rpb24oaXQpe1xuXHQgIGlmKGl0ICE9IHVuZGVmaW5lZClyZXR1cm4gaXRbSVRFUkFUT1JdXG5cdCAgICB8fCBpdFsnQEBpdGVyYXRvciddXG5cdCAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xuXHR9O1xuXG4vKioqLyB9LFxuLyogNTcgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8vIGdldHRpbmcgdGFnIGZyb20gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXG5cdHZhciBjb2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM0KVxuXHQgICwgVEFHID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOSkoJ3RvU3RyaW5nVGFnJylcblx0ICAvLyBFUzMgd3JvbmcgaGVyZVxuXHQgICwgQVJHID0gY29mKGZ1bmN0aW9uKCl7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT0gJ0FyZ3VtZW50cyc7XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcblx0ICB2YXIgTywgVCwgQjtcblx0ICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcblx0ICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuXHQgICAgOiB0eXBlb2YgKFQgPSAoTyA9IE9iamVjdChpdCkpW1RBR10pID09ICdzdHJpbmcnID8gVFxuXHQgICAgLy8gYnVpbHRpblRhZyBjYXNlXG5cdCAgICA6IEFSRyA/IGNvZihPKVxuXHQgICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFja1xuXHQgICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XG5cdH07XG5cbi8qKiovIH0sXG4vKiA1OCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKCQpIHsndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0X193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblx0XG5cdC8qKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gc3RyXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBzZXBhcmF0b3Jcblx0ICogQHBhcmFtIHtzdHJpbmd9IFtlc2NhcGVDaGFyXVxuXHQgKiBAcGFyYW0ge251bWJlcn0gW2xpbWl0XVxuXHQgKiBAcmV0dXJuIHtBcnJheTxzdHJpbmc+fVxuXHQgKi9cblx0JC5zcGxpdCA9IGZ1bmN0aW9uIChzdHIsIHNlcGFyYXRvciwgZXNjYXBlQ2hhciwgbGltaXQpIHtcblx0ICAgIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuXHQgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3Ioc3RyICsgJyBpcyBub3QgYSBzdHJpbmcnKTtcblx0ICAgIH1cblx0ICAgIHN0ciA9IHN0ci50b1N0cmluZygpO1xuXHQgICAgaWYgKHR5cGVvZiBzZXBhcmF0b3IgPT09ICdudW1iZXInKSB7XG5cdCAgICAgICAgO1xuXHQgICAgICAgIHZhciBfcmVmID0gW3NlcGFyYXRvciwgbnVsbCwgbnVsbF07XG5cdCAgICAgICAgbGltaXQgPSBfcmVmWzBdO1xuXHQgICAgICAgIHNlcGFyYXRvciA9IF9yZWZbMV07XG5cdCAgICAgICAgZXNjYXBlQ2hhciA9IF9yZWZbMl07XG5cdCAgICB9IGVsc2UgaWYgKHR5cGVvZiBlc2NhcGVDaGFyID09PSAnbnVtYmVyJykge1xuXHQgICAgICAgIDtcblx0XG5cdCAgICAgICAgdmFyIF9yZWYyID0gW2VzY2FwZUNoYXIsIG51bGxdO1xuXHQgICAgICAgIGxpbWl0ID0gX3JlZjJbMF07XG5cdCAgICAgICAgZXNjYXBlQ2hhciA9IF9yZWYyWzFdO1xuXHQgICAgfWZ1bmN0aW9uIGxpbWl0ZWQoaSkge1xuXHQgICAgICAgIHJldHVybiAwIDwgbGltaXQgJiYgbGltaXQgPD0gaSArIDE7XG5cdCAgICB9XG5cdFxuXHQgICAgdmFyIHBhcnRzID0gW107XG5cdCAgICB2YXIgaSA9IDA7XG5cdCAgICB2YXIgcyA9IDA7XG5cdCAgICB2YXIgcCA9IHZvaWQgMDtcblx0ICAgIHdoaWxlICgocCA9IHN0ci5pbmRleE9mKHNlcGFyYXRvciwgcykpICE9PSAtMSAmJiAhbGltaXRlZChpKSkge1xuXHQgICAgICAgIHZhciBwYXJ0ID0gc3RyLnNsaWNlKHMsIHApO1xuXHQgICAgICAgIHZhciBlc2NhcGVkID0gZmFsc2U7XG5cdCAgICAgICAgaWYgKGVzY2FwZUNoYXIgJiYgcGFydC5zbGljZSgtMSkgPT09IGVzY2FwZUNoYXIpIHtcblx0ICAgICAgICAgICAgcGFydCA9IHBhcnQuc2xpY2UoMCwgLTEpO1xuXHQgICAgICAgICAgICBlc2NhcGVkID0gcGFydC5zbGljZSgtMSkgIT09IGVzY2FwZUNoYXI7XG5cdCAgICAgICAgICAgIGlmIChlc2NhcGVkKSBwYXJ0ICs9IHNlcGFyYXRvcjtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcGFydHNbaV0gPSAocGFydHNbaV0gfHwgJycpICsgcGFydDtcblx0ICAgICAgICBzID0gcCArIDE7XG5cdCAgICAgICAgaWYgKCFlc2NhcGVkKSBpKys7XG5cdCAgICB9XG5cdCAgICBpZiAocyA8PSBzdHIubGVuZ3RoKSBwYXJ0c1tpXSA9IChwYXJ0c1tpXSB8fCAnJykgKyBzdHIuc2xpY2Uocyk7XG5cdFxuXHQgICAgcmV0dXJuIHBhcnRzO1xuXHR9O1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gJC5zcGxpdDtcblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oMSkpKVxuXG4vKioqLyB9LFxuLyogNTkgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbigkKSB7J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfc2xpY2VkVG9BcnJheTIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYwKTtcblx0XG5cdHZhciBfc2xpY2VkVG9BcnJheTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zbGljZWRUb0FycmF5Mik7XG5cdFxuXHR2YXIgX2dldEl0ZXJhdG9yMiA9IF9fd2VicGFja19yZXF1aXJlX18oNDMpO1xuXHRcblx0dmFyIF9nZXRJdGVyYXRvcjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRJdGVyYXRvcjIpO1xuXHRcblx0X193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdC8qKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gcXVlcnlTdHJpbmdcblx0ICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuXHQgKiBAcmV0dXJuIHtPYmplY3R9XG5cdCAqL1xuXHQkLnBhcnNlUXVlcnlTdHJpbmcgPSBmdW5jdGlvbiAocXVlcnlTdHJpbmcsIG9wdGlvbnMpIHtcblx0ICAgIGlmICh0eXBlb2YgcXVlcnlTdHJpbmcgIT09ICdzdHJpbmcnIHx8IHF1ZXJ5U3RyaW5nID09PSAnJykge1xuXHQgICAgICAgIHJldHVybiB7fTtcblx0ICAgIH1cblx0ICAgIHZhciBwYWlycyA9IHF1ZXJ5U3RyaW5nLnNwbGl0KC8mYW1wO3wmL2kpO1xuXHQgICAgaWYgKCEkLmlzUGxhaW5PYmplY3Qob3B0aW9ucykpIG9wdGlvbnMgPSB7fTtlbHNlIGlmIChvcHRpb25zLmV4Y2VwdCAmJiAhJC5pc0FycmF5KG9wdGlvbnMuZXhjZXB0KSkgb3B0aW9ucy5leGNlcHQgPSBbb3B0aW9ucy5leGNlcHRdO1xuXHQgICAgdmFyIG8gPSB7fTtcblx0ICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZTtcblx0ICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlO1xuXHQgICAgdmFyIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuXHRcblx0ICAgIHRyeSB7XG5cdCAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yID0gKDAsIF9nZXRJdGVyYXRvcjMuZGVmYXVsdCkocGFpcnMpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKSB7XG5cdCAgICAgICAgICAgIHZhciBwYWlyID0gX3N0ZXAudmFsdWU7XG5cdFxuXHQgICAgICAgICAgICB2YXIgX3BhaXIkc3BsaXQgPSBwYWlyLnNwbGl0KCc9Jyk7XG5cdFxuXHQgICAgICAgICAgICB2YXIgX3BhaXIkc3BsaXQyID0gKDAsIF9zbGljZWRUb0FycmF5My5kZWZhdWx0KShfcGFpciRzcGxpdCwgMik7XG5cdFxuXHQgICAgICAgICAgICB2YXIgbmFtZSA9IF9wYWlyJHNwbGl0MlswXTtcblx0ICAgICAgICAgICAgdmFyIHZhbHVlID0gX3BhaXIkc3BsaXQyWzFdO1xuXHRcblx0ICAgICAgICAgICAgbmFtZSA9IGRlY29kZVVSSUNvbXBvbmVudChuYW1lKTtcblx0ICAgICAgICAgICAgdmFsdWUgPSBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpO1xuXHQgICAgICAgICAgICBpZiAob3B0aW9ucy5leGNlcHQgPT0gbnVsbCB8fCAhb3B0aW9ucy5leGNlcHQuY29udGFpbnMobmFtZSkpICQub2JqLnNldCh0cnVlLCBvLCBuYW1lLCB2YWx1ZSk7XG5cdCAgICAgICAgfVxuXHQgICAgfSBjYXRjaCAoZXJyKSB7XG5cdCAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuXHQgICAgICAgIF9pdGVyYXRvckVycm9yID0gZXJyO1xuXHQgICAgfSBmaW5hbGx5IHtcblx0ICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybikge1xuXHQgICAgICAgICAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSBmaW5hbGx5IHtcblx0ICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yKSB7XG5cdCAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH1cblx0XG5cdCAgICByZXR1cm4gbztcblx0fTtcblx0XG5cdGV4cG9ydHMuZGVmYXVsdCA9ICQucGFyc2VRdWVyeVN0cmluZztcblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oMSkpKVxuXG4vKioqLyB9LFxuLyogNjAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0dmFyIF9pc0l0ZXJhYmxlMiA9IF9fd2VicGFja19yZXF1aXJlX18oNjEpO1xuXHRcblx0dmFyIF9pc0l0ZXJhYmxlMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzSXRlcmFibGUyKTtcblx0XG5cdHZhciBfZ2V0SXRlcmF0b3IyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0Myk7XG5cdFxuXHR2YXIgX2dldEl0ZXJhdG9yMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldEl0ZXJhdG9yMik7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gKGZ1bmN0aW9uICgpIHtcblx0ICBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkge1xuXHQgICAgdmFyIF9hcnIgPSBbXTtcblx0ICAgIHZhciBfbiA9IHRydWU7XG5cdCAgICB2YXIgX2QgPSBmYWxzZTtcblx0ICAgIHZhciBfZSA9IHVuZGVmaW5lZDtcblx0XG5cdCAgICB0cnkge1xuXHQgICAgICBmb3IgKHZhciBfaSA9ICgwLCBfZ2V0SXRlcmF0b3IzLmRlZmF1bHQpKGFyciksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7XG5cdCAgICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTtcblx0XG5cdCAgICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrO1xuXHQgICAgICB9XG5cdCAgICB9IGNhdGNoIChlcnIpIHtcblx0ICAgICAgX2QgPSB0cnVlO1xuXHQgICAgICBfZSA9IGVycjtcblx0ICAgIH0gZmluYWxseSB7XG5cdCAgICAgIHRyeSB7XG5cdCAgICAgICAgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSkgX2lbXCJyZXR1cm5cIl0oKTtcblx0ICAgICAgfSBmaW5hbGx5IHtcblx0ICAgICAgICBpZiAoX2QpIHRocm93IF9lO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdFxuXHQgICAgcmV0dXJuIF9hcnI7XG5cdCAgfVxuXHRcblx0ICByZXR1cm4gZnVuY3Rpb24gKGFyciwgaSkge1xuXHQgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkge1xuXHQgICAgICByZXR1cm4gYXJyO1xuXHQgICAgfSBlbHNlIGlmICgoMCwgX2lzSXRlcmFibGUzLmRlZmF1bHQpKE9iamVjdChhcnIpKSkge1xuXHQgICAgICByZXR1cm4gc2xpY2VJdGVyYXRvcihhcnIsIGkpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7XG5cdCAgICB9XG5cdCAgfTtcblx0fSkoKTtcblx0XG5cdGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbi8qKiovIH0sXG4vKiA2MSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDYyKSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG4vKioqLyB9LFxuLyogNjIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdF9fd2VicGFja19yZXF1aXJlX18oNDUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDUyKTtcblx0bW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYzKTtcblxuLyoqKi8gfSxcbi8qIDYzICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHR2YXIgY2xhc3NvZiAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1Nylcblx0ICAsIElURVJBVE9SICA9IF9fd2VicGFja19yZXF1aXJlX18oMjkpKCdpdGVyYXRvcicpXG5cdCAgLCBJdGVyYXRvcnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ5KTtcblx0bW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxKS5pc0l0ZXJhYmxlID0gZnVuY3Rpb24oaXQpe1xuXHQgIHZhciBPID0gT2JqZWN0KGl0KTtcblx0ICByZXR1cm4gT1tJVEVSQVRPUl0gIT09IHVuZGVmaW5lZFxuXHQgICAgfHwgJ0BAaXRlcmF0b3InIGluIE9cblx0ICAgIHx8IEl0ZXJhdG9ycy5oYXNPd25Qcm9wZXJ0eShjbGFzc29mKE8pKTtcblx0fTtcblxuLyoqKi8gfSxcbi8qIDY0ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24oJCkgeyd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXHRcblx0LyoqXG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gZGF0YUFuZEV2ZW50c1xuXHQgKiBAcGFyYW0ge2Jvb2xlYW59IGRlZXBEYXRhQW5kRXZlbnRzXG5cdCAqIEByZXR1cm4ge2pRdWVyeTxIVE1MRWxlbWVudD59XG5cdCAqL1xuXHQkLmZuLnJlY2xvbmUgPSBmdW5jdGlvbiAoZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMpIHtcblx0ICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIG9sZEVsZW0gPSAkKHRoaXMpO1xuXHQgICAgICAgIHZhciBuZXdFbGVtID0gb2xkRWxlbS5jbG9uZShkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyk7XG5cdCAgICAgICAgbmV3RWxlbS5pbnNlcnRBZnRlcih0aGlzKTtcblx0ICAgICAgICBvbGRFbGVtLnJlbW92ZSgpO1xuXHQgICAgICAgIHJldHVybiBuZXdFbGVtWzBdO1xuXHQgICAgfSk7XG5cdH07XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSAkLmZuLnJlY2xvbmU7XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSlcblxuLyoqKi8gfSxcbi8qIDY1ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24oJCkgeyd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX2dldEl0ZXJhdG9yMiA9IF9fd2VicGFja19yZXF1aXJlX18oNDMpO1xuXHRcblx0dmFyIF9nZXRJdGVyYXRvcjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRJdGVyYXRvcjIpO1xuXHRcblx0X193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHQvKipcblx0ICogQHBhcmFtIHtzdHJpbmd9IHByZWZpeFxuXHQgKiBAcGFyYW0ge0FycmF5PHtuYW1lLHZhbHVlfT59IHBhcmFtc1xuXHQgKiBAcmV0dXJuIHtudW1iZXJ9IGxlbmd0aCBvZiBwYXJhbWV0ZXJzXG5cdCAqL1xuXHQkLnJlaW5kZXhBcnJheVBhcmFtcyA9IGZ1bmN0aW9uIChwcmVmaXgsIHBhcmFtcykge1xuXHQgICAgdmFyIHJlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgcHJlZml4LnJlcGxhY2UoJy4nLCAnXFxcXC4nKSArICcpXFxcXFsoXFxcXGQrKVxcXFxdJyk7XG5cdCAgICB2YXIgcHJldkluZGV4ID0gbnVsbDtcblx0ICAgIHZhciBpbmRleCA9IC0xO1xuXHQgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlO1xuXHQgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2U7XG5cdCAgICB2YXIgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG5cdFxuXHQgICAgdHJ5IHtcblx0ICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSAoMCwgX2dldEl0ZXJhdG9yMy5kZWZhdWx0KShwYXJhbXMpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKSB7XG5cdCAgICAgICAgICAgIHZhciBwYXJhbSA9IF9zdGVwLnZhbHVlO1xuXHRcblx0ICAgICAgICAgICAgdmFyIHJlc3VsdHMgPSByZWdleC5leGVjKHBhcmFtLm5hbWUpO1xuXHQgICAgICAgICAgICBpZiAocmVzdWx0cykge1xuXHQgICAgICAgICAgICAgICAgdmFyIGN1cnJJbmRleCA9IHJlc3VsdHNbMl07XG5cdCAgICAgICAgICAgICAgICBpZiAocHJldkluZGV4ICE9PSBjdXJySW5kZXgpIHtcblx0ICAgICAgICAgICAgICAgICAgICBwcmV2SW5kZXggPSBjdXJySW5kZXg7XG5cdCAgICAgICAgICAgICAgICAgICAgaW5kZXgrKztcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIHBhcmFtLm5hbWUgPSBwYXJhbS5uYW1lLnJlcGxhY2UocmVnZXgsICckMVsnICsgaW5kZXggKyAnXScpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfSBjYXRjaCAoZXJyKSB7XG5cdCAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuXHQgICAgICAgIF9pdGVyYXRvckVycm9yID0gZXJyO1xuXHQgICAgfSBmaW5hbGx5IHtcblx0ICAgICAgICB0cnkge1xuXHQgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybikge1xuXHQgICAgICAgICAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSBmaW5hbGx5IHtcblx0ICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yKSB7XG5cdCAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH1cblx0XG5cdCAgICByZXR1cm4gaW5kZXg7XG5cdH07XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSAkLnJlaW5kZXhBcnJheVBhcmFtcztcblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oMSkpKVxuXG4vKioqLyB9LFxuLyogNjYgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbigkKSB7J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gJC5mbi5yZXZlcnNlID0gQXJyYXkucHJvdG90eXBlLnJldmVyc2U7XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSlcblxuLyoqKi8gfSxcbi8qIDY3ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24oJCkgeyd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXHRcblx0LyoqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG5cdCAqIEByZXR1cm4ge09iamVjdH1cblx0ICovXG5cdCQuZm4uc2VyaWFsaXplT2JqZWN0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcblx0ICAgIGlmICghJC5pc1BsYWluT2JqZWN0KG9wdGlvbnMpKSBvcHRpb25zID0ge307ZWxzZSBpZiAob3B0aW9ucy5leGNlcHQgJiYgISQuaXNBcnJheShvcHRpb25zLmV4Y2VwdCkpIG9wdGlvbnMuZXhjZXB0ID0gW29wdGlvbnMuZXhjZXB0XTtcblx0ICAgIHZhciByZXN1bHQgPSB7fTtcblx0ICAgICQuZWFjaCh0aGlzLnNlcmlhbGl6ZUFycmF5KCksIGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBpZiAob3B0aW9ucy5leGNlcHQgPT0gbnVsbCB8fCAhb3B0aW9ucy5leGNlcHQuY29udGFpbnModGhpcy5uYW1lKSkge1xuXHQgICAgICAgICAgICBpZiAodGhpcy5uYW1lIGluIHJlc3VsdCkge1xuXHQgICAgICAgICAgICAgICAgaWYgKCEkLmlzQXJyYXkocmVzdWx0W3RoaXMubmFtZV0pKSByZXN1bHRbdGhpcy5uYW1lXSA9IFtyZXN1bHRbdGhpcy5uYW1lXSwgdGhpcy52YWx1ZV07ZWxzZSByZXN1bHRbdGhpcy5uYW1lXS5wdXNoKHRoaXMudmFsdWUpO1xuXHQgICAgICAgICAgICB9IGVsc2UgcmVzdWx0W3RoaXMubmFtZV0gPSB0aGlzLnZhbHVlO1xuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgcmV0dXJuIHJlc3VsdDtcblx0fTtcblx0XG5cdGV4cG9ydHMuZGVmYXVsdCA9ICQuZm4uc2VyaWFsaXplT2JqZWN0O1xuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXygxKSkpXG5cbi8qKiovIH0sXG4vKiA2OCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKCQpIHsndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0X193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblx0XG5cdC8qKlxuXHQgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gaXRlbXNcblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcblx0ICogQHBhcmFtIHsqfSBbY29udGV4dF1cblx0ICogQHJldHVybiB7Ym9vbGVhbn1cblx0ICovXG5cdCQuc29tZSA9IGZ1bmN0aW9uIChpdGVtcywgY2FsbGJhY2ssIGNvbnRleHQpIHtcblx0ICAgIGlmICghJC5pc0Z1bmN0aW9uKGNhbGxiYWNrKSkge1xuXHQgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoY2FsbGJhY2sgKyBcIiBpcyBub3QgYSBmdW5jdGlvblwiKTtcblx0ICAgIH1cblx0ICAgIGlmICgkLmlzQXJyYXkoaXRlbXMpKSB7XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICBpZiAoY2FsbGJhY2suY2FsbChjb250ZXh0IHx8IGl0ZW1zLCBpdGVtc1tpXSwgaSwgaXRlbXMpKSByZXR1cm4gdHJ1ZTtcblx0ICAgICAgICB9XG5cdCAgICB9IGVsc2UgaWYgKCQuaXNQbGFpbk9iamVjdChpdGVtcykpIHtcblx0ICAgICAgICBmb3IgKHZhciBrZXkgaW4gaXRlbXMpIHtcblx0ICAgICAgICAgICAgaWYgKGl0ZW1zLmhhc093blByb3BlcnR5KGtleSkpIHtcblx0ICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjay5jYWxsKGNvbnRleHQgfHwgaXRlbXMsIGl0ZW1zW2tleV0sIGtleSwgaXRlbXMpKSByZXR1cm4gdHJ1ZTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH0gZWxzZSB0aHJvdyBuZXcgVHlwZUVycm9yKGl0ZW1zICsgXCIgaXMgbm90IGFycmF5IG9yIHBsYWluIG9iamVjdFwiKTtcblx0XG5cdCAgICByZXR1cm4gZmFsc2U7XG5cdH07XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSAkLnNvbWU7XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSlcblxuLyoqKi8gfSxcbi8qIDY5ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24oZG9jdW1lbnQsICQpIHsndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cdFxuXHQvKipcblx0ICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcblx0ICogQHJldHVybiB7Ym9vbGVhbn1cblx0ICovXG5cdCQuc3VwcG9ydHNJbnB1dFR5cGUgPSBmdW5jdGlvbiAodHlwZSkge1xuXHQgIHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG5cdCAgaW5wdXQuc2V0QXR0cmlidXRlKCd0eXBlJywgdHlwZSk7XG5cdCAgcmV0dXJuIGlucHV0LnR5cGUgPT09IHR5cGU7XG5cdH07XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSAkLnN1cHBvcnRzSW5wdXRUeXBlO1xuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyg4KSwgX193ZWJwYWNrX3JlcXVpcmVfXygxKSkpXG5cbi8qKiovIH0sXG4vKiA3MCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKCQpIHsndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0X193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblx0XG5cdC8qKlxuXHQgKiBAcGFyYW0ge1hNTH0geG1sTm9kZSB0aGUgeG1sIG5vZGUuXG5cdCAqIEByZXR1cm4ge3N0cmluZ31cblx0ICovXG5cdCQueG1sVG9TdHJpbmcgPSBmdW5jdGlvbiAoeG1sTm9kZSkge1xuXHQgICAgdHJ5IHtcblx0ICAgICAgICByZXR1cm4gbmV3IFhNTFNlcmlhbGl6ZXIoKS5zZXJpYWxpemVUb1N0cmluZyh4bWxOb2RlKTtcblx0ICAgIH0gY2F0Y2ggKF9lcnJvcikge1xuXHQgICAgICAgIGlmICh4bWxOb2RlLnhtbCA9PSBudWxsKSB0aHJvdyBuZXcgRXJyb3IoXCJYTUxTZXJpYWxpemVyIG5vdCBzdXBwb3J0ZWRcIik7XG5cdFxuXHQgICAgICAgIHJldHVybiB4bWxOb2RlLnhtbDtcblx0ICAgIH1cblx0fTtcblx0XG5cdGV4cG9ydHMuZGVmYXVsdCA9ICQueG1sVG9TdHJpbmc7XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpKSlcblxuLyoqKi8gfVxuLyoqKioqKi8gXSlcbn0pO1xuO1xuIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGV4cG9ydHM6IHt9LFxuIFx0XHRcdGlkOiBtb2R1bGVJZCxcbiBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiB3ZWJwYWNrL2Jvb3RzdHJhcCBlOGU5Mzk2MTZhYTZjMmQ5ODFjMVxuICoqLyIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0ICcuL2ZpbmRCeU5hbWVzJ1xuaW1wb3J0ICcuL2dyb3VwQnknXG5pbXBvcnQgJy4vbWF4WkluZGV4J1xuaW1wb3J0ICcuL25leHRUaWNrJ1xuaW1wb3J0ICcuL29iaidcbmltcG9ydCAnLi9wYXJzZVF1ZXJ5U3RyaW5nJ1xuaW1wb3J0ICcuL3JlY2xvbmUnXG5pbXBvcnQgJy4vcmVpbmRleEFycmF5UGFyYW1zJ1xuaW1wb3J0ICcuL3JldmVyc2UnXG5pbXBvcnQgJy4vc2VyaWFsaXplT2JqZWN0J1xuaW1wb3J0ICcuL3NvbWUnXG5pbXBvcnQgJy4vc3BsaXQnXG5pbXBvcnQgJy4vc3VwcG9ydHNJbnB1dFR5cGUnXG5pbXBvcnQgJy4veG1sVG9TdHJpbmcnXG5cbmV4cG9ydCBkZWZhdWx0ICQ7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9pbmRleC5qc1xuICoqLyIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0ICQgZnJvbSAnanF1ZXJ5J1xuXG5pZiAoISQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJqUXVlcnkuZXh0ZW5kcyByZXF1aXJlcyBhIGpRdWVyeVwiKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSAkO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvdmFycy9qcXVlcnkuanNcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfMl9fO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogZXh0ZXJuYWwge1wicm9vdFwiOlwialF1ZXJ5XCIsXCJjb21tb25qc1wiOlwianF1ZXJ5XCIsXCJjb21tb25qczJcIjpcImpxdWVyeVwiLFwiYW1kXCI6XCJqcXVlcnlcIn1cbiAqKiBtb2R1bGUgaWQgPSAyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCAncHJvdG8uanMnXG5cbi8qKlxuICogQHBhcmFtIHtBcnJheTxzdHJpbmc+fSBuYW1lc1xuICogQHJldHVybiB7alF1ZXJ5PEhUTUxFbGVtZW50Pn1cbiAqL1xuJC5mbi5maW5kQnlOYW1lcyA9IGZ1bmN0aW9uKC4uLm5hbWVzKSB7XG4gICAgaWYgKG5hbWVzLmxlbmd0aCA9PT0gMCkgcmV0dXJuICQoW10pO1xuICAgIHJldHVybiB0aGlzLmZpbmQobmFtZXMubWFwKG5hbWUgPT4gJ1tuYW1lPVwiJyArIChuYW1lIHx8ICcnKS5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJykgKyAnXCJdJykuam9pbignLCcpKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0ICQuZm4uZmluZEJ5TmFtZXM7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9maW5kQnlOYW1lcy5qc1xuICoqLyIsIi8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSlcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9LFxuLyoqKioqKi8gXHRcdFx0aWQ6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bG9hZGVkOiBmYWxzZVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoW1xuLyogMCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0X193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cdFxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXHRcblx0X193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cdFxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXHRcblx0X193ZWJwYWNrX3JlcXVpcmVfXyg5KTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oMTApO1xuXHRcblx0X193ZWJwYWNrX3JlcXVpcmVfXygxMSk7XG5cdFxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHRcblx0X193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xuXHRcblx0X193ZWJwYWNrX3JlcXVpcmVfXygxMyk7XG5cdFxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDE0KTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oMTUpO1xuXHRcblx0X193ZWJwYWNrX3JlcXVpcmVfXygxNyk7XG5cdFxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oMTYpO1xuXHRcblx0X193ZWJwYWNrX3JlcXVpcmVfXygxOSk7XG5cdFxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDIwKTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oMjEpO1xuXHRcblx0X193ZWJwYWNrX3JlcXVpcmVfXygzMSk7XG5cdFxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDMyKTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oMzQpO1xuXHRcblx0X193ZWJwYWNrX3JlcXVpcmVfXygzNSk7XG5cdFxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDM2KTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oMzgpO1xuXHRcblx0X193ZWJwYWNrX3JlcXVpcmVfXygzOSk7XG5cdFxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDQwKTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oMzcpO1xuXHRcblx0X193ZWJwYWNrX3JlcXVpcmVfXyg0MSk7XG5cdFxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDQyKTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oNDMpO1xuXHRcblx0X193ZWJwYWNrX3JlcXVpcmVfXyg0NSk7XG5cdFxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDQ3KTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oNDgpO1xuXHRcblx0X193ZWJwYWNrX3JlcXVpcmVfXyg0NCk7XG5cdFxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDQ5KTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oNTApO1xuXHRcblx0X193ZWJwYWNrX3JlcXVpcmVfXyg1MSk7XG5cdFxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDQ2KTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oMzMpO1xuXG4vKioqLyB9LFxuLyogMSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHRcblx0aWYgKCFBcnJheS5wcm90b3R5cGUuY29udGFpbnMpIHtcblx0ICAgIC8qKlxuXHQgICAgICogQHBhcmFtIHsqfSBhXG5cdCAgICAgKiBAcmV0dXJuIHtib29sZWFufVxuXHQgICAgICovXG5cdCAgICBBcnJheS5wcm90b3R5cGUuY29udGFpbnMgPSBmdW5jdGlvbiAoYSkge1xuXHQgICAgICAgIHJldHVybiB0aGlzLmluZGV4T2YoYSkgPj0gMDtcblx0ICAgIH07XG5cdH1cblx0XG5cdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IEFycmF5LnByb3RvdHlwZS5jb250YWlucztcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiAyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0aWYgKCFBcnJheS5wcm90b3R5cGUuaW5kZXhPZikge1xuXHQgICAgLyoqXG5cdCAgICAgKiBAcGFyYW0geyp9IGl0ZW1cblx0ICAgICAqIEByZXR1cm4ge251bWJlcn1cblx0ICAgICAqL1xuXHQgICAgQXJyYXkucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiAoaXRlbSkge1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICBpZiAoaSBpbiB0aGlzICYmIHRoaXNbaV0gPT09IGl0ZW0pIHJldHVybiBpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gLTE7XG5cdCAgICB9O1xuXHR9XG5cdFxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBBcnJheS5wcm90b3R5cGUuaW5kZXhPZjtcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiAzICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0aWYgKCFBcnJheS5wcm90b3R5cGUuZXZlcnkpIHtcblx0ICAgIC8qKlxuXHQgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcblx0ICAgICAqIEBwYXJhbSB7Kn0gW2NvbnRleHRdXG5cdCAgICAgKiBAcmV0dXJuIHtib29sZWFufVxuXHQgICAgICovXG5cdCAgICBBcnJheS5wcm90b3R5cGUuZXZlcnkgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIGNvbnRleHQpIHtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgaWYgKCFjYWxsYmFjay5jYWxsKGNvbnRleHQgfHwgdGhpcywgdGhpc1tpXSwgaSwgdGhpcykpIHJldHVybiBmYWxzZTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICB9O1xuXHR9XG5cdFxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBBcnJheS5wcm90b3R5cGUuZXZlcnk7XG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogNCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXHRcblx0aWYgKCFBcnJheS5wcm90b3R5cGUuZmlsdGVyKSB7XG5cdCAgICAvKipcblx0ICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG5cdCAgICAgKiBAcGFyYW0geyp9IFtjb250ZXh0XVxuXHQgICAgICogQHJldHVybiB7QXJyYXl9XG5cdCAgICAgKi9cblx0ICAgIEFycmF5LnByb3RvdHlwZS5maWx0ZXIgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIGNvbnRleHQpIHtcblx0ICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXHRcblx0ICAgICAgICByZXR1cm4gdGhpcy5mbGF0TWFwKGZ1bmN0aW9uIChhLCBpKSB7XG5cdCAgICAgICAgICAgIGlmIChjYWxsYmFjay5jYWxsKGNvbnRleHQgfHwgX3RoaXMsIGEsIGksIF90aGlzKSkgcmV0dXJuIGE7XG5cdCAgICAgICAgfSk7XG5cdCAgICB9O1xuXHR9XG5cdFxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBBcnJheS5wcm90b3R5cGUuZmlsdGVyO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSxcbi8qIDUgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0X193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblx0XG5cdGlmICghQXJyYXkucHJvdG90eXBlLmZsYXRNYXApIHtcblx0ICAgIC8qKlxuXHQgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcblx0ICAgICAqIEBwYXJhbSB7Kn0gW2NvbnRleHRdXG5cdCAgICAgKiBAcmV0dXJuIEFycmF5XG5cdCAgICAgKi9cblx0ICAgIEFycmF5LnByb3RvdHlwZS5mbGF0TWFwID0gZnVuY3Rpb24gKGNhbGxiYWNrLCBjb250ZXh0KSB7XG5cdCAgICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGNhbGxiYWNrLmNhbGwoY29udGV4dCB8fCB0aGlzLCB0aGlzW2ldLCBpLCB0aGlzKTtcblx0ICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmVzdWx0KSkgcmVzdWx0cy5wdXNoLmFwcGx5KHJlc3VsdHMsIHJlc3VsdCk7ZWxzZSBpZiAocmVzdWx0KSByZXN1bHRzLnB1c2gocmVzdWx0KTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG5cdCAgICB9O1xuXHR9XG5cdFxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBBcnJheS5wcm90b3R5cGUuZmxhdE1hcDtcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiA2ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0aWYgKCFBcnJheS5pc0FycmF5KSB7XG5cdCAgICAvKipcblx0ICAgICAqIEBwYXJhbSB7Kn0gb2JqXG5cdCAgICAgKiBAc3RhdGljXG5cdCAgICAgKiBAcmV0dXJuIHtib29sZWFufVxuXHQgICAgICovXG5cdCAgICBBcnJheS5pc0FycmF5ID0gZnVuY3Rpb24gKG9iaikge1xuXHQgICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcblx0ICAgIH07XG5cdH1cblx0XG5cdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IEFycmF5LmlzQXJyYXk7XG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogNyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdGlmICghQXJyYXkucHJvdG90eXBlLmZpcnN0KSB7XG5cdCAgICBBcnJheS5wcm90b3R5cGUuZmlyc3QgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXNbMF07XG5cdCAgICB9O1xuXHR9XG5cdFxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBBcnJheS5wcm90b3R5cGUuZmlyc3Q7XG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogOCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdGlmICghQXJyYXkucHJvdG90eXBlLmdyb3VwQnkpIHtcblx0ICAgIC8qKlxuXHQgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcblx0ICAgICAqIEBwYXJhbSB7Kn0gW2NvbnRleHRdXG5cdCAgICAgKiBAcmV0dXJuIHt7fX1cblx0ICAgICAqL1xuXHQgICAgQXJyYXkucHJvdG90eXBlLmdyb3VwQnkgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIGNvbnRleHQpIHtcblx0ICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihjYWxsYmFjayArIFwiIGlzIG5vdCBhIGZ1bmN0aW9uXCIpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB2YXIgcmVzdWx0ID0ge307XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgIHZhciB2YWx1ZSA9IHRoaXNbaV07XG5cdCAgICAgICAgICAgIHZhciBrZXkgPSBjYWxsYmFjay5jYWxsKGNvbnRleHQgfHwgdGhpcywgdmFsdWUsIGksIHRoaXMpO1xuXHQgICAgICAgICAgICBpZiAoa2V5ICE9IG51bGwpIHtcblx0ICAgICAgICAgICAgICAgIGlmIChrZXkgaW4gcmVzdWx0KSByZXN1bHRba2V5XS5wdXNoKHZhbHVlKTtlbHNlIHJlc3VsdFtrZXldID0gW3ZhbHVlXTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gcmVzdWx0O1xuXHQgICAgfTtcblx0fVxuXHRcblx0ZXhwb3J0c1snZGVmYXVsdCddID0gQXJyYXkucHJvdG90eXBlLmdyb3VwQnk7XG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogOSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdGlmICghQXJyYXkucHJvdG90eXBlLmdyb3VwZWQpIHtcblx0ICAgIC8qKlxuXHQgICAgICogQHBhcmFtIHtudW1iZXJ9IHNpemVcblx0ICAgICAqIEByZXR1cm4ge0FycmF5PEFycmF5Pn1cblx0ICAgICAqL1xuXHQgICAgQXJyYXkucHJvdG90eXBlLmdyb3VwZWQgPSBmdW5jdGlvbiAoc2l6ZSkge1xuXHQgICAgICAgIHZhciByZXN1bHRzID0gW107XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSBzaXplKSB7XG5cdCAgICAgICAgICAgIHJlc3VsdHMucHVzaCh0aGlzLnNsaWNlKGksIGkgKyBzaXplKSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiByZXN1bHRzO1xuXHQgICAgfTtcblx0fVxuXHRcblx0ZXhwb3J0c1snZGVmYXVsdCddID0gQXJyYXkucHJvdG90eXBlLmdyb3VwZWQ7XG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogMTAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRpZiAoIUFycmF5LnByb3RvdHlwZS5ncm91cGVkUmlnaHQpIHtcblx0ICAgIC8qKlxuXHQgICAgICogQHBhcmFtIHtudW1iZXJ9IHNpemVcblx0ICAgICAqIEByZXR1cm4ge0FycmF5PEFycmF5Pn1cblx0ICAgICAqL1xuXHQgICAgQXJyYXkucHJvdG90eXBlLmdyb3VwZWRSaWdodCA9IGZ1bmN0aW9uIChzaXplKSB7XG5cdCAgICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcblx0ICAgICAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGg7IGkgPiAwOyBpIC09IHNpemUpIHtcblx0ICAgICAgICAgICAgcmVzdWx0cy5wdXNoKHRoaXMuc2xpY2UoTWF0aC5tYXgoMCwgaSAtIHNpemUpLCBpKSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiByZXN1bHRzLnJldmVyc2UoKTtcblx0ICAgIH07XG5cdH1cblx0XG5cdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IEFycmF5LnByb3RvdHlwZS5ncm91cGVkUmlnaHQ7XG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogMTEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0X193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblx0XG5cdGlmICghQXJyYXkucHJvdG90eXBlLmluY2x1ZGUpIHtcblx0ICAgIEFycmF5LnByb3RvdHlwZS5pbmNsdWRlID0gZnVuY3Rpb24gKGEpIHtcblx0ICAgICAgICB2YXIgaSA9IHRoaXMuaW5kZXhPZihhKTtcblx0ICAgICAgICBpZiAoaSA+IC0xKSB0aGlzW2ldID0gYTtlbHNlIHRoaXMucHVzaChhKTtcblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdH1cblx0XG5cdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IEFycmF5LnByb3RvdHlwZS5pbmNsdWRlO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSxcbi8qIDEyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0aWYgKCFBcnJheS5wcm90b3R5cGUuam9pblBhdGhzKSB7XG5cdCAgICBBcnJheS5wcm90b3R5cGUuam9pblBhdGhzID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHZhciBwYXRoID0gJyc7XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgIGlmICh0aGlzW2ldKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAocGF0aC5sZW5ndGggPiAwICYmIHBhdGguY2hhckF0KHBhdGgubGVuZ3RoIC0gMSkgIT09ICcvJykgcGF0aCArPSAnLyc7XG5cdFxuXHQgICAgICAgICAgICAgICAgcGF0aCArPSB0aGlzW2ldLnRvU3RyaW5nKCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHBhdGg7XG5cdCAgICB9O1xuXHR9XG5cdFxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBBcnJheS5wcm90b3R5cGUuam9pblBhdGhzO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSxcbi8qIDEzICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0aWYgKCFBcnJheS5wcm90b3R5cGUubGFzdCkge1xuXHQgICAgQXJyYXkucHJvdG90eXBlLmxhc3QgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXNbdGhpcy5sZW5ndGggLSAxXTtcblx0ICAgIH07XG5cdH1cblx0XG5cdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IEFycmF5LnByb3RvdHlwZS5sYXN0O1xuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSxcbi8qIDE0ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0aWYgKCFBcnJheS5wcm90b3R5cGUubWFwKSB7XG5cdCAgICAvKipcblx0ICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG5cdCAgICAgKiBAcGFyYW0geyp9IFtjb250ZXh0XVxuXHQgICAgICovXG5cdCAgICBBcnJheS5wcm90b3R5cGUubWFwID0gZnVuY3Rpb24gKGNhbGxiYWNrLCBjb250ZXh0KSB7XG5cdCAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IHRoaXMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgcmVzdWx0LnB1c2goY2FsbGJhY2suY2FsbChjb250ZXh0IHx8IHRoaXMsIHRoaXNbaV0sIGksIHRoaXMpKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHJlc3VsdDtcblx0ICAgIH07XG5cdH1cblx0XG5cdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IEFycmF5LnByb3RvdHlwZS5tYXA7XG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogMTUgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0X193ZWJwYWNrX3JlcXVpcmVfXygxNik7XG5cdFxuXHRpZiAoIUFycmF5LnByb3RvdHlwZS5tYXgpIHtcblx0ICAgIEFycmF5LnByb3RvdHlwZS5tYXggPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBhID4gYiA/IGEgOiBiO1xuXHQgICAgICAgIH0pO1xuXHQgICAgfTtcblx0fVxuXHRcblx0ZXhwb3J0c1snZGVmYXVsdCddID0gQXJyYXkucHJvdG90eXBlLm1heDtcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiAxNiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0aWYgKCFBcnJheS5wcm90b3R5cGUucmVkdWNlKSB7XG5cdCAgICAvKipcblx0ICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG5cdCAgICAgKiBAcGFyYW0geyp9IFtjb250ZXh0XVxuXHQgICAgICogQHJldHVybiB7Kn1cblx0ICAgICAqL1xuXHQgICAgQXJyYXkucHJvdG90eXBlLnJlZHVjZSA9IGZ1bmN0aW9uIChjYWxsYmFjaywgY29udGV4dCkge1xuXHQgICAgICAgIGlmICghKHRoaXMubGVuZ3RoID4gMCkpIHtcblx0ICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlJlZHVjZSBvZiBlbXB0eSBhcnJheSB3aXRoIG5vIGluaXRpYWwgdmFsdWVcIik7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHZhciByZXN1bHQgPSB0aGlzWzBdO1xuXHQgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IHRoaXMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgcmVzdWx0ID0gY2FsbGJhY2suY2FsbChjb250ZXh0IHx8IHRoaXMsIHJlc3VsdCwgdGhpc1tpXSwgaSwgdGhpcyk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiByZXN1bHQ7XG5cdCAgICB9O1xuXHR9XG5cdFxuXHRleHBvcnRzW1wiZGVmYXVsdFwiXSA9IEFycmF5LnByb3RvdHlwZS5yZWR1Y2U7XG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07XG5cbi8qKiovIH0sXG4vKiAxNyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KTtcblx0XG5cdGlmICghQXJyYXkucHJvdG90eXBlLm1pbikge1xuXHQgICAgQXJyYXkucHJvdG90eXBlLm1pbiA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGEgPCBiID8gYSA6IGI7XG5cdCAgICAgICAgfSk7XG5cdCAgICB9O1xuXHR9XG5cdFxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBBcnJheS5wcm90b3R5cGUubWluO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSxcbi8qIDE4ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0aWYgKCFBcnJheS5yYW5nZSkge1xuXHQgICAgLyoqXG5cdCAgICAgKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IGZyb21cblx0ICAgICAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30gdG9cblx0ICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGVwXG5cdCAgICAgKiBAc3RhdGljXG5cdCAgICAgKiBAcmV0dXJuIHtBcnJheX1cblx0ICAgICAqL1xuXHQgICAgQXJyYXkucmFuZ2UgPSBmdW5jdGlvbiAoZnJvbSwgdG8pIHtcblx0ICAgICAgICB2YXIgc3RlcCA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMiB8fCBhcmd1bWVudHNbMl0gPT09IHVuZGVmaW5lZCA/IDEgOiBhcmd1bWVudHNbMl07XG5cdFxuXHQgICAgICAgIHZhciByYW5nZSA9IFtdO1xuXHQgICAgICAgIHZhciBpc051bWJlciA9IHR5cGVvZiBmcm9tID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgdG8gPT09ICdudW1iZXInO1xuXHQgICAgICAgIHZhciBiZWdpbiA9IGlzTnVtYmVyID8gZnJvbSA6IGZyb20udG9TdHJpbmcoKS5jaGFyQ29kZUF0KDApO1xuXHQgICAgICAgIHZhciBlbmQgPSBpc051bWJlciA/IHRvIDogdG8udG9TdHJpbmcoKS5jaGFyQ29kZUF0KDApO1xuXHQgICAgICAgIHN0ZXAgPSBNYXRoLmFicyhzdGVwKSB8fCAxO1xuXHQgICAgICAgIGlmIChiZWdpbiA+IGVuZCkgc3RlcCA9IC1zdGVwO1xuXHQgICAgICAgIGZvciAodmFyIGkgPSBiZWdpbjsgc3RlcCA+IDAgPyBpIDw9IGVuZCA6IGkgPj0gZW5kOyBpICs9IHN0ZXApIHtcblx0ICAgICAgICAgICAgcmFuZ2UucHVzaChpc051bWJlciA/IGkgOiBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHJhbmdlO1xuXHQgICAgfTtcblx0fVxuXHRcblx0ZXhwb3J0c1snZGVmYXVsdCddID0gQXJyYXkucmFuZ2U7XG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogMTkgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRpZiAoIUFycmF5LnByb3RvdHlwZS5yZW1vdmUpIHtcblx0ICAgIEFycmF5LnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAoYSkge1xuXHQgICAgICAgIGZvciAodmFyIGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG5cdCAgICAgICAgICAgIGlmICh0aGlzW2ldID09PSBhKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLnNwbGljZShpLCAxKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gdGhpcztcblx0ICAgIH07XG5cdH1cblx0XG5cdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IEFycmF5LnByb3RvdHlwZS5yZW1vdmU7XG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogMjAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRpZiAoIUFycmF5LnByb3RvdHlwZS5zb21lKSB7XG5cdCAgICAvKipcblx0ICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG5cdCAgICAgKiBAcGFyYW0geyp9IFtjb250ZXh0XVxuXHQgICAgICogQHJldHVybiB7Ym9vbGVhbn1cblx0ICAgICAqL1xuXHQgICAgQXJyYXkucHJvdG90eXBlLnNvbWUgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIGNvbnRleHQpIHtcblx0ICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihjYWxsYmFjayArIFwiIGlzIG5vdCBhIGZ1bmN0aW9uXCIpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgaWYgKGNhbGxiYWNrLmNhbGwoY29udGV4dCB8fCB0aGlzLCB0aGlzW2ldLCBpLCB0aGlzKSkgcmV0dXJuIHRydWU7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiBmYWxzZTtcblx0ICAgIH07XG5cdH1cblx0XG5cdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IEFycmF5LnByb3RvdHlwZS5zb21lO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSxcbi8qIDIxICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHR2YXIgX1JlZ0V4cCRlc2NhcGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIyKVsnZGVmYXVsdCddO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdGlmICghX1JlZ0V4cCRlc2NhcGUpIHtcblx0ICAgIC8qKlxuXHQgICAgICogQHBhcmFtIHtTdHJpbmd9IHRleHRcblx0ICAgICAqIEBzdGF0aWNcblx0ICAgICAqIEByZXR1cm4ge1N0cmluZ31cblx0ICAgICAqL1xuXHQgICAgUmVnRXhwLmVzY2FwZSA9IGZ1bmN0aW9uICh0ZXh0KSB7XG5cdCAgICAgICAgcmV0dXJuIHRleHQucmVwbGFjZSgvWy1bXFxde30oKSorPy4sXFxcXF4kfCNcXHNdL2csICdcXFxcJCYnKTtcblx0ICAgIH07XG5cdH1cblx0XG5cdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IF9SZWdFeHAkZXNjYXBlO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSxcbi8qIDIyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IF9fd2VicGFja19yZXF1aXJlX18oMjMpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cbi8qKiovIH0sXG4vKiAyMyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0X193ZWJwYWNrX3JlcXVpcmVfXygyNCk7XG5cdG1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNykuUmVnRXhwLmVzY2FwZTtcblxuLyoqKi8gfSxcbi8qIDI0ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQvLyBodHRwczovL2dpdGh1Yi5jb20vYmVuamFtaW5nci9SZXhFeHAuZXNjYXBlXG5cdHZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNSlcblx0ICAsICRyZSAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMwKSgvW1xcXFxeJCorPy4oKXxbXFxde31dL2csICdcXFxcJCYnKTtcblx0XG5cdCRleHBvcnQoJGV4cG9ydC5TLCAnUmVnRXhwJywge2VzY2FwZTogZnVuY3Rpb24gZXNjYXBlKGl0KXsgcmV0dXJuICRyZShpdCk7IH19KTtcblxuXG4vKioqLyB9LFxuLyogMjUgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdHZhciBnbG9iYWwgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI2KVxuXHQgICwgY29yZSAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNylcblx0ICAsIGN0eCAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjgpXG5cdCAgLCBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblx0XG5cdHZhciAkZXhwb3J0ID0gZnVuY3Rpb24odHlwZSwgbmFtZSwgc291cmNlKXtcblx0ICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRlxuXHQgICAgLCBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HXG5cdCAgICAsIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlNcblx0ICAgICwgSVNfUFJPVE8gID0gdHlwZSAmICRleHBvcnQuUFxuXHQgICAgLCBJU19CSU5EICAgPSB0eXBlICYgJGV4cG9ydC5CXG5cdCAgICAsIElTX1dSQVAgICA9IHR5cGUgJiAkZXhwb3J0Lldcblx0ICAgICwgZXhwb3J0cyAgID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSlcblx0ICAgICwgdGFyZ2V0ICAgID0gSVNfR0xPQkFMID8gZ2xvYmFsIDogSVNfU1RBVElDID8gZ2xvYmFsW25hbWVdIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXVxuXHQgICAgLCBrZXksIG93biwgb3V0O1xuXHQgIGlmKElTX0dMT0JBTClzb3VyY2UgPSBuYW1lO1xuXHQgIGZvcihrZXkgaW4gc291cmNlKXtcblx0ICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZVxuXHQgICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYga2V5IGluIHRhcmdldDtcblx0ICAgIGlmKG93biAmJiBrZXkgaW4gZXhwb3J0cyljb250aW51ZTtcblx0ICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG5cdCAgICBvdXQgPSBvd24gPyB0YXJnZXRba2V5XSA6IHNvdXJjZVtrZXldO1xuXHQgICAgLy8gcHJldmVudCBnbG9iYWwgcG9sbHV0aW9uIGZvciBuYW1lc3BhY2VzXG5cdCAgICBleHBvcnRzW2tleV0gPSBJU19HTE9CQUwgJiYgdHlwZW9mIHRhcmdldFtrZXldICE9ICdmdW5jdGlvbicgPyBzb3VyY2Vba2V5XVxuXHQgICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHRcblx0ICAgIDogSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpXG5cdCAgICAvLyB3cmFwIGdsb2JhbCBjb25zdHJ1Y3RvcnMgZm9yIHByZXZlbnQgY2hhbmdlIHRoZW0gaW4gbGlicmFyeVxuXHQgICAgOiBJU19XUkFQICYmIHRhcmdldFtrZXldID09IG91dCA/IChmdW5jdGlvbihDKXtcblx0ICAgICAgdmFyIEYgPSBmdW5jdGlvbihwYXJhbSl7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBDID8gbmV3IEMocGFyYW0pIDogQyhwYXJhbSk7XG5cdCAgICAgIH07XG5cdCAgICAgIEZbUFJPVE9UWVBFXSA9IENbUFJPVE9UWVBFXTtcblx0ICAgICAgcmV0dXJuIEY7XG5cdCAgICAvLyBtYWtlIHN0YXRpYyB2ZXJzaW9ucyBmb3IgcHJvdG90eXBlIG1ldGhvZHNcblx0ICAgIH0pKG91dCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcblx0ICAgIGlmKElTX1BST1RPKShleHBvcnRzW1BST1RPVFlQRV0gfHwgKGV4cG9ydHNbUFJPVE9UWVBFXSA9IHt9KSlba2V5XSA9IG91dDtcblx0ICB9XG5cdH07XG5cdC8vIHR5cGUgYml0bWFwXG5cdCRleHBvcnQuRiA9IDE7ICAvLyBmb3JjZWRcblx0JGV4cG9ydC5HID0gMjsgIC8vIGdsb2JhbFxuXHQkZXhwb3J0LlMgPSA0OyAgLy8gc3RhdGljXG5cdCRleHBvcnQuUCA9IDg7ICAvLyBwcm90b1xuXHQkZXhwb3J0LkIgPSAxNjsgLy8gYmluZFxuXHQkZXhwb3J0LlcgPSAzMjsgLy8gd3JhcFxuXHRtb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7XG5cbi8qKiovIH0sXG4vKiAyNiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcblx0dmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG5cdCAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGYgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHRpZih0eXBlb2YgX19nID09ICdudW1iZXInKV9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuXG4vKioqLyB9LFxuLyogMjcgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdHZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7dmVyc2lvbjogJzEuMi42J307XG5cdGlmKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuXG4vKioqLyB9LFxuLyogMjggKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xuXHR2YXIgYUZ1bmN0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOSk7XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZm4sIHRoYXQsIGxlbmd0aCl7XG5cdCAgYUZ1bmN0aW9uKGZuKTtcblx0ICBpZih0aGF0ID09PSB1bmRlZmluZWQpcmV0dXJuIGZuO1xuXHQgIHN3aXRjaChsZW5ndGgpe1xuXHQgICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24oYSl7XG5cdCAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuXHQgICAgfTtcblx0ICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uKGEsIGIpe1xuXHQgICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcblx0ICAgIH07XG5cdCAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbihhLCBiLCBjKXtcblx0ICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG5cdCAgICB9O1xuXHQgIH1cblx0ICByZXR1cm4gZnVuY3Rpb24oLyogLi4uYXJncyAqLyl7XG5cdCAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcblx0ICB9O1xuXHR9O1xuXG4vKioqLyB9LFxuLyogMjkgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuXHQgIGlmKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKXRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG5cdCAgcmV0dXJuIGl0O1xuXHR9O1xuXG4vKioqLyB9LFxuLyogMzAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ocmVnRXhwLCByZXBsYWNlKXtcblx0ICB2YXIgcmVwbGFjZXIgPSByZXBsYWNlID09PSBPYmplY3QocmVwbGFjZSkgPyBmdW5jdGlvbihwYXJ0KXtcblx0ICAgIHJldHVybiByZXBsYWNlW3BhcnRdO1xuXHQgIH0gOiByZXBsYWNlO1xuXHQgIHJldHVybiBmdW5jdGlvbihpdCl7XG5cdCAgICByZXR1cm4gU3RyaW5nKGl0KS5yZXBsYWNlKHJlZ0V4cCwgcmVwbGFjZXIpO1xuXHQgIH07XG5cdH07XG5cbi8qKiovIH0sXG4vKiAzMSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdGlmICghU3RyaW5nLnByb3RvdHlwZS5hbnRTdHlsZVBhdGhUb1JlZ2V4KSB7XG5cdCAgICAvKipcblx0ICAgICAqIEByZXR1cm4ge1JlZ0V4cH1cblx0ICAgICAqL1xuXHQgICAgU3RyaW5nLnByb3RvdHlwZS5hbnRTdHlsZVBhdGhUb1JlZ2V4ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkge1xuXHQgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlBhdGggbXVzdCBub3QgYmUgZW1wdHkuXCIpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB2YXIgcGF0aCA9IHRoaXMucmVwbGFjZSgvXFwvezIsfS9nLCAnLycpLnJlcGxhY2UoL1stW1xcXXt9KCkrLixcXFxcXiR8I1xcc10vZywgJ1xcXFwkJicpO1xuXHQgICAgICAgIHZhciBwYXR0ZXJuID0gcGF0aC5yZXBsYWNlKC8oKFxcLz9cXCpcXCopfChcXC8/XFwqKXwoXFw/KXwoXFwvKSkvZywgZnVuY3Rpb24gKCQwKSB7XG5cdCAgICAgICAgICAgIHN3aXRjaCAoJDApIHtcblx0ICAgICAgICAgICAgICAgIGNhc2UgJy8qKic6XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuICcoPzovezEsfS4qKT8nO1xuXHQgICAgICAgICAgICAgICAgY2FzZSAnKionOlxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiAnLionO1xuXHQgICAgICAgICAgICAgICAgY2FzZSAnLyonOlxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiAnKD86L3sxLH1bXi9dKik/Jztcblx0ICAgICAgICAgICAgICAgIGNhc2UgJyonOlxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW14vXSonO1xuXHQgICAgICAgICAgICAgICAgY2FzZSAnPyc6XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbXi9dJztcblx0ICAgICAgICAgICAgICAgIGNhc2UgJy8nOlxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiAnL3sxLH0nO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoJ14oJyArIHBhdHRlcm4gKyAnKSQnKTtcblx0ICAgIH07XG5cdH1cblx0aWYgKCFTdHJpbmcucHJvdG90eXBlLmEpIHtcblx0ICAgIFN0cmluZy5wcm90b3R5cGUuYSA9IFN0cmluZy5wcm90b3R5cGUuYW50U3R5bGVQYXRoVG9SZWdleDtcblx0fVxuXHRcblx0ZXhwb3J0c1snZGVmYXVsdCddID0gU3RyaW5nLnByb3RvdHlwZS5hbnRTdHlsZVBhdGhUb1JlZ2V4O1xuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSxcbi8qIDMyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oMzMpO1xuXHRcblx0aWYgKCFTdHJpbmcucHJvdG90eXBlLmJyMm5sKSB7XG5cdCAgICAvKipcblx0ICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0geG1sVW5lc2NhcGVcblx0ICAgICAqIEByZXR1cm4ge1N0cmluZ31cblx0ICAgICAqL1xuXHQgICAgU3RyaW5nLnByb3RvdHlwZS5icjJubCA9IGZ1bmN0aW9uICh4bWxVbmVzY2FwZSkge1xuXHQgICAgICAgIHZhciByZXN1bHQgPSB0aGlzLnJlcGxhY2UoLyg8YnI+fDxiclxcLz4pL2csICdcXG4nKTtcblx0ICAgICAgICBpZiAoeG1sVW5lc2NhcGUpIHJldHVybiByZXN1bHQueG1sVW5lc2NhcGUoKTtcblx0ICAgICAgICByZXR1cm4gcmVzdWx0O1xuXHQgICAgfTtcblx0fVxuXHRcblx0ZXhwb3J0c1snZGVmYXVsdCddID0gU3RyaW5nLnByb3RvdHlwZS5icjJubDtcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiAzMyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdGlmICghU3RyaW5nLnByb3RvdHlwZS54bWxVbmVzY2FwZSkge1xuXHQgICAgU3RyaW5nLnByb3RvdHlwZS54bWxVbmVzY2FwZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICByZXR1cm4gdGhpcy5yZXBsYWNlKC8oJmx0O3wmZ3Q7fCYjMzQ7fCYjMzk7fCZhbXA7KS9nLCBmdW5jdGlvbiAoJDEpIHtcblx0ICAgICAgICAgICAgc3dpdGNoICgkMSkge1xuXHQgICAgICAgICAgICAgICAgY2FzZSAnJmx0Oyc6XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuICc8Jztcblx0ICAgICAgICAgICAgICAgIGNhc2UgJyZndDsnOlxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiAnPic7XG5cdCAgICAgICAgICAgICAgICBjYXNlICcmIzM0Oyc6XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdcIic7XG5cdCAgICAgICAgICAgICAgICBjYXNlICcmIzM5Oyc6XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiJ1wiO1xuXHQgICAgICAgICAgICAgICAgY2FzZSAnJmFtcDsnOlxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiAnJic7XG5cdCAgICAgICAgICAgICAgICBkZWZhdWx0OlxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiAkMTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXHQgICAgfTtcblx0fVxuXHRcblx0ZXhwb3J0c1snZGVmYXVsdCddID0gU3RyaW5nLnByb3RvdHlwZS54bWxVbmVzY2FwZTtcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiAzNCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdGlmICghU3RyaW5nLnByb3RvdHlwZS5jb21wYXJlVG8pIHtcblx0ICAgIFN0cmluZy5wcm90b3R5cGUuY29tcGFyZVRvID0gZnVuY3Rpb24gKHN0cikge1xuXHQgICAgICAgIGlmIChzdHIgPT0gbnVsbCB8fCB0aGlzID4gc3RyKSByZXR1cm4gMTtcblx0ICAgICAgICBpZiAodGhpcyA8IHN0cikgcmV0dXJuIC0xO1xuXHQgICAgICAgIHJldHVybiAwO1xuXHQgICAgfTtcblx0fVxuXHRcblx0ZXhwb3J0c1snZGVmYXVsdCddID0gU3RyaW5nLnByb3RvdHlwZS5jb21wYXJlVG87XG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogMzUgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0aWYgKCFTdHJpbmcucHJvdG90eXBlLmNvbnRhaW5zKSB7XG5cdCAgLyoqXG5cdCAgICogQHBhcmFtIHtzdHJpbmd9IHN0clxuXHQgICAqL1xuXHQgIFN0cmluZy5wcm90b3R5cGUuY29udGFpbnMgPSBmdW5jdGlvbiAoc3RyKSB7XG5cdCAgICByZXR1cm4gdGhpcy5pbmRleE9mKHN0cikgPiAtMTtcblx0ICB9O1xuXHR9XG5cdFxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBTdHJpbmcucHJvdG90eXBlLmNvbnRhaW5zO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSxcbi8qIDM2ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cdFxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDM3KTtcblx0XG5cdGlmICghU3RyaW5nLnByb3RvdHlwZS5jdXRzdHJpbmcpIHtcblx0ICAgIC8qKlxuXHQgICAgICogQHBhcmFtIHtib29sZWFufG51bWJlcn0gW2NoZWNrYnl0ZV0gY2hlY2sgYnl0ZSBsZW5ndGggaWYgdHJ1ZS4gKGRlZmF1bHQgaXMgZmFsc2UpXG5cdCAgICAgKiBAcGFyYW0ge251bWJlcn0gbWF4TGVuZ3RoIHRoZSBtYXggbGVuZ3RoLlxuXHQgICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdWZmaXhdIHRoZSBzdWZmaXguXG5cdCAgICAgKiBAcmV0dXJuIHtzdHJpbmd9XG5cdCAgICAgKi9cblx0ICAgIFN0cmluZy5wcm90b3R5cGUuY3V0c3RyaW5nID0gZnVuY3Rpb24gKGNoZWNrYnl0ZSwgbWF4TGVuZ3RoLCBzdWZmaXgpIHtcblx0ICAgICAgICB2YXIgX2FyZ3VtZW50cyA9IGFyZ3VtZW50cztcblx0XG5cdCAgICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcblx0ICAgICAgICB2YXIgYXJnQ3VyciA9IGZ1bmN0aW9uIGFyZ0N1cnIoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBfYXJndW1lbnRzW2FyZ0luZGV4XTtcblx0ICAgICAgICB9O1xuXHQgICAgICAgIHZhciBhcmdTaGlmdCA9IGZ1bmN0aW9uIGFyZ1NoaWZ0KCkge1xuXHQgICAgICAgICAgICByZXR1cm4gX2FyZ3VtZW50c1thcmdJbmRleCsrXTtcblx0ICAgICAgICB9O1xuXHRcblx0ICAgICAgICBjaGVja2J5dGUgPSBbJ2Jvb2xlYW4nLCAnbnVtYmVyJ10uY29udGFpbnModHlwZW9mIGFyZ0N1cnIoKSkgPyBhcmdTaGlmdCgpIDogZmFsc2U7XG5cdFxuXHQgICAgICAgIGlmICh0eXBlb2YgYXJnQ3VycigpICE9PSAnbnVtYmVyJykge1xuXHQgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGFyZ0N1cnIoKSArIFwiIGlzIG5vdCBhIG51bWJlclwiKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgbWF4TGVuZ3RoID0gYXJnU2hpZnQoKTtcblx0XG5cdCAgICAgICAgc3VmZml4ID0gdHlwZW9mIGFyZ0N1cnIoKSA9PT0gJ3N0cmluZycgPyBhcmdTaGlmdCgpIDogJyc7XG5cdFxuXHQgICAgICAgIHZhciBsZW5ndGggPSB0aGlzLmdldExlbmd0aChjaGVja2J5dGUpO1xuXHQgICAgICAgIGlmICghKGxlbmd0aCA+IG1heExlbmd0aCkpIHJldHVybiB0aGlzO1xuXHRcblx0ICAgICAgICB2YXIgc3VmZml4TGVuZ3RoID0gc3VmZml4LmdldExlbmd0aChjaGVja2J5dGUpO1xuXHQgICAgICAgIGlmIChzdWZmaXhMZW5ndGggPiBtYXhMZW5ndGgpIHtcblx0ICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJNYXggbGVuZ3RoIG11c3QgYmUgbW9yZSB0aGFuIHN1ZmZpeCBsZW5ndGhcIik7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHZhciByZXN1bHRTdHJpbmcgPSAnJztcblx0ICAgICAgICB2YXIgY2hlY2tlZExlbmd0aCA9IDA7XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgIHZhciBjID0gdGhpcy5jaGFyQXQoaSk7XG5cdCAgICAgICAgICAgIHZhciBsID0gYy5nZXRMZW5ndGgoY2hlY2tieXRlKTtcblx0ICAgICAgICAgICAgaWYgKGNoZWNrZWRMZW5ndGggKyBsID4gbWF4TGVuZ3RoIC0gc3VmZml4TGVuZ3RoKSBicmVhaztcblx0ICAgICAgICAgICAgY2hlY2tlZExlbmd0aCArPSBsO1xuXHQgICAgICAgICAgICByZXN1bHRTdHJpbmcgKz0gYztcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHJlc3VsdFN0cmluZyArIHN1ZmZpeDtcblx0ICAgIH07XG5cdH1cblx0XG5cdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IFN0cmluZy5wcm90b3R5cGUuY3V0c3RyaW5nO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSxcbi8qIDM3ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cdFxuXHRpZiAoIVN0cmluZy5wcm90b3R5cGUuZ2V0TGVuZ3RoKSB7XG5cdCAgICAvKipcblx0ICAgICAqIEBwYXJhbSB7Ym9vbGVhbnxudW1iZXJ9IFtjaGVja2J5dGVdIGNoZWNrIGJ5dGUgbGVuZ3RoIGlmIHRydWUuIChkZWZhdWx0IGlzIGZhbHNlKVxuXHQgICAgICogQHJldHVybiB7bnVtYmVyfVxuXHQgICAgICovXG5cdCAgICBTdHJpbmcucHJvdG90eXBlLmdldExlbmd0aCA9IGZ1bmN0aW9uIChjaGVja2J5dGUpIHtcblx0ICAgICAgICB2YXIgX2FyZ3VtZW50cyA9IGFyZ3VtZW50cztcblx0XG5cdCAgICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcblx0ICAgICAgICB2YXIgYXJnQ3VyciA9IGZ1bmN0aW9uIGFyZ0N1cnIoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBfYXJndW1lbnRzW2FyZ0luZGV4XTtcblx0ICAgICAgICB9O1xuXHQgICAgICAgIHZhciBhcmdTaGlmdCA9IGZ1bmN0aW9uIGFyZ1NoaWZ0KCkge1xuXHQgICAgICAgICAgICByZXR1cm4gX2FyZ3VtZW50c1thcmdJbmRleCsrXTtcblx0ICAgICAgICB9O1xuXHRcblx0ICAgICAgICBjaGVja2J5dGUgPSBbJ2Jvb2xlYW4nLCAnbnVtYmVyJ10uY29udGFpbnModHlwZW9mIGFyZ0N1cnIoKSkgPyBhcmdTaGlmdCgpIDogZmFsc2U7XG5cdCAgICAgICAgaWYgKGNoZWNrYnl0ZSA9PT0gZmFsc2UpIHJldHVybiB0aGlzLmxlbmd0aDtcblx0XG5cdCAgICAgICAgdmFyIGxlbmd0aCA9IDA7XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgICAgIHZhciBjID0gdGhpcy5jaGFyQ29kZUF0KGkpO1xuXHQgICAgICAgICAgICBzd2l0Y2ggKGZhbHNlKSB7XG5cdCAgICAgICAgICAgICAgICBjYXNlICEoYyA8PSAweDAwMDA3Rik6XG5cdCAgICAgICAgICAgICAgICAgICAgbGVuZ3RoICs9IDE7XG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cdCAgICAgICAgICAgICAgICBjYXNlICEodHlwZW9mIGNoZWNrYnl0ZSA9PT0gJ251bWJlcicgJiYgY2hlY2tieXRlID4gMCk6XG5cdCAgICAgICAgICAgICAgICAgICAgbGVuZ3RoICs9IGNoZWNrYnl0ZTtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIGNhc2UgIShjIDw9IDB4MDAwN0ZGKTpcblx0ICAgICAgICAgICAgICAgICAgICBsZW5ndGggKz0gMjtcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIGNhc2UgIShjIDw9IDB4MDBGRkZGKTpcblx0ICAgICAgICAgICAgICAgICAgICBsZW5ndGggKz0gMztcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG5cdCAgICAgICAgICAgICAgICAgICAgbGVuZ3RoICs9IDQ7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIGxlbmd0aDtcblx0ICAgIH07XG5cdH1cblx0XG5cdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IFN0cmluZy5wcm90b3R5cGUuZ2V0TGVuZ3RoO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSxcbi8qIDM4ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0aWYgKCFTdHJpbmcucHJvdG90eXBlLmVuZHNXaXRoKSB7XG5cdCAgICAvKipcblx0ICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcblx0ICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuXHQgICAgICovXG5cdCAgICBTdHJpbmcucHJvdG90eXBlLmVuZHNXaXRoID0gZnVuY3Rpb24gKHN0cikge1xuXHQgICAgICAgIHZhciBpID0gdGhpcy5sYXN0SW5kZXhPZihzdHIpO1xuXHQgICAgICAgIHJldHVybiBpID4gLTEgJiYgaSA9PT0gdGhpcy5sZW5ndGggLSBzdHIudG9TdHJpbmcoKS5sZW5ndGg7XG5cdCAgICB9O1xuXHR9XG5cdFxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBTdHJpbmcucHJvdG90eXBlLmVuZHNXaXRoO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSxcbi8qIDM5ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oNik7XG5cdFxuXHRpZiAoIVN0cmluZy5wcm90b3R5cGUuZm9ybWF0KSB7XG5cdCAgICBTdHJpbmcucHJvdG90eXBlLmZvcm1hdCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgX2FyZ3VtZW50cyA9IGFyZ3VtZW50cztcblx0XG5cdCAgICAgICAgcmV0dXJuIHRoaXMucmVwbGFjZSgvKCcnfCdcXHt8fSd8XFx7KFxcdyspfSkvZywgZnVuY3Rpb24gKCQwLCAkMSwgJDIpIHtcblx0ICAgICAgICAgICAgc3dpdGNoICgkMSkge1xuXHQgICAgICAgICAgICAgICAgY2FzZSBcIicnXCI6XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiJ1wiO1xuXHQgICAgICAgICAgICAgICAgY2FzZSBcIid7XCI6XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd7Jztcblx0ICAgICAgICAgICAgICAgIGNhc2UgXCJ9J1wiOlxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiAnfSc7XG5cdCAgICAgICAgICAgICAgICBkZWZhdWx0OlxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiAoIS9eXFxkKyQvZy50ZXN0KCQyKSA/IF9hcmd1bWVudHNbMF0gfHwge30gOiBBcnJheS5pc0FycmF5KF9hcmd1bWVudHNbMF0pID8gX2FyZ3VtZW50c1swXSA6IF9hcmd1bWVudHMpWyQyXTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXHQgICAgfTtcblx0fVxuXHRcblx0ZXhwb3J0c1snZGVmYXVsdCddID0gU3RyaW5nLnByb3RvdHlwZS5mb3JtYXQ7XG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogNDAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdGlmICghU3RyaW5nLnByb3RvdHlwZS5mb3JtYXRWYXJpYWJsZXMpIHtcblx0ICAgIC8qKlxuXHQgICAgICogQHBhcmFtIHsqfSBhcmd1bWVudHNcblx0ICAgICAqIEByZXR1cm5zIHtBcnJheTxzdHJpbmc+fVxuXHQgICAgICovXG5cdCAgICBTdHJpbmcucHJvdG90eXBlLmZvcm1hdFZhcmlhYmxlcyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICB2YXIgcmVnZXggPSAvKCcnfCdcXHt8XFx9J3xcXHsoXFx3KylcXH0pL2c7XG5cdCAgICAgICAgdmFyIHZhcmlhYmxlcyA9IFtdO1xuXHQgICAgICAgIHZhciBtYXRjaGVzID0gdW5kZWZpbmVkO1xuXHQgICAgICAgIHdoaWxlIChtYXRjaGVzID0gcmVnZXguZXhlYyh0aGlzKSkge1xuXHQgICAgICAgICAgICB2YXIgbWF0Y2ggPSBtYXRjaGVzWzBdO1xuXHQgICAgICAgICAgICBpZiAobWF0Y2ggIT09IFwiJydcIiAmJiBtYXRjaCAhPT0gXCIne1wiICYmIG1hdGNoICE9PSBcIn0nXCIpIHtcblx0ICAgICAgICAgICAgICAgIHZhcmlhYmxlcy5wdXNoKG1hdGNoZXNbMl0pO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiB2YXJpYWJsZXM7XG5cdCAgICB9O1xuXHR9XG5cdFxuXHRleHBvcnRzW1wiZGVmYXVsdFwiXSA9IFN0cmluZy5wcm90b3R5cGUuZm9ybWF0VmFyaWFibGVzO1xuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdO1xuXG4vKioqLyB9LFxuLyogNDEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRpZiAoIVN0cmluZy5wcm90b3R5cGUuZ3JvdXBlZCkge1xuXHQgICAgLyoqXG5cdCAgICAgKiBAcGFyYW0ge251bWJlcn0gc2l6ZVxuXHQgICAgICogQHJldHVybiB7QXJyYXk8c3RyaW5nPn1cblx0ICAgICAqL1xuXHQgICAgU3RyaW5nLnByb3RvdHlwZS5ncm91cGVkID0gZnVuY3Rpb24gKHNpemUpIHtcblx0ICAgICAgICBpZiAoIShzaXplID4gMSkpIHtcblx0ICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgc2l6ZSB2YWx1ZScpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSBzaXplID0gcGFyc2VJbnQoc2l6ZSk7XG5cdCAgICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IHNpemUpIHtcblx0ICAgICAgICAgICAgcmVzdWx0cy5wdXNoKHRoaXMuc2xpY2UoaSwgaSArIHNpemUpKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG5cdCAgICB9O1xuXHR9XG5cdFxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBTdHJpbmcucHJvdG90eXBlLmdyb3VwZWQ7XG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogNDIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRpZiAoIVN0cmluZy5wcm90b3R5cGUuZ3JvdXBlZFJpZ2h0KSB7XG5cdCAgICAvKipcblx0ICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzaXplXG5cdCAgICAgKiBAcmV0dXJuIHtBcnJheTxzdHJpbmc+fVxuXHQgICAgICovXG5cdCAgICBTdHJpbmcucHJvdG90eXBlLmdyb3VwZWRSaWdodCA9IGZ1bmN0aW9uIChzaXplKSB7XG5cdCAgICAgICAgaWYgKCEoc2l6ZSA+IDEpKSB7XG5cdCAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHNpemUgdmFsdWUnKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykgc2l6ZSA9IHBhcnNlSW50KHNpemUpO1xuXHQgICAgICAgIHZhciByZXN1bHRzID0gW107XG5cdCAgICAgICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoOyBpID4gMDsgaSAtPSBzaXplKSB7XG5cdCAgICAgICAgICAgIHJlc3VsdHMucHVzaCh0aGlzLnNsaWNlKE1hdGgubWF4KDAsIGkgLSBzaXplKSwgaSkpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gcmVzdWx0cy5yZXZlcnNlKCk7XG5cdCAgICB9O1xuXHR9XG5cdFxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBTdHJpbmcucHJvdG90eXBlLmdyb3VwZWRSaWdodDtcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiA0MyAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDQ0KTtcblx0XG5cdGlmICghU3RyaW5nLnByb3RvdHlwZS5sZWZ0UGFkKSB7XG5cdCAgICAvKipcblx0ICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGhcblx0ICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxsQ2hhclxuXHQgICAgICogQHJldHVybnMge3N0cmluZ31cblx0ICAgICAqL1xuXHQgICAgU3RyaW5nLnByb3RvdHlwZS5sZWZ0UGFkID0gZnVuY3Rpb24gKGxlbmd0aCwgZmlsbENoYXIpIHtcblx0ICAgICAgICBpZiAodHlwZW9mIGxlbmd0aCAhPT0gJ251bWJlcicpIHtcblx0ICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihsZW5ndGggKyAnIGlzIG5vdCBhIG51bWJlcicpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoIWZpbGxDaGFyKSBmaWxsQ2hhciA9ICcgJztcblx0ICAgICAgICBpZiAodGhpcy5sZW5ndGggPj0gbGVuZ3RoKSByZXR1cm4gdGhpcy50b1N0cmluZygpO1xuXHQgICAgICAgIHJldHVybiBmaWxsQ2hhci5yZXBlYXQobGVuZ3RoIC0gdGhpcy5sZW5ndGgpICsgdGhpcy50b1N0cmluZygpO1xuXHQgICAgfTtcblx0fVxuXHRpZiAoIVN0cmluZy5wcm90b3R5cGUubHBhZCkge1xuXHQgICAgU3RyaW5nLnByb3RvdHlwZS5scGFkID0gU3RyaW5nLnByb3RvdHlwZS5sZWZ0UGFkO1xuXHR9XG5cdFxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBTdHJpbmcucHJvdG90eXBlLmxlZnRQYWQ7XG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogNDQgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRpZiAoIVN0cmluZy5wcm90b3R5cGUucmVwZWF0KSB7XG5cdCAgICAvKipcblx0ICAgICAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudFxuXHQgICAgICogQHJldHVybiB7c3RyaW5nfVxuXHQgICAgICovXG5cdCAgICBTdHJpbmcucHJvdG90eXBlLnJlcGVhdCA9IGZ1bmN0aW9uIChjb3VudCkge1xuXHQgICAgICAgIGlmICghKGNvdW50ID49IDApKSB7XG5cdCAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIGNvdW50IHZhbHVlJyk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHZhciByZXN1bHQgPSAnJztcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcblx0ICAgICAgICAgICAgcmVzdWx0ICs9IHRoaXMudG9TdHJpbmcoKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgcmV0dXJuIHJlc3VsdDtcblx0ICAgIH07XG5cdH1cblx0XG5cdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IFN0cmluZy5wcm90b3R5cGUucmVwZWF0O1xuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSxcbi8qIDQ1ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oNDYpO1xuXHRcblx0aWYgKCFTdHJpbmcucHJvdG90eXBlLm5sMmJyKSB7XG5cdCAgICAvKipcblx0ICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0geG1sRXNjYXBlXG5cdCAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuXHQgICAgICovXG5cdCAgICBTdHJpbmcucHJvdG90eXBlLm5sMmJyID0gZnVuY3Rpb24gKHhtbEVzY2FwZSkge1xuXHQgICAgICAgIHJldHVybiAoeG1sRXNjYXBlID8gdGhpcy54bWxFc2NhcGUoKSA6IHRoaXMpLnJlcGxhY2UoLyhcXHJcXG58XFxuXFxyfFxccnxcXG4pL2csICc8YnIvPicpO1xuXHQgICAgfTtcblx0fVxuXHRcblx0ZXhwb3J0c1snZGVmYXVsdCddID0gU3RyaW5nLnByb3RvdHlwZS5ubDJicjtcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiA0NiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdGlmICghU3RyaW5nLnByb3RvdHlwZS54bWxFc2NhcGUpIHtcblx0ICAgIFN0cmluZy5wcm90b3R5cGUueG1sRXNjYXBlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHJldHVybiB0aGlzLnJlcGxhY2UoLyg8fD58XCJ8J3wmKS9nLCBmdW5jdGlvbiAoJDEpIHtcblx0ICAgICAgICAgICAgc3dpdGNoICgkMSkge1xuXHQgICAgICAgICAgICAgICAgY2FzZSAnPCc6XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuICcmbHQ7Jztcblx0ICAgICAgICAgICAgICAgIGNhc2UgJz4nOlxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiAnJmd0Oyc7XG5cdCAgICAgICAgICAgICAgICBjYXNlICdcIic6XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuICcmIzM0Oyc7XG5cdCAgICAgICAgICAgICAgICBjYXNlIFwiJ1wiOlxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiAnJiMzOTsnO1xuXHQgICAgICAgICAgICAgICAgY2FzZSAnJic6XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuICcmYW1wOyc7XG5cdCAgICAgICAgICAgICAgICBkZWZhdWx0OlxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiAkMTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXHQgICAgfTtcblx0fVxuXHRcblx0ZXhwb3J0c1snZGVmYXVsdCddID0gU3RyaW5nLnByb3RvdHlwZS54bWxFc2NhcGU7XG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogNDcgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRpZiAoIVN0cmluZy5wcm90b3R5cGUucXVvdGUpIHtcblx0ICAgIC8qKlxuXHQgICAgICogQHBhcmFtIHtib29sZWFufSBvdmVybGFwYWJsZVxuXHQgICAgICogQHJldHVybiB7c3RyaW5nfVxuXHQgICAgICovXG5cdCAgICBTdHJpbmcucHJvdG90eXBlLnF1b3RlID0gZnVuY3Rpb24gKG92ZXJsYXBhYmxlKSB7XG5cdCAgICAgICAgaWYgKHR5cGVvZiBvdmVybGFwYWJsZSAhPT0gJ2Jvb2xlYW4nKSBvdmVybGFwYWJsZSA9IHRydWU7XG5cdCAgICAgICAgaWYgKCFvdmVybGFwYWJsZSAmJiB0aGlzLmxlbmd0aCA+PSAyKSB7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLmNoYXJBdCgwKSA9PT0gJ1wiJyAmJiB0aGlzLmNoYXJBdCh0aGlzLmxlbmd0aCAtIDEpID09PSAnXCInKSByZXR1cm4gdGhpcy50b1N0cmluZygpO1xuXHQgICAgICAgICAgICBpZiAodGhpcy5jaGFyQXQoMCkgPT09IFwiJ1wiICYmIHRoaXMuY2hhckF0KHRoaXMubGVuZ3RoIC0gMSkgPT09IFwiJ1wiKSByZXR1cm4gdGhpcy50b1N0cmluZygpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gJ1wiJyArIHRoaXMgKyAnXCInO1xuXHQgICAgfTtcblx0fVxuXHRcblx0ZXhwb3J0c1snZGVmYXVsdCddID0gU3RyaW5nLnByb3RvdHlwZS5xdW90ZTtcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiA0OCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdGlmICghU3RyaW5nLnByb3RvdHlwZS5yZWdleCkge1xuXHQgICAgLyoqXG5cdCAgICAgKiBAcGFyYW0ge3N0cmluZ30gZmxhZ3Ncblx0ICAgICAqIEByZXR1cm5zIHtSZWdFeHB9XG5cdCAgICAgKi9cblx0ICAgIFN0cmluZy5wcm90b3R5cGUucmVnZXggPSBmdW5jdGlvbiAoZmxhZ3MpIHtcblx0ICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCh0aGlzLCBmbGFncyk7XG5cdCAgICB9O1xuXHR9XG5cdGlmICghU3RyaW5nLnByb3RvdHlwZS5yKSB7XG5cdCAgICBTdHJpbmcucHJvdG90eXBlLnIgPSBTdHJpbmcucHJvdG90eXBlLnJlZ2V4O1xuXHR9XG5cdFxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBTdHJpbmcucHJvdG90eXBlLnJlZ2V4O1xuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcblxuLyoqKi8gfSxcbi8qIDQ5ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG5cdCAgICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oNDQpO1xuXHRcblx0aWYgKCFTdHJpbmcucHJvdG90eXBlLnJpZ2h0UGFkKSB7XG5cdCAgICAvKipcblx0ICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGhcblx0ICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxsQ2hhclxuXHQgICAgICogQHJldHVybnMge3N0cmluZ31cblx0ICAgICAqL1xuXHQgICAgU3RyaW5nLnByb3RvdHlwZS5yaWdodFBhZCA9IGZ1bmN0aW9uIChsZW5ndGgsIGZpbGxDaGFyKSB7XG5cdCAgICAgICAgaWYgKHR5cGVvZiBsZW5ndGggIT09ICdudW1iZXInKSB7XG5cdCAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IobGVuZ3RoICsgJyBpcyBub3QgYSBudW1iZXInKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKCFmaWxsQ2hhcikgZmlsbENoYXIgPSAnICc7XG5cdCAgICAgICAgaWYgKHRoaXMubGVuZ3RoID49IGxlbmd0aCkgcmV0dXJuIHRoaXMudG9TdHJpbmcoKTtcblx0ICAgICAgICByZXR1cm4gdGhpcy50b1N0cmluZygpICsgZmlsbENoYXIucmVwZWF0KGxlbmd0aCAtIHRoaXMubGVuZ3RoKTtcblx0ICAgIH07XG5cdH1cblx0aWYgKCFTdHJpbmcucHJvdG90eXBlLnJwYWQpIHtcblx0ICAgIFN0cmluZy5wcm90b3R5cGUucnBhZCA9IFN0cmluZy5wcm90b3R5cGUucmlnaHRQYWQ7XG5cdH1cblx0XG5cdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IFN0cmluZy5wcm90b3R5cGUucmlnaHRQYWQ7XG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9LFxuLyogNTAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0aWYgKCFTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGgpIHtcblx0ICAvKipcblx0ICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyXG5cdCAgICovXG5cdCAgU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoID0gZnVuY3Rpb24gKHN0cikge1xuXHQgICAgcmV0dXJuIHRoaXMuaW5kZXhPZihzdHIpID09PSAwO1xuXHQgIH07XG5cdH1cblx0XG5cdGV4cG9ydHNbJ2RlZmF1bHQnXSA9IFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aDtcblx0bW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG5cbi8qKiovIH0sXG4vKiA1MSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdGlmICghU3RyaW5nLnByb3RvdHlwZS51bnF1b3RlKSB7XG5cdCAgICBTdHJpbmcucHJvdG90eXBlLnVucXVvdGUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgaWYgKHRoaXMubGVuZ3RoID49IDIgJiYgKHRoaXMuY2hhckF0KDApID09PSAnXCInICYmIHRoaXMuY2hhckF0KHRoaXMubGVuZ3RoIC0gMSkgPT09ICdcIicgfHwgdGhpcy5jaGFyQXQoMCkgPT09IFwiJ1wiICYmIHRoaXMuY2hhckF0KHRoaXMubGVuZ3RoIC0gMSkgPT09IFwiJ1wiKSkge1xuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5zbGljZSgxLCAtMSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKCk7XG5cdCAgICB9O1xuXHR9XG5cdFxuXHRleHBvcnRzWydkZWZhdWx0J10gPSBTdHJpbmcucHJvdG90eXBlLnVucXVvdGU7XG5cdG1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG4vKioqLyB9XG4vKioqKioqLyBdKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2ZDJWaWNHRmpheTlpYjI5MGMzUnlZWEFnT0dKak9HVTFOemMyTW1aaE9XVTNNbVk0WVRraUxDSjNaV0p3WVdOck9pOHZMeTR2YzNKakwybHVaR1Y0TG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDNOeVl5OWhjbkpoZVhNdlkyOXVkR0ZwYm5NdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmMzSmpMMkZ5Y21GNWN5OXBibVJsZUU5bUxtcHpJaXdpZDJWaWNHRmphem92THk4dUwzTnlZeTloY25KaGVYTXZaWFpsY25rdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmMzSmpMMkZ5Y21GNWN5OW1hV3gwWlhJdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmMzSmpMMkZ5Y21GNWN5OW1iR0YwVFdGd0xtcHpJaXdpZDJWaWNHRmphem92THk4dUwzTnlZeTloY25KaGVYTXZhWE5CY25KaGVTNXFjeUlzSW5kbFluQmhZMnM2THk4dkxpOXpjbU12WVhKeVlYbHpMMlpwY25OMExtcHpJaXdpZDJWaWNHRmphem92THk4dUwzTnlZeTloY25KaGVYTXZaM0p2ZFhCQ2VTNXFjeUlzSW5kbFluQmhZMnM2THk4dkxpOXpjbU12WVhKeVlYbHpMMmR5YjNWd1pXUXVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZjM0pqTDJGeWNtRjVjeTluY205MWNHVmtVbWxuYUhRdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmMzSmpMMkZ5Y21GNWN5OXBibU5zZFdSbExtcHpJaXdpZDJWaWNHRmphem92THk4dUwzTnlZeTloY25KaGVYTXZhbTlwYmxCaGRHaHpMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMM055WXk5aGNuSmhlWE12YkdGemRDNXFjeUlzSW5kbFluQmhZMnM2THk4dkxpOXpjbU12WVhKeVlYbHpMMjFoY0M1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZZWEp5WVhsekwyMWhlQzVxY3lJc0luZGxZbkJoWTJzNkx5OHZMaTl6Y21NdllYSnlZWGx6TDNKbFpIVmpaUzVxY3lJc0luZGxZbkJoWTJzNkx5OHZMaTl6Y21NdllYSnlZWGx6TDIxcGJpNXFjeUlzSW5kbFluQmhZMnM2THk4dkxpOXpjbU12WVhKeVlYbHpMM0poYm1kbExtcHpJaXdpZDJWaWNHRmphem92THk4dUwzTnlZeTloY25KaGVYTXZjbVZ0YjNabExtcHpJaXdpZDJWaWNHRmphem92THk4dUwzTnlZeTloY25KaGVYTXZjMjl0WlM1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZjbVZuWlhod2N5OWxjMk5oY0dVdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWlZV0psYkMxeWRXNTBhVzFsTDJOdmNtVXRhbk12Y21WblpYaHdMMlZ6WTJGd1pTNXFjeUlzSW5kbFluQmhZMnM2THk4dkxpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOW1iaTl5WldkbGVIQXZaWE5qWVhCbExtcHpJaXdpZDJWaWNHRmphem92THk4dUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlpYTTNMbkpsWjJWNGNDNWxjMk5oY0dVdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k4a0xtVjRjRzl5ZEM1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6THlRdVoyeHZZbUZzTG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12SkM1amIzSmxMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZKQzVqZEhndWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k4a0xtRXRablZ1WTNScGIyNHVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OGtMbkpsY0d4aFkyVnlMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMM055WXk5emRISnBibWR6TDJGdWRGTjBlV3hsVUdGMGFGUnZVbVZuWlhndWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmMzSmpMM04wY21sdVozTXZZbkl5Ym13dWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmMzSmpMM04wY21sdVozTXZlRzFzVlc1bGMyTmhjR1V1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2YzNKakwzTjBjbWx1WjNNdlkyOXRjR0Z5WlZSdkxtcHpJaXdpZDJWaWNHRmphem92THk4dUwzTnlZeTl6ZEhKcGJtZHpMMk52Ym5SaGFXNXpMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMM055WXk5emRISnBibWR6TDJOMWRITjBjbWx1Wnk1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZjM1J5YVc1bmN5OW5aWFJNWlc1bmRHZ3Vhbk1pTENKM1pXSndZV05yT2k4dkx5NHZjM0pqTDNOMGNtbHVaM012Wlc1a2MxZHBkR2d1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2YzNKakwzTjBjbWx1WjNNdlptOXliV0YwTG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDNOeVl5OXpkSEpwYm1kekwyWnZjbTFoZEZaaGNtbGhZbXhsY3k1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZjM1J5YVc1bmN5OW5jbTkxY0dWa0xtcHpJaXdpZDJWaWNHRmphem92THk4dUwzTnlZeTl6ZEhKcGJtZHpMMmR5YjNWd1pXUlNhV2RvZEM1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZjM1J5YVc1bmN5OXNaV1owVUdGa0xtcHpJaXdpZDJWaWNHRmphem92THk4dUwzTnlZeTl6ZEhKcGJtZHpMM0psY0dWaGRDNXFjeUlzSW5kbFluQmhZMnM2THk4dkxpOXpjbU12YzNSeWFXNW5jeTl1YkRKaWNpNXFjeUlzSW5kbFluQmhZMnM2THk4dkxpOXpjbU12YzNSeWFXNW5jeTk0Yld4RmMyTmhjR1V1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2YzNKakwzTjBjbWx1WjNNdmNYVnZkR1V1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2YzNKakwzTjBjbWx1WjNNdmNtVm5aWGd1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2YzNKakwzTjBjbWx1WjNNdmNtbG5hSFJRWVdRdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmMzSmpMM04wY21sdVozTXZjM1JoY25SelYybDBhQzVxY3lJc0luZGxZbkJoWTJzNkx5OHZMaTl6Y21NdmMzUnlhVzVuY3k5MWJuRjFiM1JsTG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN1FVRkJRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVN4MVFrRkJaVHRCUVVObU8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenM3UVVGSFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenM3T3pzN08wRkRkRU5CTEdGQlFWa3NRMEZCUXpzN2NVSkJSVTRzUTBGQmJVSTdPM0ZDUVVOdVFpeERRVUZuUWpzN2NVSkJRMmhDTEVOQlFXbENPenR4UWtGRGFrSXNRMEZCWjBJN08zRkNRVU5vUWl4RFFVRnJRanM3Y1VKQlEyeENMRU5CUVd0Q096dHhRa0ZEYkVJc1EwRkJhMEk3TzNGQ1FVTnNRaXhGUVVGMVFqczdjVUpCUTNaQ0xFVkJRV3RDT3p0eFFrRkRiRUlzUTBGQmEwSTdPM0ZDUVVOc1FpeERRVUZyUWpzN2NVSkJRMnhDTEVWQlFXOUNPenR4UWtGRGNFSXNSVUZCWlRzN2NVSkJRMllzUlVGQll6czdjVUpCUTJRc1JVRkJZenM3Y1VKQlEyUXNSVUZCWXpzN2NVSkJRMlFzUlVGQlowSTdPM0ZDUVVOb1FpeEZRVUZwUWpzN2NVSkJRMnBDTEVWQlFXbENPenR4UWtGRGFrSXNSVUZCWlRzN2NVSkJSV1lzUlVGQmEwSTdPM0ZDUVVWc1FpeEZRVUVyUWpzN2NVSkJReTlDTEVWQlFXbENPenR4UWtGRGFrSXNSVUZCY1VJN08zRkNRVU55UWl4RlFVRnZRanM3Y1VKQlEzQkNMRVZCUVhGQ096dHhRa0ZEY2tJc1JVRkJiMEk3TzNGQ1FVTndRaXhGUVVGclFqczdjVUpCUTJ4Q0xFVkJRVEpDT3p0eFFrRkRNMElzUlVGQmNVSTdPM0ZDUVVOeVFpeEZRVUZ0UWpzN2NVSkJRMjVDTEVWQlFYZENPenR4UWtGRGVFSXNSVUZCYlVJN08zRkNRVU51UWl4RlFVRnBRanM3Y1VKQlEycENMRVZCUVdsQ096dHhRa0ZEYWtJc1JVRkJhVUk3TzNGQ1FVTnFRaXhGUVVGclFqczdjVUpCUTJ4Q0xFVkJRVzlDT3p0eFFrRkRjRUlzUlVGQmMwSTdPM0ZDUVVOMFFpeEZRVUZ0UWpzN2NVSkJRMjVDTEVWQlFYRkNPenR4UWtGRGNrSXNSVUZCZFVJc1JUczdPenM3TzBGRE4wTTVRaXhoUVVGWkxFTkJRVU03T3pzN096dHhRa0ZGVGl4RFFVRlhPenRCUVVWc1FpeExRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRk5CUVZNc1EwRkJReXhSUVVGUkxFVkJRVVU3T3pzN08wRkJTek5DTEZWQlFVc3NRMEZCUXl4VFFVRlRMRU5CUVVNc1VVRkJVU3hIUVVGSExGVkJRVk1zUTBGQlF5eEZRVUZGTzBGQlEyNURMR2RDUVVGUExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wMUJReTlDTzBWQlEwbzdPM05DUVVWakxFdEJRVXNzUTBGQlF5eFRRVUZUTEVOQlFVTXNVVUZCVVRzN096czdPenRCUTJSMlF5eGhRVUZaTEVOQlFVTTdPenM3TzBGQlJXSXNTMEZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhUUVVGVExFTkJRVU1zVDBGQlR5eEZRVUZGT3pzN096dEJRVXN4UWl4VlFVRkxMRU5CUVVNc1UwRkJVeXhEUVVGRExFOUJRVThzUjBGQlJ5eFZRVUZUTEVsQlFVa3NSVUZCUlR0QlFVTnlReXhqUVVGTExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExFMUJRVTBzUlVGQlJTeERRVUZETEVWQlFVVXNSVUZCUlR0QlFVTnNReXhwUWtGQlNTeERRVUZETEVsQlFVa3NTVUZCU1N4SlFVRkpMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUzBGQlN5eEpRVUZKTEVWQlFVVXNUMEZCVHl4RFFVRkRMRU5CUVVNN1ZVRkRMME03UVVGRFJDeG5Ra0ZCVHl4RFFVRkRMRU5CUVVNc1EwRkJRenROUVVOaUxFTkJRVU03UlVGRFREczdjMEpCUldNc1MwRkJTeXhEUVVGRExGTkJRVk1zUTBGQlF5eFBRVUZQT3pzN096czdPMEZEWm5SRExHRkJRVmtzUTBGQlF6czdPenM3UVVGRllpeExRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRk5CUVZNc1EwRkJReXhMUVVGTExFVkJRVVU3T3pzN096dEJRVTE0UWl4VlFVRkxMRU5CUVVNc1UwRkJVeXhEUVVGRExFdEJRVXNzUjBGQlJ5eFZRVUZUTEZGQlFWRXNSVUZCUlN4UFFVRlBMRVZCUVVVN1FVRkRhRVFzWTBGQlN5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eE5RVUZOTEVWQlFVVXNRMEZCUXl4RlFVRkZMRVZCUVVVN1FVRkRiRU1zYVVKQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExFOUJRVThzU1VGQlNTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJTeEpRVUZKTEVOQlFVTXNSVUZCUlN4UFFVRlBMRXRCUVVzc1EwRkJRenRWUVVOMlJUdEJRVU5FTEdkQ1FVRlBMRWxCUVVrc1EwRkJRenROUVVObUxFTkJRVU03UlVGRFREczdjMEpCUldNc1MwRkJTeXhEUVVGRExGTkJRVk1zUTBGQlF5eExRVUZMT3pzN096czdPMEZEYUVKd1F5eGhRVUZaTEVOQlFVTTdPenM3T3p0eFFrRkZUaXhEUVVGWE96dEJRVVZzUWl4TFFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGTkJRVk1zUTBGQlF5eE5RVUZOTEVWQlFVVTdPenM3T3p0QlFVMTZRaXhWUVVGTExFTkJRVU1zVTBGQlV5eERRVUZETEUxQlFVMHNSMEZCUnl4VlFVRlRMRkZCUVZFc1JVRkJSU3hQUVVGUExFVkJRVVU3T3p0QlFVTnFSQ3huUWtGQlR5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRlZCUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlN6dEJRVU14UWl4cFFrRkJTU3hSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEU5QlFVOHNVMEZCVVN4RlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGRExGRkJRVThzUlVGQlJTeFBRVUZQTEVOQlFVTXNRMEZCUXp0VlFVTTFSQ3hEUVVGRExFTkJRVU03VFVGRFRpeERRVUZETzBWQlEwdzdPM05DUVVWakxFdEJRVXNzUTBGQlF5eFRRVUZUTEVOQlFVTXNUVUZCVFRzN096czdPenRCUTJwQ2NrTXNZVUZCV1N4RFFVRkRPenM3T3pzN2NVSkJSVTRzUTBGQlZ6czdRVUZGYkVJc1MwRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eFRRVUZUTEVOQlFVTXNUMEZCVHl4RlFVRkZPenM3T3pzN1FVRk5NVUlzVlVGQlN5eERRVUZETEZOQlFWTXNRMEZCUXl4UFFVRlBMRWRCUVVjc1ZVRkJVeXhSUVVGUkxFVkJRVVVzVDBGQlR5eEZRVUZGTzBGQlEyeEVMR0ZCUVVrc1QwRkJUeXhIUVVGSExFVkJRVVVzUTBGQlF6dEJRVU5xUWl4alFVRkxMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMRTFCUVUwc1JVRkJSU3hEUVVGRExFVkJRVVVzUlVGQlJUdEJRVU5zUXl4cFFrRkJTU3hOUVVGTkxFZEJRVWNzVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4UFFVRlBMRWxCUVVrc1NVRkJTU3hGUVVGRkxFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU03UVVGRE9VUXNhVUpCUVVrc1MwRkJTeXhEUVVGRExFOUJRVThzUTBGQlF5eE5RVUZOTEVOQlFVTXNSVUZCUlN4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eFBRVUZQTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNc1MwRkRNVVFzU1VGQlNTeE5RVUZOTEVWQlFVVXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF6dFZRVU42UXp0QlFVTkVMR2RDUVVGUExFOUJRVThzUTBGQlF6dE5RVU5zUWp0RlFVTktPenR6UWtGRll5eExRVUZMTEVOQlFVTXNVMEZCVXl4RFFVRkRMRTlCUVU4N096czdPenM3UVVOeVFuUkRMR0ZCUVZrc1EwRkJRenM3T3pzN1FVRkZZaXhMUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEU5QlFVOHNSVUZCUlRzN096czdPMEZCVFdoQ0xGVkJRVXNzUTBGQlF5eFBRVUZQTEVkQlFVY3NWVUZCVXl4SFFVRkhMRVZCUVVVN1FVRkRNVUlzWjBKQlFVOHNUVUZCVFN4RFFVRkRMRk5CUVZNc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4TFFVRkxMR2RDUVVGblFpeERRVUZETzAxQlEyNUZMRU5CUVVNN1JVRkRURHM3YzBKQlJXTXNTMEZCU3l4RFFVRkRMRTlCUVU4N096czdPenM3UVVOaU5VSXNZVUZCV1N4RFFVRkRPenM3T3p0QlFVVmlMRXRCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVTBGQlV5eERRVUZETEV0QlFVc3NSVUZCUlR0QlFVTjRRaXhWUVVGTExFTkJRVU1zVTBGQlV5eERRVUZETEV0QlFVc3NSMEZCUnl4WlFVRlhPMEZCUVVVc1owSkJRVThzU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMDFCUVVVc1EwRkJRenRGUVVNeFJEczdjMEpCUldNc1MwRkJTeXhEUVVGRExGTkJRVk1zUTBGQlF5eExRVUZMT3pzN096czdPMEZEVG5CRExHRkJRVmtzUTBGQlF6czdPenM3UVVGRllpeExRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRk5CUVZNc1EwRkJReXhQUVVGUExFVkJRVVU3T3pzN096dEJRVTB4UWl4VlFVRkxMRU5CUVVNc1UwRkJVeXhEUVVGRExFOUJRVThzUjBGQlJ5eFZRVUZUTEZGQlFWRXNSVUZCUlN4UFFVRlBMRVZCUVVVN1FVRkRiRVFzWVVGQlNTeFBRVUZQTEZGQlFWRXNTMEZCU3l4VlFVRlZMRVZCUVVVN1FVRkRhRU1zYlVKQlFVMHNTVUZCU1N4TFFVRkxMRU5CUVVNc1VVRkJVU3hIUVVGSExHOUNRVUZ2UWl4RFFVRkRMRU5CUVVNN1ZVRkRjRVE3UVVGRFJDeGhRVUZKTEUxQlFVMHNSMEZCUnl4RlFVRkZMRU5CUVVNN1FVRkRhRUlzWTBGQlN5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eE5RVUZOTEVWQlFVVXNRMEZCUXl4RlFVRkZMRVZCUVVVN1FVRkRiRU1zYVVKQlFVa3NTMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU53UWl4cFFrRkJTU3hIUVVGSExFZEJRVWNzVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4UFFVRlBMRWxCUVVrc1NVRkJTU3hGUVVGRkxFdEJRVXNzUlVGQlJTeERRVUZETEVWQlFVVXNTVUZCU1N4RFFVRkRMRU5CUVVNN1FVRkRla1FzYVVKQlFVa3NSMEZCUnl4SlFVRkpMRWxCUVVrc1JVRkJSVHRCUVVOaUxIRkNRVUZKTEVkQlFVY3NTVUZCU1N4TlFVRk5MRVZCUTJJc1RVRkJUU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhMUVVWNFFpeE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWRCUVVjc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dGpRVU0zUWp0VlFVTktPMEZCUTBRc1owSkJRVThzVFVGQlRTeERRVUZETzAxQlEycENMRU5CUVVNN1JVRkRURHM3YzBKQlJXTXNTMEZCU3l4RFFVRkRMRk5CUVZNc1EwRkJReXhQUVVGUE96czdPenM3TzBGRE0wSjBReXhoUVVGWkxFTkJRVU03T3pzN08wRkJSV0lzUzBGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4VFFVRlRMRU5CUVVNc1QwRkJUeXhGUVVGRk96czdPenRCUVVzeFFpeFZRVUZMTEVOQlFVTXNVMEZCVXl4RFFVRkRMRTlCUVU4c1IwRkJSeXhWUVVGVExFbEJRVWtzUlVGQlJUdEJRVU55UXl4aFFVRkpMRTlCUVU4c1IwRkJSeXhGUVVGRkxFTkJRVU03UVVGRGFrSXNZMEZCU3l4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4TlFVRk5MRVZCUVVVc1EwRkJReXhKUVVGSkxFbEJRVWtzUlVGQlJUdEJRVU40UXl4dlFrRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXp0VlFVTjZRenRCUVVORUxHZENRVUZQTEU5QlFVOHNRMEZCUXp0TlFVTnNRaXhEUVVGRE8wVkJRMHc3TzNOQ1FVVmpMRXRCUVVzc1EwRkJReXhUUVVGVExFTkJRVU1zVDBGQlR6czdPenM3T3p0QlEyaENkRU1zWVVGQldTeERRVUZET3pzN096dEJRVVZpTEV0QlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1UwRkJVeXhEUVVGRExGbEJRVmtzUlVGQlJUczdPenM3UVVGTEwwSXNWVUZCU3l4RFFVRkRMRk5CUVZNc1EwRkJReXhaUVVGWkxFZEJRVWNzVlVGQlV5eEpRVUZKTEVWQlFVVTdRVUZETVVNc1lVRkJTU3hQUVVGUExFZEJRVWNzUlVGQlJTeERRVUZETzBGQlEycENMR05CUVVzc1NVRkJTU3hEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEUxQlFVMHNSVUZCUlN4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zU1VGQlNTeEpRVUZKTEVWQlFVVTdRVUZEZUVNc2IwSkJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0VlFVTjBSRHRCUVVORUxHZENRVUZQTEU5QlFVOHNRMEZCUXl4UFFVRlBMRVZCUVVVc1EwRkJRenROUVVNMVFpeERRVUZETzBWQlEwdzdPM05DUVVWakxFdEJRVXNzUTBGQlF5eFRRVUZUTEVOQlFVTXNXVUZCV1RzN096czdPenRCUTJoQ00wTXNZVUZCV1N4RFFVRkRPenM3T3pzN2NVSkJSVTRzUTBGQlZ6czdRVUZGYkVJc1MwRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eFRRVUZUTEVOQlFVTXNUMEZCVHl4RlFVRkZPMEZCUXpGQ0xGVkJRVXNzUTBGQlF5eFRRVUZUTEVOQlFVTXNUMEZCVHl4SFFVRkhMRlZCUVZNc1EwRkJReXhGUVVGRk8wRkJRMnhETEdGQlFVa3NRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdRVUZEZUVJc1lVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVWQlEwNHNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eExRVVZhTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03UVVGRGFrSXNaMEpCUVU4c1NVRkJTU3hEUVVGRE8wMUJRMllzUTBGQlF6dEZRVU5NT3p0elFrRkZZeXhMUVVGTExFTkJRVU1zVTBGQlV5eERRVUZETEU5QlFVODdPenM3T3pzN1FVTm1kRU1zWVVGQldTeERRVUZET3pzN096dEJRVVZpTEV0QlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1UwRkJVeXhEUVVGRExGTkJRVk1zUlVGQlJUdEJRVU0xUWl4VlFVRkxMRU5CUVVNc1UwRkJVeXhEUVVGRExGTkJRVk1zUjBGQlJ5eFpRVUZYTzBGQlEyNURMR0ZCUVVrc1NVRkJTU3hIUVVGSExFVkJRVVVzUTBGQlF6dEJRVU5rTEdOQlFVc3NTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RlFVRkZMRU5CUVVNc1JVRkJSU3hGUVVGRk8wRkJRMnhETEdsQ1FVRkpMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJUdEJRVU5VTEhGQ1FVRkpMRWxCUVVrc1EwRkJReXhOUVVGTkxFZEJRVWNzUTBGQlF5eEpRVUZKTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExFMUJRVTBzUjBGQlJ5eERRVUZETEVOQlFVTXNTMEZCU3l4SFFVRkhMRVZCUTNaRUxFbEJRVWtzU1VGQlNTeEhRVUZITEVOQlFVTTdPMEZCUldoQ0xIRkNRVUZKTEVsQlFVa3NTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExGRkJRVkVzUlVGQlJTeERRVUZETzJOQlF6bENPMVZCUTBvN1FVRkRSQ3huUWtGQlR5eEpRVUZKTEVOQlFVTTdUVUZEWml4RFFVRkRPMFZCUTB3N08zTkNRVVZqTEV0QlFVc3NRMEZCUXl4VFFVRlRMRU5CUVVNc1UwRkJVenM3T3pzN096dEJRMnBDZUVNc1lVRkJXU3hEUVVGRE96czdPenRCUVVWaUxFdEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWxCUVVrc1JVRkJSVHRCUVVOMlFpeFZRVUZMTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWxCUVVrc1IwRkJSeXhaUVVGWE8wRkJRVVVzWjBKQlFVOHNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTTdUVUZCUlN4RFFVRkRPMFZCUTNaRk96dHpRa0ZGWXl4TFFVRkxMRU5CUVVNc1UwRkJVeXhEUVVGRExFbEJRVWs3T3pzN096czdRVU5PYmtNc1lVRkJXU3hEUVVGRE96czdPenRCUVVWaUxFdEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWRCUVVjc1JVRkJSVHM3T3pzN1FVRkxkRUlzVlVGQlN5eERRVUZETEZOQlFWTXNRMEZCUXl4SFFVRkhMRWRCUVVjc1ZVRkJVeXhSUVVGUkxFVkJRVVVzVDBGQlR5eEZRVUZGTzBGQlF6bERMR0ZCUVVrc1RVRkJUU3hIUVVGSExFVkJRVVVzUTBGQlF6dEJRVU5vUWl4alFVRkxMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETEVsQlFVa3NTVUZCU1N4RFFVRkRMRTFCUVUwc1JVRkJSU3hEUVVGRExFVkJRVVVzUlVGQlJUdEJRVU51UXl4dFFrRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1NVRkJTU3hKUVVGSkxFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETzFWQlEycEZPMEZCUTBRc1owSkJRVThzVFVGQlRTeERRVUZETzAxQlEycENPMFZCUTBvN08zTkNRVVZqTEV0QlFVc3NRMEZCUXl4VFFVRlRMRU5CUVVNc1IwRkJSenM3T3pzN096dEJRMmhDYkVNc1lVRkJXU3hEUVVGRE96czdPenM3Y1VKQlJVNHNSVUZCVlRzN1FVRkZha0lzUzBGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4VFFVRlRMRU5CUVVNc1IwRkJSeXhGUVVGRk8wRkJRM1JDTEZWQlFVc3NRMEZCUXl4VFFVRlRMRU5CUVVNc1IwRkJSeXhIUVVGSExGbEJRVmM3UVVGRE4wSXNaMEpCUVU4c1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eFZRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRPMjlDUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNN1ZVRkJRU3hEUVVGRExFTkJRVU03VFVGRGFrUTdSVUZEU2pzN2MwSkJSV01zUzBGQlN5eERRVUZETEZOQlFWTXNRMEZCUXl4SFFVRkhPenM3T3pzN08wRkRWbXhETEdGQlFWa3NRMEZCUXpzN096czdRVUZGWWl4TFFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGTkJRVk1zUTBGQlF5eE5RVUZOTEVWQlFVVTdPenM3T3p0QlFVMTZRaXhWUVVGTExFTkJRVU1zVTBGQlV5eERRVUZETEUxQlFVMHNSMEZCUnl4VlFVRlRMRkZCUVZFc1JVRkJSU3hQUVVGUExFVkJRVVU3UVVGRGFrUXNZVUZCU1N4RlFVRkZMRWxCUVVrc1EwRkJReXhOUVVGTkxFZEJRVWNzUTBGQlF5eERRVUZETEVWQlFVVTdRVUZEY0VJc2JVSkJRVTBzU1VGQlNTeFRRVUZUTEVOQlFVTXNOa05CUVRaRExFTkJRVU1zUTBGQlF6dFZRVU4wUlR0QlFVTkVMR0ZCUVVrc1RVRkJUU3hIUVVGSExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTnlRaXhqUVVGTExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRWxCUVVrc1NVRkJTU3hEUVVGRExFMUJRVTBzUlVGQlJTeERRVUZETEVWQlFVVXNSVUZCUlR0QlFVTnVReXh0UWtGQlRTeEhRVUZITEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1QwRkJUeXhKUVVGSkxFbEJRVWtzUlVGQlJTeE5RVUZOTEVWQlFVVXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXp0VlFVTnlSVHRCUVVORUxHZENRVUZQTEUxQlFVMHNRMEZCUXp0TlFVTnFRaXhEUVVGRE8wVkJRMHc3TzNOQ1FVVmpMRXRCUVVzc1EwRkJReXhUUVVGVExFTkJRVU1zVFVGQlRUczdPenM3T3p0QlEzQkNja01zWVVGQldTeERRVUZET3pzN096czdjVUpCUlU0c1JVRkJWVHM3UVVGRmFrSXNTMEZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhUUVVGVExFTkJRVU1zUjBGQlJ5eEZRVUZGTzBGQlEzUkNMRlZCUVVzc1EwRkJReXhUUVVGVExFTkJRVU1zUjBGQlJ5eEhRVUZITEZsQlFWYzdRVUZETjBJc1owSkJRVThzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4VlFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRE8yOUNRVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWRCUVVrc1EwRkJReXhIUVVGSExFTkJRVU03VlVGQlFTeERRVUZETEVOQlFVTTdUVUZEYWtRN1JVRkRTanM3YzBKQlJXTXNTMEZCU3l4RFFVRkRMRk5CUVZNc1EwRkJReXhIUVVGSE96czdPenM3TzBGRFZteERMR0ZCUVZrc1EwRkJRenM3T3pzN1FVRkZZaXhMUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEV0QlFVc3NSVUZCUlRzN096czdPenM3UVVGUlpDeFZRVUZMTEVOQlFVTXNTMEZCU3l4SFFVRkhMRlZCUVZNc1NVRkJTU3hGUVVGRkxFVkJRVVVzUlVGQldUdGhRVUZXTEVsQlFVa3NlVVJCUVVjc1EwRkJRenM3UVVGRGNrTXNZVUZCU1N4TFFVRkxMRWRCUVVjc1JVRkJSU3hEUVVGRE8wRkJRMllzWVVGQlNTeFJRVUZSTEVkQlFVY3NUMEZCVHl4SlFVRkpMRXRCUVVzc1VVRkJVU3hKUVVGSkxFOUJRVThzUlVGQlJTeExRVUZMTEZGQlFWRXNRMEZCUXp0QlFVTnNSU3hoUVVGSkxFdEJRVXNzUjBGQlJ5eFJRVUZSTEVkQlFVY3NTVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJReXhSUVVGUkxFVkJRVVVzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkROVVFzWVVGQlNTeEhRVUZITEVkQlFVY3NVVUZCVVN4SFFVRkhMRVZCUVVVc1IwRkJSeXhGUVVGRkxFTkJRVU1zVVVGQlVTeEZRVUZGTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJRM1JFTEdGQlFVa3NSMEZCUnl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0QlFVTXpRaXhoUVVGSkxFdEJRVXNzUjBGQlJ5eEhRVUZITEVWQlFVVXNTVUZCU1N4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRE8wRkJRemxDTEdOQlFVc3NTVUZCU1N4RFFVRkRMRWRCUVVjc1MwRkJTeXhGUVVGRkxFbEJRVWtzUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkpMRWRCUVVjc1IwRkJSeXhEUVVGRExFbEJRVWtzUjBGQlJ5eEZRVUZGTEVOQlFVTXNTVUZCU1N4SlFVRkpMRVZCUVVVN1FVRkRNMFFzYTBKQlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hIUVVGSExFTkJRVU1zUjBGQlJ5eE5RVUZOTEVOQlFVTXNXVUZCV1N4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03VlVGRGNrUTdRVUZEUkN4blFrRkJUeXhMUVVGTExFTkJRVU03VFVGRGFFSXNRMEZCUXp0RlFVTk1PenR6UWtGRll5eExRVUZMTEVOQlFVTXNTMEZCU3pzN096czdPenRCUTNoQ01VSXNZVUZCV1N4RFFVRkRPenM3T3p0QlFVVmlMRXRCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVTBGQlV5eERRVUZETEUxQlFVMHNSVUZCUlR0QlFVTjZRaXhWUVVGTExFTkJRVU1zVTBGQlV5eERRVUZETEUxQlFVMHNSMEZCUnl4VlFVRlRMRU5CUVVNc1JVRkJSVHRCUVVOcVF5eGpRVUZMTEVsQlFVa3NRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhOUVVGTkxFZEJRVWNzUTBGQlF5eEZRVUZGTEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1JVRkJSU3hEUVVGRExFVkJRVVU3UVVGRGRrTXNhVUpCUVVrc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eExRVUZMTEVOQlFVTXNSVUZCUlR0QlFVTm1MSEZDUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRqUVVOeVFqdFZRVU5LTzBGQlEwUXNaMEpCUVU4c1NVRkJTU3hEUVVGRE8wMUJRMllzUTBGQlF6dEZRVU5NT3p0elFrRkZZeXhMUVVGTExFTkJRVU1zVTBGQlV5eERRVUZETEUxQlFVMDdPenM3T3pzN1FVTmlja01zWVVGQldTeERRVUZET3pzN096dEJRVVZpTEV0QlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1UwRkJVeXhEUVVGRExFbEJRVWtzUlVGQlJUczdPenM3TzBGQlRYWkNMRlZCUVVzc1EwRkJReXhUUVVGVExFTkJRVU1zU1VGQlNTeEhRVUZITEZWQlFWTXNVVUZCVVN4RlFVRkZMRTlCUVU4c1JVRkJSVHRCUVVNdlF5eGhRVUZKTEU5QlFVOHNVVUZCVVN4TFFVRkxMRlZCUVZVc1JVRkJSVHRCUVVOb1F5eHRRa0ZCVFN4SlFVRkpMRXRCUVVzc1EwRkJReXhSUVVGUkxFZEJRVWNzYjBKQlFXOUNMRU5CUVVNc1EwRkJRenRWUVVOd1JEdEJRVU5FTEdOQlFVc3NTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RlFVRkZMRU5CUVVNc1JVRkJSU3hGUVVGRk8wRkJRMnhETEdsQ1FVRkpMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zVDBGQlR5eEpRVUZKTEVsQlFVa3NSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEVsQlFVa3NRMEZCUXl4RlFVRkZMRTlCUVU4c1NVRkJTU3hEUVVGRE8xVkJRM0pGTzBGQlEwUXNaMEpCUVU4c1MwRkJTeXhEUVVGRE8wMUJRMmhDTEVOQlFVTTdSVUZEVERzN2MwSkJSV01zUzBGQlN5eERRVUZETEZOQlFWTXNRMEZCUXl4SlFVRkpPenM3T3pzN08wRkRia0p1UXl4aFFVRlpMRU5CUVVNN096czdPenM3UVVGRllpeExRVUZKTEdWQlFXTXNSVUZCUlRzN096czdPMEZCVFdoQ0xGZEJRVTBzUTBGQlF5eE5RVUZOTEVkQlFVY3NWVUZCVXl4SlFVRkpMRVZCUVVVN1FVRkRNMElzWjBKQlFVOHNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXd3UWtGQk1FSXNSVUZCUlN4TlFVRk5MRU5CUVVNc1EwRkJRenROUVVNelJDeERRVUZETzBWQlEwdzdPenM3T3pzN096dEJRMWhFTEcxQ1FVRnJRaXgzUkRzN096czdPMEZEUVd4Q08wRkJRMEVzZDBRN096czdPenRCUTBSQk8wRkJRMEU3UVVGRFFTeDVSRUZCZDBRN08wRkJSWGhFTEN0Q1FVRTRRaXcwUWtGQk5FSXNaMEpCUVdkQ0xFZEJRVWM3T3pzN096czdRVU5LTjBVN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeHZSVUZCYlVVN1FVRkRia1VzYzBaQlFYRkdPMEZCUTNKR08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeE5RVUZMTzBGQlEwd3NaMFZCUVN0RU8wRkJReTlFTzBGQlEwRTdRVUZEUVR0QlFVTkJMR1ZCUVdNN1FVRkRaQ3hsUVVGak8wRkJRMlFzWlVGQll6dEJRVU5rTEdWQlFXTTdRVUZEWkN4blFrRkJaVHRCUVVObUxHZENRVUZsTzBGQlEyWXNNRUk3T3pzN096dEJRemREUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3gzUTBGQmRVTXNaME03T3pzN096dEJRMGgyUXl3NFFrRkJOa0k3UVVGRE4wSXNjME5CUVhGRExHZERPenM3T3pzN1FVTkVja003UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEhPenM3T3pzN1FVTnVRa0U3UVVGRFFUdEJRVU5CTzBGQlEwRXNSenM3T3pzN08wRkRTRUU3UVVGRFFUdEJRVU5CTzBGQlEwRXNTVUZCUnp0QlFVTklPMEZCUTBFN1FVRkRRVHRCUVVOQkxFYzdPenM3T3p0QlExQkJMR0ZCUVZrc1EwRkJRenM3T3pzN1FVRkZZaXhMUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEZOQlFWTXNRMEZCUXl4dFFrRkJiVUlzUlVGQlJUczdPenRCUVVsMlF5eFhRVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRMRzFDUVVGdFFpeEhRVUZITEZsQlFWYzdRVUZET1VNc1lVRkJTU3hKUVVGSkxFTkJRVU1zVFVGQlRTeExRVUZMTEVOQlFVTXNSVUZCUlR0QlFVTnVRaXh0UWtGQlRTeEpRVUZKTEZWQlFWVXNRMEZCUXl4NVFrRkJlVUlzUTBGQlF5eERRVUZETzFWQlEyNUVPMEZCUTBRc1lVRkJTU3hKUVVGSkxFZEJRVWNzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4VFFVRlRMRVZCUVVVc1IwRkJSeXhEUVVGRExFTkJRVU1zVDBGQlR5eERRVUZETEhkQ1FVRjNRaXhGUVVGRkxFMUJRVTBzUTBGQlF5eERRVUZETzBGQlEyeEdMR0ZCUVVrc1QwRkJUeXhIUVVGSExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNaME5CUVdkRExFVkJRVVVzVlVGQlF5eEZRVUZGTEVWQlFVczdRVUZEYWtVc2NVSkJRVkVzUlVGQlJUdEJRVU5XTEhOQ1FVRkxMRXRCUVVzN1FVRkJSU3cwUWtGQlR5eGpRVUZqTEVOQlFVTTdRVUZEYkVNc2MwSkJRVXNzU1VGQlNUdEJRVUZGTERSQ1FVRlBMRWxCUVVrc1EwRkJRenRCUVVOMlFpeHpRa0ZCU3l4SlFVRkpPMEZCUVVVc05FSkJRVThzYVVKQlFXbENMRU5CUVVNN1FVRkRjRU1zYzBKQlFVc3NSMEZCUnp0QlFVRkZMRFJDUVVGUExFOUJRVThzUTBGQlF6dEJRVU42UWl4elFrRkJTeXhIUVVGSE8wRkJRVVVzTkVKQlFVOHNUVUZCVFN4RFFVRkRPMEZCUTNoQ0xITkNRVUZMTEVkQlFVYzdRVUZCUlN3MFFrRkJUeXhQUVVGUExFTkJRVU03UVVGQlFTeGpRVU40UWp0VlFVTktMRU5CUVVNc1EwRkJRenRCUVVOSUxHZENRVUZQTEVsQlFVa3NUVUZCVFN4RFFVRkRMRWxCUVVrc1IwRkJSeXhQUVVGUExFZEJRVWNzU1VGQlNTeERRVUZETEVOQlFVTTdUVUZETlVNc1EwRkJRenRGUVVOTU8wRkJRMFFzUzBGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJReXhGUVVGRk8wRkJRM0pDTEZkQlFVMHNRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJReXhIUVVGSExFMUJRVTBzUTBGQlF5eFRRVUZUTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU03UlVGRE4wUTdPM05DUVVWakxFMUJRVTBzUTBGQlF5eFRRVUZUTEVOQlFVTXNiVUpCUVcxQ096czdPenM3TzBGRE5VSnVSQ3hoUVVGWkxFTkJRVU03T3pzN096dHhRa0ZGVGl4RlFVRmxPenRCUVVWMFFpeExRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRk5CUVZNc1EwRkJReXhMUVVGTExFVkJRVVU3T3pzN08wRkJTM3BDTEZkQlFVMHNRMEZCUXl4VFFVRlRMRU5CUVVNc1MwRkJTeXhIUVVGSExGVkJRVk1zVjBGQlZ5eEZRVUZGTzBGQlF6TkRMR0ZCUVVrc1RVRkJUU3hIUVVGSExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNaMEpCUVdkQ0xFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTTdRVUZEYkVRc1lVRkJTU3hYUVVGWExFVkJRVVVzVDBGQlR5eE5RVUZOTEVOQlFVTXNWMEZCVnl4RlFVRkZMRU5CUVVNN1FVRkROME1zWjBKQlFVOHNUVUZCVFN4RFFVRkRPMDFCUTJwQ0xFTkJRVU03UlVGRFREczdjMEpCUldNc1RVRkJUU3hEUVVGRExGTkJRVk1zUTBGQlF5eExRVUZMT3pzN096czdPMEZEYUVKeVF5eGhRVUZaTEVOQlFVTTdPenM3TzBGQlJXSXNTMEZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhUUVVGVExFTkJRVU1zVjBGQlZ5eEZRVUZGTzBGQlF5OUNMRmRCUVUwc1EwRkJReXhUUVVGVExFTkJRVU1zVjBGQlZ5eEhRVUZITEZsQlFWYzdRVUZEZEVNc1owSkJRVThzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4blEwRkJaME1zUlVGQlJTeFZRVUZETEVWQlFVVXNSVUZCU3p0QlFVTXhSQ3h4UWtGQlVTeEZRVUZGTzBGQlExWXNjMEpCUVVzc1RVRkJUVHRCUVVGRkxEUkNRVUZQTEVkQlFVY3NRMEZCUXp0QlFVTjRRaXh6UWtGQlN5eE5RVUZOTzBGQlFVVXNORUpCUVU4c1IwRkJSeXhEUVVGRE8wRkJRM2hDTEhOQ1FVRkxMRTlCUVU4N1FVRkJSU3cwUWtGQlR5eEhRVUZITEVOQlFVTTdRVUZEZWtJc2MwSkJRVXNzVDBGQlR6dEJRVUZGTERSQ1FVRlBMRWRCUVVjc1EwRkJRenRCUVVONlFpeHpRa0ZCU3l4UFFVRlBPMEZCUVVVc05FSkJRVThzUjBGQlJ5eERRVUZETzBGQlEzcENPMEZCUVZNc05FSkJRVThzUlVGQlJTeERRVUZETzBGQlFVRXNZMEZEYkVJN1ZVRkRTaXhEUVVGRExFTkJRVU03VFVGRFRqdEZRVU5LT3p0elFrRkZZeXhOUVVGTkxFTkJRVU1zVTBGQlV5eERRVUZETEZkQlFWYzdPenM3T3pzN1FVTnFRak5ETEdGQlFWa3NRMEZCUXpzN096czdRVUZGWWl4TFFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExGTkJRVk1zUTBGQlF5eFRRVUZUTEVWQlFVVTdRVUZETjBJc1YwRkJUU3hEUVVGRExGTkJRVk1zUTBGQlF5eFRRVUZUTEVkQlFVY3NWVUZCVXl4SFFVRkhMRVZCUVVVN1FVRkRka01zWVVGQlNTeEhRVUZITEVsQlFVa3NTVUZCU1N4SlFVRkpMRWxCUVVrc1IwRkJSeXhIUVVGSExFVkJRVVVzVDBGQlR5eERRVUZETEVOQlFVTTdRVUZEZUVNc1lVRkJTU3hKUVVGSkxFZEJRVWNzUjBGQlJ5eEZRVUZGTEU5QlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkRNVUlzWjBKQlFVOHNRMEZCUXl4RFFVRkRPMDFCUTFvc1EwRkJRenRGUVVOTU96dHpRa0ZGWXl4TlFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRExGTkJRVk03T3pzN096czdRVU5XZWtNc1lVRkJXU3hEUVVGRE96czdPenRCUVVWaUxFdEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRMRkZCUVZFc1JVRkJSVHM3T3p0QlFVazFRaXhUUVVGTkxFTkJRVU1zVTBGQlV5eERRVUZETEZGQlFWRXNSMEZCUnl4VlFVRlRMRWRCUVVjc1JVRkJSVHRCUVVGRkxGbEJRVThzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF6dEpRVUZGTEVOQlFVTTdSVUZEYUVZN08zTkNRVVZqTEUxQlFVMHNRMEZCUXl4VFFVRlRMRU5CUVVNc1VVRkJVVHM3T3pzN096dEJRMVI0UXl4aFFVRlpMRU5CUVVNN096czdPenR4UWtGRlRpeERRVUZ2UWpzN2NVSkJRM0JDTEVWQlFXRTdPMEZCUlhCQ0xFdEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRMRk5CUVZNc1JVRkJSVHM3T3pzN096dEJRVTgzUWl4WFFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRExGTkJRVk1zUjBGQlJ5eFZRVUZUTEZOQlFWTXNSVUZCUlN4VFFVRlRMRVZCUVVVc1RVRkJUU3hGUVVGRk96czdRVUZEYUVVc1lVRkJTU3hSUVVGUkxFZEJRVWNzUTBGQlF5eERRVUZETzBGQlEycENMR0ZCUVVrc1QwRkJUeXhIUVVGSExGTkJRVllzVDBGQlR6dHZRa0ZCVXl4WFFVRlZMRkZCUVZFc1EwRkJRenRWUVVGQkxFTkJRVU03UVVGRGVFTXNZVUZCU1N4UlFVRlJMRWRCUVVjc1UwRkJXQ3hSUVVGUk8yOUNRVUZUTEZkQlFWVXNVVUZCVVN4RlFVRkZMRU5CUVVNN1ZVRkJRU3hEUVVGRE96dEJRVVV6UXl4clFrRkJVeXhIUVVGSExFTkJRVU1zVTBGQlV5eEZRVUZGTEZGQlFWRXNRMEZCUXl4RFFVRkRMRkZCUVZFc1EwRkJReXhQUVVGUExFOUJRVThzUlVGQlJTeERRVUZETEVkQlFVY3NVVUZCVVN4RlFVRkZMRWRCUVVjc1MwRkJTeXhEUVVGRE96dEJRVVZzUml4aFFVRkpMRTlCUVU4c1QwRkJUeXhGUVVGRkxFdEJRVXNzVVVGQlVTeEZRVUZGTzBGQlF5OUNMRzFDUVVGTkxFbEJRVWtzVTBGQlV5eERRVUZETEU5QlFVOHNSVUZCUlN4SFFVRkhMR3RDUVVGclFpeERRVUZETEVOQlFVTTdWVUZEZGtRN1FVRkRSQ3hyUWtGQlV5eEhRVUZITEZGQlFWRXNSVUZCUlN4RFFVRkRPenRCUVVWMlFpeGxRVUZOTEVkQlFVY3NUMEZCVHl4UFFVRlBMRVZCUVVVc1MwRkJTeXhSUVVGUkxFZEJRVWNzVVVGQlVTeEZRVUZGTEVkQlFVY3NSVUZCUlN4RFFVRkRPenRCUVVWNlJDeGhRVUZKTEUxQlFVMHNSMEZCUnl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETzBGQlEzWkRMR0ZCUVVrc1JVRkJSU3hOUVVGTkxFZEJRVWNzVTBGQlV5eERRVUZETEVWQlFVVXNUMEZCVHl4SlFVRkpMRU5CUVVNN08wRkJSWFpETEdGQlFVa3NXVUZCV1N4SFFVRkhMRTFCUVUwc1EwRkJReXhUUVVGVExFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVTTdRVUZETDBNc1lVRkJTU3haUVVGWkxFZEJRVWNzVTBGQlV5eEZRVUZGTzBGQlF6RkNMRzFDUVVGTkxFbEJRVWtzVlVGQlZTeERRVUZETERSRFFVRTBReXhEUVVGRExFTkJRVU03VlVGRGRFVTdRVUZEUkN4aFFVRkpMRmxCUVZrc1IwRkJSeXhGUVVGRkxFTkJRVU03UVVGRGRFSXNZVUZCU1N4aFFVRmhMRWRCUVVjc1EwRkJReXhEUVVGRE8wRkJRM1JDTEdOQlFVc3NTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RlFVRkZMRU5CUVVNc1JVRkJSU3hGUVVGRk8wRkJRMnhETEdsQ1FVRkpMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUTNaQ0xHbENRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1UwRkJVeXhEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETzBGQlF5OUNMR2xDUVVGSkxHRkJRV0VzUjBGQlJ5eERRVUZETEVkQlFVY3NVMEZCVXl4SFFVRkhMRmxCUVZrc1JVRkJSU3hOUVVGTk8wRkJRM2hFTERCQ1FVRmhMRWxCUVVrc1EwRkJReXhEUVVGRE8wRkJRMjVDTEhsQ1FVRlpMRWxCUVVrc1EwRkJReXhEUVVGRE8xVkJRM0pDTzBGQlEwUXNaMEpCUVU4c1dVRkJXU3hIUVVGSExFMUJRVTBzUTBGQlF6dE5RVU5vUXl4RFFVRkRPMFZCUTB3N08zTkNRVVZqTEUxQlFVMHNRMEZCUXl4VFFVRlRMRU5CUVVNc1UwRkJVenM3T3pzN096dEJRemxEZWtNc1lVRkJXU3hEUVVGRE96czdPenM3Y1VKQlJVNHNRMEZCYjBJN08wRkJSVE5DTEV0QlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRExGTkJRVk1zUlVGQlJUczdPenM3UVVGTE4wSXNWMEZCVFN4RFFVRkRMRk5CUVZNc1EwRkJReXhUUVVGVExFZEJRVWNzVlVGQlV5eFRRVUZUTEVWQlFVVTdPenRCUVVNM1F5eGhRVUZKTEZGQlFWRXNSMEZCUnl4RFFVRkRMRU5CUVVNN1FVRkRha0lzWVVGQlNTeFBRVUZQTEVkQlFVY3NVMEZCVml4UFFVRlBPMjlDUVVGVExGZEJRVlVzVVVGQlVTeERRVUZETzFWQlFVRXNRMEZCUXp0QlFVTjRReXhoUVVGSkxGRkJRVkVzUjBGQlJ5eFRRVUZZTEZGQlFWRTdiMEpCUVZNc1YwRkJWU3hSUVVGUkxFVkJRVVVzUTBGQlF6dFZRVUZCTEVOQlFVTTdPMEZCUlRORExHdENRVUZUTEVkQlFVY3NRMEZCUXl4VFFVRlRMRVZCUVVVc1VVRkJVU3hEUVVGRExFTkJRVU1zVVVGQlVTeERRVUZETEU5QlFVOHNUMEZCVHl4RlFVRkZMRU5CUVVNc1IwRkJSeXhSUVVGUkxFVkJRVVVzUjBGQlJ5eExRVUZMTEVOQlFVTTdRVUZEYkVZc1lVRkJTU3hUUVVGVExFdEJRVXNzUzBGQlN5eEZRVUZGTEU5QlFVOHNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJRenM3UVVGRk5VTXNZVUZCU1N4TlFVRk5MRWRCUVVjc1EwRkJReXhEUVVGRE8wRkJRMllzWTBGQlN5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eE5RVUZOTEVWQlFVVXNRMEZCUXl4RlFVRkZMRVZCUVVVN1FVRkRiRU1zYVVKQlFVa3NRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdRVUZETTBJc2NVSkJRVkVzUzBGQlN6dEJRVU5pTEhOQ1FVRkxMRVZCUVVVc1EwRkJReXhKUVVGSkxGRkJRVkVzUTBGQlF6dEJRVU5xUWl3eVFrRkJUU3hKUVVGSkxFTkJRVU1zUTBGQlF6dEJRVU5hTERKQ1FVRk5PMEZCUTFZc2MwSkJRVXNzUlVGQlJTeFBRVUZQTEZOQlFWTXNTMEZCU3l4UlFVRlJMRWxCUVVrc1UwRkJVeXhIUVVGSExFTkJRVU1zUTBGQlF6dEJRVU5zUkN3eVFrRkJUU3hKUVVGSkxGTkJRVk1zUTBGQlF6dEJRVU53UWl3eVFrRkJUVHRCUVVOV0xITkNRVUZMTEVWQlFVVXNRMEZCUXl4SlFVRkpMRkZCUVZFc1EwRkJRenRCUVVOcVFpd3lRa0ZCVFN4SlFVRkpMRU5CUVVNc1EwRkJRenRCUVVOYUxESkNRVUZOTzBGQlExWXNjMEpCUVVzc1JVRkJSU3hEUVVGRExFbEJRVWtzVVVGQlVTeERRVUZETzBGQlEycENMREpDUVVGTkxFbEJRVWtzUTBGQlF5eERRVUZETzBGQlExb3NNa0pCUVUwN1FVRkRWanRCUVVOSkxESkNRVUZOTEVsQlFVa3NRMEZCUXl4RFFVRkRPMEZCUVVFc1kwRkRaanRWUVVOS08wRkJRMFFzWjBKQlFVOHNUVUZCVFN4RFFVRkRPMDFCUTJwQ0xFTkJRVU03UlVGRFREczdjMEpCUldNc1RVRkJUU3hEUVVGRExGTkJRVk1zUTBGQlF5eFRRVUZUT3pzN096czdPMEZEZWtONlF5eGhRVUZaTEVOQlFVTTdPenM3TzBGQlJXSXNTMEZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhUUVVGVExFTkJRVU1zVVVGQlVTeEZRVUZGT3pzN096dEJRVXMxUWl4WFFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRExGRkJRVkVzUjBGQlJ5eFZRVUZUTEVkQlFVY3NSVUZCUlR0QlFVTjBReXhoUVVGSkxFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8wRkJRemxDTEdkQ1FVRlBMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NTVUZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSeXhIUVVGSExFTkJRVU1zVVVGQlVTeEZRVUZGTEVOQlFVTXNUVUZCVFN4RFFVRkRPMDFCUXpsRUxFTkJRVU03UlVGRFREczdjMEpCUldNc1RVRkJUU3hEUVVGRExGTkJRVk1zUTBGQlF5eFJRVUZST3pzN096czdPMEZEWW5oRExHRkJRVmtzUTBGQlF6czdPenM3TzNGQ1FVVk9MRU5CUVcxQ096dEJRVVV4UWl4TFFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExGTkJRVk1zUTBGQlF5eE5RVUZOTEVWQlFVVTdRVUZETVVJc1YwRkJUU3hEUVVGRExGTkJRVk1zUTBGQlF5eE5RVUZOTEVkQlFVY3NXVUZCVnpzN08wRkJRMnBETEdkQ1FVRlBMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zZFVKQlFYVkNMRVZCUVVVc1ZVRkJReXhGUVVGRkxFVkJRVVVzUlVGQlJTeEZRVUZGTEVWQlFVVXNSVUZCU3p0QlFVTjZSQ3h4UWtGQlVTeEZRVUZGTzBGQlExWXNjMEpCUVVzc1NVRkJTVHRCUVVGRkxEUkNRVUZQTEVkQlFVY3NRMEZCUXp0QlFVTjBRaXh6UWtGQlN5eEpRVUZKTzBGQlFVVXNORUpCUVU4c1IwRkJSeXhEUVVGRE8wRkJRM1JDTEhOQ1FVRkxMRWxCUVVrN1FVRkJSU3cwUWtGQlR5eEhRVUZITEVOQlFVTTdRVUZEZEVJN1FVRkJVeXcwUWtGQlR5eERRVUZETEVOQlFVTXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zUjBGQlJ5eFhRVUZWTEVOQlFVTXNRMEZCUXl4SlFVRkpMRVZCUVVVc1IwRkJSeXhMUVVGTExFTkJRVU1zVDBGQlR5eERRVUZETEZkQlFWVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1IwRkJSeXhYUVVGVkxFTkJRVU1zUTBGQlF5eGhRVUZaTEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVNN1FVRkJRU3hqUVVOMFNEdFZRVU5LTEVOQlFVTXNRMEZCUXp0TlFVTk9PMFZCUTBvN08zTkNRVVZqTEUxQlFVMHNRMEZCUXl4VFFVRlRMRU5CUVVNc1RVRkJUVHM3T3pzN096dEJRMnBDZEVNc1lVRkJXU3hEUVVGRE96czdPenRCUVVWaUxFdEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRMR1ZCUVdVc1JVRkJSVHM3T3pzN1FVRkxia01zVjBGQlRTeERRVUZETEZOQlFWTXNRMEZCUXl4bFFVRmxMRWRCUVVjc1dVRkJWenRCUVVNeFF5eGhRVUZKTEV0QlFVc3NSMEZCUnl4NVFrRkJlVUlzUTBGQlF6dEJRVU4wUXl4aFFVRkpMRk5CUVZNc1IwRkJSeXhGUVVGRkxFTkJRVU03UVVGRGJrSXNZVUZCU1N4UFFVRlBMR0ZCUVVNN1FVRkRXaXhuUWtGQlR5eFBRVUZQTEVkQlFVY3NTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGQlJUdEJRVU12UWl4cFFrRkJTU3hMUVVGTExFZEJRVWNzVDBGQlR5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUTNaQ0xHbENRVUZKTEV0QlFVc3NTMEZCU3l4SlFVRkpMRWxCUVVrc1MwRkJTeXhMUVVGTExFbEJRVWtzU1VGQlNTeExRVUZMTEV0QlFVc3NTVUZCU1N4RlFVRkZPMEZCUTNCRUxEQkNRVUZUTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzJOQlF6bENPMVZCUTBvN1FVRkRSQ3huUWtGQlR5eFRRVUZUTEVOQlFVTTdUVUZEY0VJc1EwRkJRenRGUVVOTU96dHpRa0ZGWXl4TlFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRExHVkJRV1U3T3pzN096czdRVU55UWk5RExHRkJRVmtzUTBGQlF6czdPenM3UVVGRllpeExRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRk5CUVZNc1EwRkJReXhQUVVGUExFVkJRVVU3T3pzN08wRkJTek5DTEZkQlFVMHNRMEZCUXl4VFFVRlRMRU5CUVVNc1QwRkJUeXhIUVVGSExGVkJRVk1zU1VGQlNTeEZRVUZGTzBGQlEzUkRMR0ZCUVVrc1JVRkJSU3hKUVVGSkxFZEJRVWNzUTBGQlF5eERRVUZETEVWQlFVVTdRVUZEWWl4dFFrRkJUU3hKUVVGSkxGVkJRVlVzUTBGQlF5eHZRa0ZCYjBJc1EwRkJReXhEUVVGRE8xVkJRemxETzBGQlEwUXNZVUZCU1N4UFFVRlBMRWxCUVVrc1MwRkJTeXhSUVVGUkxFVkJRVVVzU1VGQlNTeEhRVUZITEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNN1FVRkRia1FzWVVGQlNTeFBRVUZQTEVkQlFVY3NSVUZCUlN4RFFVRkRPMEZCUTJwQ0xHTkJRVXNzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zVFVGQlRTeEZRVUZGTEVOQlFVTXNTVUZCU1N4SlFVRkpMRVZCUVVVN1FVRkRlRU1zYjBKQlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU03VlVGRGVrTTdRVUZEUkN4blFrRkJUeXhQUVVGUExFTkJRVU03VFVGRGJFSXNRMEZCUXp0RlFVTk1PenR6UWtGRll5eE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRMRTlCUVU4N096czdPenM3UVVOd1FuWkRMR0ZCUVZrc1EwRkJRenM3T3pzN1FVRkZZaXhMUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEZOQlFWTXNRMEZCUXl4WlFVRlpMRVZCUVVVN096czdPMEZCUzJoRExGZEJRVTBzUTBGQlF5eFRRVUZUTEVOQlFVTXNXVUZCV1N4SFFVRkhMRlZCUVZNc1NVRkJTU3hGUVVGRk8wRkJRek5ETEdGQlFVa3NSVUZCUlN4SlFVRkpMRWRCUVVjc1EwRkJReXhEUVVGRExFVkJRVVU3UVVGRFlpeHRRa0ZCVFN4SlFVRkpMRlZCUVZVc1EwRkJReXh2UWtGQmIwSXNRMEZCUXl4RFFVRkRPMVZCUXpsRE8wRkJRMFFzWVVGQlNTeFBRVUZQTEVsQlFVa3NTMEZCU3l4UlFVRlJMRVZCUVVVc1NVRkJTU3hIUVVGSExGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTTdRVUZEYmtRc1lVRkJTU3hQUVVGUExFZEJRVWNzUlVGQlJTeERRVUZETzBGQlEycENMR05CUVVzc1NVRkJTU3hEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEUxQlFVMHNSVUZCUlN4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zU1VGQlNTeEpRVUZKTEVWQlFVVTdRVUZEZUVNc2IwSkJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0VlFVTjBSRHRCUVVORUxHZENRVUZQTEU5QlFVOHNRMEZCUXl4UFFVRlBMRVZCUVVVc1EwRkJRenROUVVNMVFpeERRVUZETzBWQlEwdzdPM05DUVVWakxFMUJRVTBzUTBGQlF5eFRRVUZUTEVOQlFVTXNXVUZCV1RzN096czdPenRCUTNCQ05VTXNZVUZCV1N4RFFVRkRPenM3T3pzN2NVSkJSVTRzUlVGQlZUczdRVUZGYWtJc1MwRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eFRRVUZUTEVOQlFVTXNUMEZCVHl4RlFVRkZPenM3T3pzN1FVRk5NMElzVjBGQlRTeERRVUZETEZOQlFWTXNRMEZCUXl4UFFVRlBMRWRCUVVjc1ZVRkJVeXhOUVVGTkxFVkJRVVVzVVVGQlVTeEZRVUZGTzBGQlEyeEVMR0ZCUVVrc1QwRkJUeXhOUVVGTkxFdEJRVXNzVVVGQlVTeEZRVUZGTzBGQlF6VkNMRzFDUVVGTkxFbEJRVWtzVTBGQlV5eERRVUZETEUxQlFVMHNSMEZCUnl4clFrRkJhMElzUTBGQlF5eERRVUZETzFWQlEzQkVPMEZCUTBRc1lVRkJTU3hEUVVGRExGRkJRVkVzUlVGQlJTeFJRVUZSTEVkQlFVY3NSMEZCUnl4RFFVRkRPMEZCUXpsQ0xHRkJRVWtzU1VGQlNTeERRVUZETEUxQlFVMHNTVUZCU1N4TlFVRk5MRVZCUVVVc1QwRkJUeXhKUVVGSkxFTkJRVU1zVVVGQlVTeEZRVUZGTEVOQlFVTTdRVUZEYkVRc1owSkJRVThzVVVGQlVTeERRVUZETEUxQlFVMHNRMEZCUXl4TlFVRk5MRWRCUVVjc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4UlFVRlJMRVZCUVVVc1EwRkJRenROUVVOc1JTeERRVUZETzBWQlEwdzdRVUZEUkN4TFFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExGTkJRVk1zUTBGQlF5eEpRVUZKTEVWQlFVVTdRVUZEZUVJc1YwRkJUU3hEUVVGRExGTkJRVk1zUTBGQlF5eEpRVUZKTEVkQlFVY3NUVUZCVFN4RFFVRkRMRk5CUVZNc1EwRkJReXhQUVVGUExFTkJRVU03UlVGRGNFUTdPM05DUVVWakxFMUJRVTBzUTBGQlF5eFRRVUZUTEVOQlFVTXNUMEZCVHpzN096czdPenRCUTNaQ2RrTXNZVUZCV1N4RFFVRkRPenM3T3p0QlFVVmlMRXRCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zVTBGQlV5eERRVUZETEUxQlFVMHNSVUZCUlRzN096czdRVUZMTVVJc1YwRkJUU3hEUVVGRExGTkJRVk1zUTBGQlF5eE5RVUZOTEVkQlFVY3NWVUZCVXl4TFFVRkxMRVZCUVVVN1FVRkRkRU1zWVVGQlNTeEZRVUZGTEV0QlFVc3NTVUZCU1N4RFFVRkRMRU5CUVVNc1JVRkJSVHRCUVVObUxHMUNRVUZOTEVsQlFVa3NWVUZCVlN4RFFVRkRMSEZDUVVGeFFpeERRVUZETEVOQlFVTTdWVUZETDBNN1FVRkRSQ3hoUVVGSkxFMUJRVTBzUjBGQlJ5eEZRVUZGTEVOQlFVTTdRVUZEYUVJc1kwRkJTeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4SFFVRkhMRXRCUVVzc1JVRkJSU3hEUVVGRExFVkJRVVVzUlVGQlJUdEJRVU0xUWl4dFFrRkJUU3hKUVVGSkxFbEJRVWtzUTBGQlF5eFJRVUZSTEVWQlFVVXNRMEZCUXp0VlFVTTNRanRCUVVORUxHZENRVUZQTEUxQlFVMHNRMEZCUXp0TlFVTnFRaXhEUVVGRE8wVkJRMHc3TzNOQ1FVVmpMRTFCUVUwc1EwRkJReXhUUVVGVExFTkJRVU1zVFVGQlRUczdPenM3T3p0QlEyNUNkRU1zWVVGQldTeERRVUZET3pzN096czdjVUpCUlU0c1JVRkJZVHM3UVVGRmNFSXNTMEZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhUUVVGVExFTkJRVU1zUzBGQlN5eEZRVUZGT3pzN096dEJRVXQ2UWl4WFFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRExFdEJRVXNzUjBGQlJ5eFZRVUZUTEZOQlFWTXNSVUZCUlR0QlFVTjZReXhuUWtGQlR5eERRVUZETEZOQlFWTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1UwRkJVeXhGUVVGRkxFZEJRVWNzU1VGQlNTeEZRVUZGTEU5QlFVOHNRMEZCUXl4dlFrRkJiMElzUlVGQlJTeFBRVUZQTEVOQlFVTXNRMEZCUXp0TlFVTjJSanRGUVVOS096dHpRa0ZGWXl4TlFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRExFdEJRVXM3T3pzN096czdRVU5rY2tNc1lVRkJXU3hEUVVGRE96czdPenRCUVVWaUxFdEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRMRk5CUVZNc1JVRkJSVHRCUVVNM1FpeFhRVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRMRk5CUVZNc1IwRkJSeXhaUVVGWE8wRkJRM0JETEdkQ1FVRlBMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zWTBGQll5eEZRVUZGTEZWQlFVTXNSVUZCUlN4RlFVRkxPMEZCUTNoRExIRkNRVUZSTEVWQlFVVTdRVUZEVml4elFrRkJTeXhIUVVGSE8wRkJRVVVzTkVKQlFVOHNUVUZCVFN4RFFVRkRPMEZCUTNoQ0xITkNRVUZMTEVkQlFVYzdRVUZCUlN3MFFrRkJUeXhOUVVGTkxFTkJRVU03UVVGRGVFSXNjMEpCUVVzc1IwRkJSenRCUVVGRkxEUkNRVUZQTEU5QlFVOHNRMEZCUXp0QlFVTjZRaXh6UWtGQlN5eEhRVUZITzBGQlFVVXNORUpCUVU4c1QwRkJUeXhEUVVGRE8wRkJRM3BDTEhOQ1FVRkxMRWRCUVVjN1FVRkJSU3cwUWtGQlR5eFBRVUZQTEVOQlFVTTdRVUZEZWtJN1FVRkJVeXcwUWtGQlR5eEZRVUZGTEVOQlFVTTdRVUZCUVN4alFVTnNRanRWUVVOS0xFTkJRVU1zUTBGQlF6dE5RVU5PTzBWQlEwbzdPM05DUVVWakxFMUJRVTBzUTBGQlF5eFRRVUZUTEVOQlFVTXNVMEZCVXpzN096czdPenRCUTJwQ2VrTXNZVUZCV1N4RFFVRkRPenM3T3p0QlFVVmlMRXRCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zVTBGQlV5eERRVUZETEV0QlFVc3NSVUZCUlRzN096czdRVUZMZWtJc1YwRkJUU3hEUVVGRExGTkJRVk1zUTBGQlF5eExRVUZMTEVkQlFVY3NWVUZCVXl4WFFVRlhMRVZCUVVVN1FVRkRNME1zWVVGQlNTeFBRVUZQTEZkQlFWY3NTMEZCU3l4VFFVRlRMRVZCUVVVc1YwRkJWeXhIUVVGSExFbEJRVWtzUTBGQlF6dEJRVU42UkN4aFFVRkpMRU5CUVVNc1YwRkJWeXhKUVVGSkxFbEJRVWtzUTBGQlF5eE5RVUZOTEVsQlFVa3NRMEZCUXl4RlFVRkZPMEZCUTJ4RExHbENRVUZKTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRExFdEJRVXNzUjBGQlJ5eEpRVUZKTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExFMUJRVTBzUjBGQlJ5eERRVUZETEVOQlFVTXNTMEZCU3l4SFFVRkhMRVZCUVVVc1QwRkJUeXhKUVVGSkxFTkJRVU1zVVVGQlVTeEZRVUZGTEVOQlFVTTdRVUZETTBZc2FVSkJRVWtzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNc1MwRkJTeXhIUVVGSExFbEJRVWtzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hIUVVGSExFTkJRVU1zUTBGQlF5eExRVUZMTEVkQlFVY3NSVUZCUlN4UFFVRlBMRWxCUVVrc1EwRkJReXhSUVVGUkxFVkJRVVVzUTBGQlF6dFZRVU01Ump0QlFVTkVMR2RDUVVGUExFZEJRVWNzUjBGQlJ5eEpRVUZKTEVkQlFVY3NSMEZCUnl4RFFVRkRPMDFCUXpOQ0xFTkJRVU03UlVGRFREczdjMEpCUldNc1RVRkJUU3hEUVVGRExGTkJRVk1zUTBGQlF5eExRVUZMT3pzN096czdPMEZEYWtKeVF5eGhRVUZaTEVOQlFVTTdPenM3TzBGQlJXSXNTMEZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhUUVVGVExFTkJRVU1zUzBGQlN5eEZRVUZGT3pzN096dEJRVXQ2UWl4WFFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRExFdEJRVXNzUjBGQlJ5eFZRVUZUTEV0QlFVc3NSVUZCUlR0QlFVRkZMR2RDUVVGUExFbEJRVWtzVFVGQlRTeERRVUZETEVsQlFVa3NSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJRenROUVVGRkxFTkJRVU03UlVGRGFFWTdRVUZEUkN4TFFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETEVWQlFVVTdRVUZEY2tJc1YwRkJUU3hEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETEVkQlFVY3NUVUZCVFN4RFFVRkRMRk5CUVZNc1EwRkJReXhMUVVGTExFTkJRVU03UlVGREwwTTdPM05DUVVWakxFMUJRVTBzUTBGQlF5eFRRVUZUTEVOQlFVTXNTMEZCU3pzN096czdPenRCUTJKeVF5eGhRVUZaTEVOQlFVTTdPenM3T3p0eFFrRkZUaXhGUVVGVk96dEJRVVZxUWl4TFFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExGTkJRVk1zUTBGQlF5eFJRVUZSTEVWQlFVVTdPenM3T3p0QlFVMDFRaXhYUVVGTkxFTkJRVU1zVTBGQlV5eERRVUZETEZGQlFWRXNSMEZCUnl4VlFVRlRMRTFCUVUwc1JVRkJSU3hSUVVGUkxFVkJRVVU3UVVGRGJrUXNZVUZCU1N4UFFVRlBMRTFCUVUwc1MwRkJTeXhSUVVGUkxFVkJRVVU3UVVGRE5VSXNiVUpCUVUwc1NVRkJTU3hUUVVGVExFTkJRVU1zVFVGQlRTeEhRVUZITEd0Q1FVRnJRaXhEUVVGRExFTkJRVU03VlVGRGNFUTdRVUZEUkN4aFFVRkpMRU5CUVVNc1VVRkJVU3hGUVVGRkxGRkJRVkVzUjBGQlJ5eEhRVUZITEVOQlFVTTdRVUZET1VJc1lVRkJTU3hKUVVGSkxFTkJRVU1zVFVGQlRTeEpRVUZKTEUxQlFVMHNSVUZCUlN4UFFVRlBMRWxCUVVrc1EwRkJReXhSUVVGUkxFVkJRVVVzUTBGQlF6dEJRVU5zUkN4blFrRkJUeXhKUVVGSkxFTkJRVU1zVVVGQlVTeEZRVUZGTEVkQlFVY3NVVUZCVVN4RFFVRkRMRTFCUVUwc1EwRkJReXhOUVVGTkxFZEJRVWNzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMDFCUTJ4RkxFTkJRVU03UlVGRFREdEJRVU5FTEV0QlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRExFbEJRVWtzUlVGQlJUdEJRVU40UWl4WFFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRExFbEJRVWtzUjBGQlJ5eE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRMRkZCUVZFc1EwRkJRenRGUVVOeVJEczdjMEpCUldNc1RVRkJUU3hEUVVGRExGTkJRVk1zUTBGQlF5eFJRVUZST3pzN096czdPMEZEZGtKNFF5eGhRVUZaTEVOQlFVTTdPenM3TzBGQlJXSXNTMEZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhUUVVGVExFTkJRVU1zVlVGQlZTeEZRVUZGT3pzN08wRkJTVGxDTEZOQlFVMHNRMEZCUXl4VFFVRlRMRU5CUVVNc1ZVRkJWU3hIUVVGSExGVkJRVk1zUjBGQlJ5eEZRVUZGTzBGQlFVVXNXVUZCVHl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0SlFVRkZMRU5CUVVNN1JVRkRia1k3TzNOQ1FVVmpMRTFCUVUwc1EwRkJReXhUUVVGVExFTkJRVU1zVlVGQlZUczdPenM3T3p0QlExUXhReXhoUVVGWkxFTkJRVU03T3pzN08wRkJSV0lzUzBGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4VFFVRlRMRU5CUVVNc1QwRkJUeXhGUVVGRk8wRkJRek5DTEZkQlFVMHNRMEZCUXl4VFFVRlRMRU5CUVVNc1QwRkJUeXhIUVVGSExGbEJRVmM3UVVGRGJFTXNZVUZCU1N4SlFVRkpMRU5CUVVNc1RVRkJUU3hKUVVGSkxFTkJRVU1zUzBGRFpDeEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhMUVVGTExFZEJRVWNzU1VGQlNTeEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFZEJRVWNzUTBGQlF5eERRVUZETEV0QlFVc3NSMEZCUnl4SlFVTXZSQ3hKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXl4TFFVRkxMRWRCUVVjc1NVRkJTU3hKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRWRCUVVjc1EwRkJReXhEUVVGRExFdEJRVXNzUjBGQlJ5eERRVUZGTEVWQlFVVTdRVUZEYmtVc2IwSkJRVThzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dFZRVU0xUWp0QlFVTkVMR2RDUVVGUExFbEJRVWtzUTBGQlF5eFJRVUZSTEVWQlFVVXNRMEZCUXp0TlFVTXhRaXhEUVVGRE8wVkJRMHc3TzNOQ1FVVmpMRTFCUVUwc1EwRkJReXhUUVVGVExFTkJRVU1zVDBGQlR5SXNJbVpwYkdVaU9pSndjbTkwYnk1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaUJjZEM4dklGUm9aU0J0YjJSMWJHVWdZMkZqYUdWY2JpQmNkSFpoY2lCcGJuTjBZV3hzWldSTmIyUjFiR1Z6SUQwZ2UzMDdYRzVjYmlCY2RDOHZJRlJvWlNCeVpYRjFhWEpsSUdaMWJtTjBhVzl1WEc0Z1hIUm1kVzVqZEdsdmJpQmZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZLRzF2WkhWc1pVbGtLU0I3WEc1Y2JpQmNkRngwTHk4Z1EyaGxZMnNnYVdZZ2JXOWtkV3hsSUdseklHbHVJR05oWTJobFhHNGdYSFJjZEdsbUtHbHVjM1JoYkd4bFpFMXZaSFZzWlhOYmJXOWtkV3hsU1dSZEtWeHVJRngwWEhSY2RISmxkSFZ5YmlCcGJuTjBZV3hzWldSTmIyUjFiR1Z6VzIxdlpIVnNaVWxrWFM1bGVIQnZjblJ6TzF4dVhHNGdYSFJjZEM4dklFTnlaV0YwWlNCaElHNWxkeUJ0YjJSMWJHVWdLR0Z1WkNCd2RYUWdhWFFnYVc1MGJ5QjBhR1VnWTJGamFHVXBYRzRnWEhSY2RIWmhjaUJ0YjJSMWJHVWdQU0JwYm5OMFlXeHNaV1JOYjJSMWJHVnpXMjF2WkhWc1pVbGtYU0E5SUh0Y2JpQmNkRngwWEhSbGVIQnZjblJ6T2lCN2ZTeGNiaUJjZEZ4MFhIUnBaRG9nYlc5a2RXeGxTV1FzWEc0Z1hIUmNkRngwYkc5aFpHVmtPaUJtWVd4elpWeHVJRngwWEhSOU8xeHVYRzRnWEhSY2RDOHZJRVY0WldOMWRHVWdkR2hsSUcxdlpIVnNaU0JtZFc1amRHbHZibHh1SUZ4MFhIUnRiMlIxYkdWelcyMXZaSFZzWlVsa1hTNWpZV3hzS0cxdlpIVnNaUzVsZUhCdmNuUnpMQ0J0YjJSMWJHVXNJRzF2WkhWc1pTNWxlSEJ2Y25SekxDQmZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZLVHRjYmx4dUlGeDBYSFF2THlCR2JHRm5JSFJvWlNCdGIyUjFiR1VnWVhNZ2JHOWhaR1ZrWEc0Z1hIUmNkRzF2WkhWc1pTNXNiMkZrWldRZ1BTQjBjblZsTzF4dVhHNGdYSFJjZEM4dklGSmxkSFZ5YmlCMGFHVWdaWGh3YjNKMGN5QnZaaUIwYUdVZ2JXOWtkV3hsWEc0Z1hIUmNkSEpsZEhWeWJpQnRiMlIxYkdVdVpYaHdiM0owY3p0Y2JpQmNkSDFjYmx4dVhHNGdYSFF2THlCbGVIQnZjMlVnZEdobElHMXZaSFZzWlhNZ2IySnFaV04wSUNoZlgzZGxZbkJoWTJ0ZmJXOWtkV3hsYzE5ZktWeHVJRngwWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHk1dElEMGdiVzlrZFd4bGN6dGNibHh1SUZ4MEx5OGdaWGh3YjNObElIUm9aU0J0YjJSMWJHVWdZMkZqYUdWY2JpQmNkRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMTh1WXlBOUlHbHVjM1JoYkd4bFpFMXZaSFZzWlhNN1hHNWNiaUJjZEM4dklGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmWEc0Z1hIUmZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZMbkFnUFNCY0lsd2lPMXh1WEc0Z1hIUXZMeUJNYjJGa0lHVnVkSEo1SUcxdlpIVnNaU0JoYm1RZ2NtVjBkWEp1SUdWNGNHOXlkSE5jYmlCY2RISmxkSFZ5YmlCZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZktEQXBPMXh1WEc1Y2JseHVMeW9xSUZkRlFsQkJRMHNnUms5UFZFVlNJQ29xWEc0Z0tpb2dkMlZpY0dGamF5OWliMjkwYzNSeVlYQWdPR0pqT0dVMU56YzJNbVpoT1dVM01tWTRZVGxjYmlBcUtpOGlMQ0luZFhObElITjBjbWxqZENjN1hHNWNibWx0Y0c5eWRDQW5MaTloY25KaGVYTXZZMjl1ZEdGcGJuTW5YRzVwYlhCdmNuUWdKeTR2WVhKeVlYbHpMMlYyWlhKNUoxeHVhVzF3YjNKMElDY3VMMkZ5Y21GNWN5OW1hV3gwWlhJblhHNXBiWEJ2Y25RZ0p5NHZZWEp5WVhsekwyWnBjbk4wSjF4dWFXMXdiM0owSUNjdUwyRnljbUY1Y3k5bWJHRjBUV0Z3SjF4dWFXMXdiM0owSUNjdUwyRnljbUY1Y3k5bmNtOTFjRUo1SjF4dWFXMXdiM0owSUNjdUwyRnljbUY1Y3k5bmNtOTFjR1ZrSjF4dWFXMXdiM0owSUNjdUwyRnljbUY1Y3k5bmNtOTFjR1ZrVW1sbmFIUW5YRzVwYlhCdmNuUWdKeTR2WVhKeVlYbHpMMmx1WTJ4MVpHVW5YRzVwYlhCdmNuUWdKeTR2WVhKeVlYbHpMMmx1WkdWNFQyWW5YRzVwYlhCdmNuUWdKeTR2WVhKeVlYbHpMMmx6UVhKeVlYa25YRzVwYlhCdmNuUWdKeTR2WVhKeVlYbHpMMnB2YVc1UVlYUm9jeWRjYm1sdGNHOXlkQ0FuTGk5aGNuSmhlWE12YkdGemRDZGNibWx0Y0c5eWRDQW5MaTloY25KaGVYTXZiV0Z3SjF4dWFXMXdiM0owSUNjdUwyRnljbUY1Y3k5dFlYZ25YRzVwYlhCdmNuUWdKeTR2WVhKeVlYbHpMMjFwYmlkY2JtbHRjRzl5ZENBbkxpOWhjbkpoZVhNdmNtRnVaMlVuWEc1cGJYQnZjblFnSnk0dllYSnlZWGx6TDNKbFpIVmpaU2RjYm1sdGNHOXlkQ0FuTGk5aGNuSmhlWE12Y21WdGIzWmxKMXh1YVcxd2IzSjBJQ2N1TDJGeWNtRjVjeTl6YjIxbEoxeHVYRzVwYlhCdmNuUWdKeTR2Y21WblpYaHdjeTlsYzJOaGNHVW5YRzVjYm1sdGNHOXlkQ0FuTGk5emRISnBibWR6TDJGdWRGTjBlV3hsVUdGMGFGUnZVbVZuWlhnblhHNXBiWEJ2Y25RZ0p5NHZjM1J5YVc1bmN5OWljakp1YkNkY2JtbHRjRzl5ZENBbkxpOXpkSEpwYm1kekwyTnZiWEJoY21WVWJ5ZGNibWx0Y0c5eWRDQW5MaTl6ZEhKcGJtZHpMMk52Ym5SaGFXNXpKMXh1YVcxd2IzSjBJQ2N1TDNOMGNtbHVaM012WTNWMGMzUnlhVzVuSjF4dWFXMXdiM0owSUNjdUwzTjBjbWx1WjNNdlpXNWtjMWRwZEdnblhHNXBiWEJ2Y25RZ0p5NHZjM1J5YVc1bmN5OW1iM0p0WVhRblhHNXBiWEJ2Y25RZ0p5NHZjM1J5YVc1bmN5OW1iM0p0WVhSV1lYSnBZV0pzWlhNblhHNXBiWEJ2Y25RZ0p5NHZjM1J5YVc1bmN5OW5aWFJNWlc1bmRHZ25YRzVwYlhCdmNuUWdKeTR2YzNSeWFXNW5jeTluY205MWNHVmtKMXh1YVcxd2IzSjBJQ2N1TDNOMGNtbHVaM012WjNKdmRYQmxaRkpwWjJoMEoxeHVhVzF3YjNKMElDY3VMM04wY21sdVozTXZiR1ZtZEZCaFpDZGNibWx0Y0c5eWRDQW5MaTl6ZEhKcGJtZHpMMjVzTW1KeUoxeHVhVzF3YjNKMElDY3VMM04wY21sdVozTXZjWFZ2ZEdVblhHNXBiWEJ2Y25RZ0p5NHZjM1J5YVc1bmN5OXlaV2RsZUNkY2JtbHRjRzl5ZENBbkxpOXpkSEpwYm1kekwzSmxjR1ZoZENkY2JtbHRjRzl5ZENBbkxpOXpkSEpwYm1kekwzSnBaMmgwVUdGa0oxeHVhVzF3YjNKMElDY3VMM04wY21sdVozTXZjM1JoY25SelYybDBhQ2RjYm1sdGNHOXlkQ0FuTGk5emRISnBibWR6TDNWdWNYVnZkR1VuWEc1cGJYQnZjblFnSnk0dmMzUnlhVzVuY3k5NGJXeEZjMk5oY0dVblhHNXBiWEJ2Y25RZ0p5NHZjM1J5YVc1bmN5OTRiV3hWYm1WelkyRndaU2RjYmx4dVhHNWNiaThxS2lCWFJVSlFRVU5MSUVaUFQxUkZVaUFxS2x4dUlDb3FJQzR2YzNKakwybHVaR1Y0TG1welhHNGdLaW92SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1cGJYQnZjblFnSnk0dmFXNWtaWGhQWmlkY2JseHVhV1lnS0NGQmNuSmhlUzV3Y205MGIzUjVjR1V1WTI5dWRHRnBibk1wSUh0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZXlwOUlHRmNiaUFnSUNBZ0tpQkFjbVYwZFhKdUlIdGliMjlzWldGdWZWeHVJQ0FnSUNBcUwxeHVJQ0FnSUVGeWNtRjVMbkJ5YjNSdmRIbHdaUzVqYjI1MFlXbHVjeUE5SUdaMWJtTjBhVzl1S0dFcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YVc1a1pYaFBaaWhoS1NBK1BTQXdPMXh1SUNBZ0lIMWNibjFjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnUVhKeVlYa3VjSEp2ZEc5MGVYQmxMbU52Ym5SaGFXNXpPMXh1WEc1Y2JseHVMeW9xSUZkRlFsQkJRMHNnUms5UFZFVlNJQ29xWEc0Z0tpb2dMaTl6Y21NdllYSnlZWGx6TDJOdmJuUmhhVzV6TG1welhHNGdLaW92SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1cFppQW9JVUZ5Y21GNUxuQnliM1J2ZEhsd1pTNXBibVJsZUU5bUtTQjdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRSEJoY21GdElIc3FmU0JwZEdWdFhHNGdJQ0FnSUNvZ1FISmxkSFZ5YmlCN2JuVnRZbVZ5ZlZ4dUlDQWdJQ0FxTDF4dUlDQWdJRUZ5Y21GNUxuQnliM1J2ZEhsd1pTNXBibVJsZUU5bUlEMGdablZ1WTNScGIyNG9hWFJsYlNrZ2UxeHVJQ0FnSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQThJSFJvYVhNdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hwSUdsdUlIUm9hWE1nSmlZZ2RHaHBjMXRwWFNBOVBUMGdhWFJsYlNrZ2NtVjBkWEp1SUdrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlDMHhPMXh1SUNBZ0lIMDdYRzU5WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUVGeWNtRjVMbkJ5YjNSdmRIbHdaUzVwYm1SbGVFOW1PMXh1WEc1Y2JseHVMeW9xSUZkRlFsQkJRMHNnUms5UFZFVlNJQ29xWEc0Z0tpb2dMaTl6Y21NdllYSnlZWGx6TDJsdVpHVjRUMll1YW5OY2JpQXFLaThpTENJbmRYTmxJSE4wY21samRDYzdYRzVjYm1sbUlDZ2hRWEp5WVhrdWNISnZkRzkwZVhCbExtVjJaWEo1S1NCN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0R2RXNWpkR2x2Ym4wZ1kyRnNiR0poWTJ0Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnZXlwOUlGdGpiMjUwWlhoMFhWeHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UySnZiMnhsWVc1OVhHNGdJQ0FnSUNvdlhHNGdJQ0FnUVhKeVlYa3VjSEp2ZEc5MGVYQmxMbVYyWlhKNUlEMGdablZ1WTNScGIyNG9ZMkZzYkdKaFkyc3NJR052Ym5SbGVIUXBJSHRjYmlBZ0lDQWdJQ0FnWm05eUlDaHNaWFFnYVNBOUlEQTdJR2tnUENCMGFHbHpMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lXTmhiR3hpWVdOckxtTmhiR3dvWTI5dWRHVjRkQ0I4ZkNCMGFHbHpMQ0IwYUdselcybGRMQ0JwTENCMGFHbHpLU2tnY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBjblZsTzF4dUlDQWdJSDA3WEc1OVhHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElFRnljbUY1TG5CeWIzUnZkSGx3WlM1bGRtVnllVHRjYmx4dVhHNWNiaThxS2lCWFJVSlFRVU5MSUVaUFQxUkZVaUFxS2x4dUlDb3FJQzR2YzNKakwyRnljbUY1Y3k5bGRtVnllUzVxYzF4dUlDb3FMeUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNibHh1YVcxd2IzSjBJQ2N1TDJac1lYUk5ZWEFuWEc1Y2JtbG1JQ2doUVhKeVlYa3VjSEp2ZEc5MGVYQmxMbVpwYkhSbGNpa2dlMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdSblZ1WTNScGIyNTlJR05oYkd4aVlXTnJYRzRnSUNBZ0lDb2dRSEJoY21GdElIc3FmU0JiWTI5dWRHVjRkRjFjYmlBZ0lDQWdLaUJBY21WMGRYSnVJSHRCY25KaGVYMWNiaUFnSUNBZ0tpOWNiaUFnSUNCQmNuSmhlUzV3Y205MGIzUjVjR1V1Wm1sc2RHVnlJRDBnWm5WdVkzUnBiMjRvWTJGc2JHSmhZMnNzSUdOdmJuUmxlSFFwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVabXhoZEUxaGNDZ29ZU3dnYVNrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR05oYkd4aVlXTnJMbU5oYkd3b1kyOXVkR1Y0ZENCOGZDQjBhR2x6TENCaExDQnBMQ0IwYUdsektTa2djbVYwZFhKdUlHRTdYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJSDA3WEc1OVhHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElFRnljbUY1TG5CeWIzUnZkSGx3WlM1bWFXeDBaWEk3WEc1Y2JseHVYRzR2S2lvZ1YwVkNVRUZEU3lCR1QwOVVSVklnS2lwY2JpQXFLaUF1TDNOeVl5OWhjbkpoZVhNdlptbHNkR1Z5TG1welhHNGdLaW92SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1cGJYQnZjblFnSnk0dmFYTkJjbkpoZVNkY2JseHVhV1lnS0NGQmNuSmhlUzV3Y205MGIzUjVjR1V1Wm14aGRFMWhjQ2tnZTF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUdOaGJHeGlZV05yWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHNxZlNCYlkyOXVkR1Y0ZEYxY2JpQWdJQ0FnS2lCQWNtVjBkWEp1SUVGeWNtRjVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1FYSnlZWGt1Y0hKdmRHOTBlWEJsTG1ac1lYUk5ZWEFnUFNCbWRXNWpkR2x2YmloallXeHNZbUZqYXl3Z1kyOXVkR1Y0ZENrZ2UxeHVJQ0FnSUNBZ0lDQnNaWFFnY21WemRXeDBjeUE5SUZ0ZE8xeHVJQ0FnSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQThJSFJvYVhNdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J5WlhOMWJIUWdQU0JqWVd4c1ltRmpheTVqWVd4c0tHTnZiblJsZUhRZ2ZId2dkR2hwY3l3Z2RHaHBjMXRwWFN3Z2FTd2dkR2hwY3lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1FYSnlZWGt1YVhOQmNuSmhlU2h5WlhOMWJIUXBLU0J5WlhOMWJIUnpMbkIxYzJndVlYQndiSGtvY21WemRXeDBjeXdnY21WemRXeDBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnYVdZZ0tISmxjM1ZzZENrZ2NtVnpkV3gwY3k1d2RYTm9LSEpsYzNWc2RDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsYzNWc2RITTdYRzRnSUNBZ2ZWeHVmVnh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JCY25KaGVTNXdjbTkwYjNSNWNHVXVabXhoZEUxaGNEdGNibHh1WEc1Y2JpOHFLaUJYUlVKUVFVTkxJRVpQVDFSRlVpQXFLbHh1SUNvcUlDNHZjM0pqTDJGeWNtRjVjeTltYkdGMFRXRndMbXB6WEc0Z0tpb3ZJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVYRzVwWmlBb0lVRnljbUY1TG1selFYSnlZWGtwSUh0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZXlwOUlHOWlhbHh1SUNBZ0lDQXFJRUJ6ZEdGMGFXTmNiaUFnSUNBZ0tpQkFjbVYwZFhKdUlIdGliMjlzWldGdWZWeHVJQ0FnSUNBcUwxeHVJQ0FnSUVGeWNtRjVMbWx6UVhKeVlYa2dQU0JtZFc1amRHbHZiaWh2WW1vcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlFOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdWRHOVRkSEpwYm1jdVkyRnNiQ2h2WW1vcElEMDlQU0FuVzI5aWFtVmpkQ0JCY25KaGVWMG5PMXh1SUNBZ0lIMDdYRzU5WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUVGeWNtRjVMbWx6UVhKeVlYazdYRzVjYmx4dVhHNHZLaW9nVjBWQ1VFRkRTeUJHVDA5VVJWSWdLaXBjYmlBcUtpQXVMM055WXk5aGNuSmhlWE12YVhOQmNuSmhlUzVxYzF4dUlDb3FMeUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNibHh1YVdZZ0tDRkJjbkpoZVM1d2NtOTBiM1I1Y0dVdVptbHljM1FwSUh0Y2JpQWdJQ0JCY25KaGVTNXdjbTkwYjNSNWNHVXVabWx5YzNRZ1BTQm1kVzVqZEdsdmJpZ3BJSHNnY21WMGRYSnVJSFJvYVhOYk1GMDdJSDA3WEc1OVhHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElFRnljbUY1TG5CeWIzUnZkSGx3WlM1bWFYSnpkRHRjYmx4dVhHNWNiaThxS2lCWFJVSlFRVU5MSUVaUFQxUkZVaUFxS2x4dUlDb3FJQzR2YzNKakwyRnljbUY1Y3k5bWFYSnpkQzVxYzF4dUlDb3FMeUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNibHh1YVdZZ0tDRkJjbkpoZVM1d2NtOTBiM1I1Y0dVdVozSnZkWEJDZVNrZ2UxeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1JuVnVZM1JwYjI1OUlHTmhiR3hpWVdOclhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUhzcWZTQmJZMjl1ZEdWNGRGMWNiaUFnSUNBZ0tpQkFjbVYwZFhKdUlIdDdmWDFjYmlBZ0lDQWdLaTljYmlBZ0lDQkJjbkpoZVM1d2NtOTBiM1I1Y0dVdVozSnZkWEJDZVNBOUlHWjFibU4wYVc5dUtHTmhiR3hpWVdOckxDQmpiMjUwWlhoMEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnWTJGc2JHSmhZMnNnSVQwOUlDZG1kVzVqZEdsdmJpY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loallXeHNZbUZqYXlBcklGd2lJR2x6SUc1dmRDQmhJR1oxYm1OMGFXOXVYQ0lwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHeGxkQ0J5WlhOMWJIUWdQU0I3ZlR0Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREE3SUdrZ1BDQjBhR2x6TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdkbUZzZFdVZ1BTQjBhR2x6VzJsZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHdGxlU0E5SUdOaGJHeGlZV05yTG1OaGJHd29ZMjl1ZEdWNGRDQjhmQ0IwYUdsekxDQjJZV3gxWlN3Z2FTd2dkR2hwY3lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2EyVjVJQ0U5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2EyVjVJR2x1SUhKbGMzVnNkQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnpkV3gwVzJ0bGVWMHVjSFZ6YUNoMllXeDFaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWld4elpWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhOMWJIUmJhMlY1WFNBOUlGdDJZV3gxWlYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhKbGMzVnNkRHRjYmlBZ0lDQjlPMXh1ZlZ4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCQmNuSmhlUzV3Y205MGIzUjVjR1V1WjNKdmRYQkNlVHRjYmx4dVhHNWNiaThxS2lCWFJVSlFRVU5MSUVaUFQxUkZVaUFxS2x4dUlDb3FJQzR2YzNKakwyRnljbUY1Y3k5bmNtOTFjRUo1TG1welhHNGdLaW92SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1cFppQW9JVUZ5Y21GNUxuQnliM1J2ZEhsd1pTNW5jbTkxY0dWa0tTQjdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRSEJoY21GdElIdHVkVzFpWlhKOUlITnBlbVZjYmlBZ0lDQWdLaUJBY21WMGRYSnVJSHRCY25KaGVUeEJjbkpoZVQ1OVhHNGdJQ0FnSUNvdlhHNGdJQ0FnUVhKeVlYa3VjSEp2ZEc5MGVYQmxMbWR5YjNWd1pXUWdQU0JtZFc1amRHbHZiaWh6YVhwbEtTQjdYRzRnSUNBZ0lDQWdJR3hsZENCeVpYTjFiSFJ6SUQwZ1cxMDdYRzRnSUNBZ0lDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBd095QnBJRHdnZEdocGN5NXNaVzVuZEdnN0lHa2dLejBnYzJsNlpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnpkV3gwY3k1d2RYTm9LSFJvYVhNdWMyeHBZMlVvYVN3Z2FTQXJJSE5wZW1VcEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZ6ZFd4MGN6dGNiaUFnSUNCOU8xeHVmVnh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JCY25KaGVTNXdjbTkwYjNSNWNHVXVaM0p2ZFhCbFpEdGNibHh1WEc1Y2JpOHFLaUJYUlVKUVFVTkxJRVpQVDFSRlVpQXFLbHh1SUNvcUlDNHZjM0pqTDJGeWNtRjVjeTluY205MWNHVmtMbXB6WEc0Z0tpb3ZJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVYRzVwWmlBb0lVRnljbUY1TG5CeWIzUnZkSGx3WlM1bmNtOTFjR1ZrVW1sbmFIUXBJSHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMjUxYldKbGNuMGdjMmw2WlZ4dUlDQWdJQ0FxSUVCeVpYUjFjbTRnZTBGeWNtRjVQRUZ5Y21GNVBuMWNiaUFnSUNBZ0tpOWNiaUFnSUNCQmNuSmhlUzV3Y205MGIzUjVjR1V1WjNKdmRYQmxaRkpwWjJoMElEMGdablZ1WTNScGIyNG9jMmw2WlNrZ2UxeHVJQ0FnSUNBZ0lDQnNaWFFnY21WemRXeDBjeUE5SUZ0ZE8xeHVJQ0FnSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnZEdocGN5NXNaVzVuZEdnN0lHa2dQaUF3T3lCcElDMDlJSE5wZW1VcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGMzVnNkSE11Y0hWemFDaDBhR2x6TG5Oc2FXTmxLRTFoZEdndWJXRjRLREFzSUdrZ0xTQnphWHBsS1N3Z2FTa3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ5WlhOMWJIUnpMbkpsZG1WeWMyVW9LVHRjYmlBZ0lDQjlPMXh1ZlZ4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCQmNuSmhlUzV3Y205MGIzUjVjR1V1WjNKdmRYQmxaRkpwWjJoME8xeHVYRzVjYmx4dUx5b3FJRmRGUWxCQlEwc2dSazlQVkVWU0lDb3FYRzRnS2lvZ0xpOXpjbU12WVhKeVlYbHpMMmR5YjNWd1pXUlNhV2RvZEM1cWMxeHVJQ29xTHlJc0lpZDFjMlVnYzNSeWFXTjBKenRjYmx4dWFXMXdiM0owSUNjdUwybHVaR1Y0VDJZblhHNWNibWxtSUNnaFFYSnlZWGt1Y0hKdmRHOTBlWEJsTG1sdVkyeDFaR1VwSUh0Y2JpQWdJQ0JCY25KaGVTNXdjbTkwYjNSNWNHVXVhVzVqYkhWa1pTQTlJR1oxYm1OMGFXOXVLR0VwSUh0Y2JpQWdJQ0FnSUNBZ2JHVjBJR2tnUFNCMGFHbHpMbWx1WkdWNFQyWW9ZU2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaHBJRDRnTFRFcFhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdselcybGRJRDBnWVR0Y2JpQWdJQ0FnSUNBZ1pXeHpaVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV3ZFhOb0tHRXBPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdJQ0I5TzF4dWZWeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQkJjbkpoZVM1d2NtOTBiM1I1Y0dVdWFXNWpiSFZrWlR0Y2JseHVYRzVjYmk4cUtpQlhSVUpRUVVOTElFWlBUMVJGVWlBcUtseHVJQ29xSUM0dmMzSmpMMkZ5Y21GNWN5OXBibU5zZFdSbExtcHpYRzRnS2lvdklpd2lKM1Z6WlNCemRISnBZM1FuTzF4dVhHNXBaaUFvSVVGeWNtRjVMbkJ5YjNSdmRIbHdaUzVxYjJsdVVHRjBhSE1wSUh0Y2JpQWdJQ0JCY25KaGVTNXdjbTkwYjNSNWNHVXVhbTlwYmxCaGRHaHpJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0J3WVhSb0lEMGdKeWM3WEc0Z0lDQWdJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQXdPeUJwSUR3Z2RHaHBjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE5iYVYwcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY0dGMGFDNXNaVzVuZEdnZ1BpQXdJQ1ltSUhCaGRHZ3VZMmhoY2tGMEtIQmhkR2d1YkdWdVozUm9JQzBnTVNrZ0lUMDlJQ2N2SnlsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjR0YwYUNBclBTQW5MeWM3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd1lYUm9JQ3M5SUhSb2FYTmJhVjB1ZEc5VGRISnBibWNvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnY0dGMGFEdGNiaUFnSUNCOU8xeHVmVnh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JCY25KaGVTNXdjbTkwYjNSNWNHVXVhbTlwYmxCaGRHaHpPMXh1WEc1Y2JseHVMeW9xSUZkRlFsQkJRMHNnUms5UFZFVlNJQ29xWEc0Z0tpb2dMaTl6Y21NdllYSnlZWGx6TDJwdmFXNVFZWFJvY3k1cWMxeHVJQ29xTHlJc0lpZDFjMlVnYzNSeWFXTjBKenRjYmx4dWFXWWdLQ0ZCY25KaGVTNXdjbTkwYjNSNWNHVXViR0Z6ZENrZ2UxeHVJQ0FnSUVGeWNtRjVMbkJ5YjNSdmRIbHdaUzVzWVhOMElEMGdablZ1WTNScGIyNG9LU0I3SUhKbGRIVnliaUIwYUdselczUm9hWE11YkdWdVozUm9JQzBnTVYwN0lIMDdYRzU5WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUVGeWNtRjVMbkJ5YjNSdmRIbHdaUzVzWVhOME8xeHVYRzVjYmx4dUx5b3FJRmRGUWxCQlEwc2dSazlQVkVWU0lDb3FYRzRnS2lvZ0xpOXpjbU12WVhKeVlYbHpMMnhoYzNRdWFuTmNiaUFxS2k4aUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JtbG1JQ2doUVhKeVlYa3VjSEp2ZEc5MGVYQmxMbTFoY0NrZ2UxeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1JuVnVZM1JwYjI1OUlHTmhiR3hpWVdOclhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUhzcWZTQmJZMjl1ZEdWNGRGMWNiaUFnSUNBZ0tpOWNiaUFnSUNCQmNuSmhlUzV3Y205MGIzUjVjR1V1YldGd0lEMGdablZ1WTNScGIyNG9ZMkZzYkdKaFkyc3NJR052Ym5SbGVIUXBJSHRjYmlBZ0lDQWdJQ0FnYkdWMElISmxjM1ZzZENBOUlGdGRPMXh1SUNBZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Uc2dhU0E4UFNCMGFHbHpMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhOMWJIUXVjSFZ6YUNoallXeHNZbUZqYXk1allXeHNLR052Ym5SbGVIUWdmSHdnZEdocGN5d2dkR2hwYzF0cFhTd2dhU3dnZEdocGN5a3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ5WlhOMWJIUTdYRzRnSUNBZ2ZWeHVmVnh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JCY25KaGVTNXdjbTkwYjNSNWNHVXViV0Z3TzF4dVhHNWNibHh1THlvcUlGZEZRbEJCUTBzZ1JrOVBWRVZTSUNvcVhHNGdLaW9nTGk5emNtTXZZWEp5WVhsekwyMWhjQzVxYzF4dUlDb3FMeUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNibHh1YVcxd2IzSjBJQ2N1TDNKbFpIVmpaU2RjYmx4dWFXWWdLQ0ZCY25KaGVTNXdjbTkwYjNSNWNHVXViV0Y0S1NCN1hHNGdJQ0FnUVhKeVlYa3VjSEp2ZEc5MGVYQmxMbTFoZUNBOUlHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1eVpXUjFZMlVvS0dFc0lHSXBJRDArSUNoaElENGdZaWtnUHlCaElEb2dZaWs3WEc0Z0lDQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCQmNuSmhlUzV3Y205MGIzUjVjR1V1YldGNE8xeHVYRzVjYmx4dUx5b3FJRmRGUWxCQlEwc2dSazlQVkVWU0lDb3FYRzRnS2lvZ0xpOXpjbU12WVhKeVlYbHpMMjFoZUM1cWMxeHVJQ29xTHlJc0lpZDFjMlVnYzNSeWFXTjBKenRjYmx4dWFXWWdLQ0ZCY25KaGVTNXdjbTkwYjNSNWNHVXVjbVZrZFdObEtTQjdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRSEJoY21GdElIdEdkVzVqZEdsdmJuMGdZMkZzYkdKaFkydGNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2V5cDlJRnRqYjI1MFpYaDBYVnh1SUNBZ0lDQXFJRUJ5WlhSMWNtNGdleXA5WEc0Z0lDQWdJQ292WEc0Z0lDQWdRWEp5WVhrdWNISnZkRzkwZVhCbExuSmxaSFZqWlNBOUlHWjFibU4wYVc5dUtHTmhiR3hpWVdOckxDQmpiMjUwWlhoMEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNnaEtIUm9hWE11YkdWdVozUm9JRDRnTUNrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb1hDSlNaV1IxWTJVZ2IyWWdaVzF3ZEhrZ1lYSnlZWGtnZDJsMGFDQnVieUJwYm1sMGFXRnNJSFpoYkhWbFhDSXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUd4bGRDQnlaWE4xYkhRZ1BTQjBhR2x6V3pCZE8xeHVJQ0FnSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTVRzZ2FTQThQU0IwYUdsekxteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWE4xYkhRZ1BTQmpZV3hzWW1GamF5NWpZV3hzS0dOdmJuUmxlSFFnZkh3Z2RHaHBjeXdnY21WemRXeDBMQ0IwYUdselcybGRMQ0JwTENCMGFHbHpLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnY21WemRXeDBPMXh1SUNBZ0lIMDdYRzU5WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUVGeWNtRjVMbkJ5YjNSdmRIbHdaUzV5WldSMVkyVTdYRzVjYmx4dVhHNHZLaW9nVjBWQ1VFRkRTeUJHVDA5VVJWSWdLaXBjYmlBcUtpQXVMM055WXk5aGNuSmhlWE12Y21Wa2RXTmxMbXB6WEc0Z0tpb3ZJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVYRzVwYlhCdmNuUWdKeTR2Y21Wa2RXTmxKMXh1WEc1cFppQW9JVUZ5Y21GNUxuQnliM1J2ZEhsd1pTNXRhVzRwSUh0Y2JpQWdJQ0JCY25KaGVTNXdjbTkwYjNSNWNHVXViV2x1SUQwZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5KbFpIVmpaU2dvWVN3Z1lpa2dQVDRnS0dFZ1BDQmlLU0EvSUdFZ09pQmlLVHRjYmlBZ0lDQjlYRzU5WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUVGeWNtRjVMbkJ5YjNSdmRIbHdaUzV0YVc0N1hHNWNibHh1WEc0dktpb2dWMFZDVUVGRFN5QkdUMDlVUlZJZ0tpcGNiaUFxS2lBdUwzTnlZeTloY25KaGVYTXZiV2x1TG1welhHNGdLaW92SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1cFppQW9JVUZ5Y21GNUxuSmhibWRsS1NCN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo4YzNSeWFXNW5mU0JtY205dFhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo4YzNSeWFXNW5mU0IwYjF4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3Ym5WdFltVnlmU0J6ZEdWd1hHNGdJQ0FnSUNvZ1FITjBZWFJwWTF4dUlDQWdJQ0FxSUVCeVpYUjFjbTRnZTBGeWNtRjVmVnh1SUNBZ0lDQXFMMXh1SUNBZ0lFRnljbUY1TG5KaGJtZGxJRDBnWm5WdVkzUnBiMjRvWm5KdmJTd2dkRzhzSUhOMFpYQWdQU0F4S1NCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0J5WVc1blpTQTlJRnRkTzF4dUlDQWdJQ0FnSUNCc1pYUWdhWE5PZFcxaVpYSWdQU0IwZVhCbGIyWWdabkp2YlNBOVBUMGdKMjUxYldKbGNpY2dKaVlnZEhsd1pXOW1JSFJ2SUQwOVBTQW5iblZ0WW1WeUp6dGNiaUFnSUNBZ0lDQWdiR1YwSUdKbFoybHVJRDBnYVhOT2RXMWlaWElnUHlCbWNtOXRJRG9nWm5KdmJTNTBiMU4wY21sdVp5Z3BMbU5vWVhKRGIyUmxRWFFvTUNrN1hHNGdJQ0FnSUNBZ0lHeGxkQ0JsYm1RZ1BTQnBjMDUxYldKbGNpQS9JSFJ2SURvZ2RHOHVkRzlUZEhKcGJtY29LUzVqYUdGeVEyOWtaVUYwS0RBcE8xeHVJQ0FnSUNBZ0lDQnpkR1Z3SUQwZ1RXRjBhQzVoWW5Nb2MzUmxjQ2tnZkh3Z01UdGNiaUFnSUNBZ0lDQWdhV1lnS0dKbFoybHVJRDRnWlc1a0tTQnpkR1Z3SUQwZ0xYTjBaWEE3WEc0Z0lDQWdJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQmlaV2RwYmpzZ2MzUmxjQ0ErSURBZ1B5QnBJRHc5SUdWdVpDQTZJR2tnUGowZ1pXNWtPeUJwSUNzOUlITjBaWEFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpoYm1kbExuQjFjMmdvYVhOT2RXMWlaWElnUHlCcElEb2dVM1J5YVc1bkxtWnliMjFEYUdGeVEyOWtaU2hwS1NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlISmhibWRsTzF4dUlDQWdJSDA3WEc1OVhHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElFRnljbUY1TG5KaGJtZGxPMXh1WEc1Y2JseHVMeW9xSUZkRlFsQkJRMHNnUms5UFZFVlNJQ29xWEc0Z0tpb2dMaTl6Y21NdllYSnlZWGx6TDNKaGJtZGxMbXB6WEc0Z0tpb3ZJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVYRzVwWmlBb0lVRnljbUY1TG5CeWIzUnZkSGx3WlM1eVpXMXZkbVVwSUh0Y2JpQWdJQ0JCY25KaGVTNXdjbTkwYjNSNWNHVXVjbVZ0YjNabElEMGdablZ1WTNScGIyNG9ZU2tnZTF4dUlDQWdJQ0FnSUNCbWIzSWdLR3hsZENCcElEMGdkR2hwY3k1c1pXNW5kR2dnTFNBeE95QnBJRDQ5SURBN0lDMHRhU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTmJhVjBnUFQwOUlHRXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuTndiR2xqWlNocExDQXhLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdJQ0I5TzF4dWZWeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQkJjbkpoZVM1d2NtOTBiM1I1Y0dVdWNtVnRiM1psTzF4dVhHNWNibHh1THlvcUlGZEZRbEJCUTBzZ1JrOVBWRVZTSUNvcVhHNGdLaW9nTGk5emNtTXZZWEp5WVhsekwzSmxiVzkyWlM1cWMxeHVJQ29xTHlJc0lpZDFjMlVnYzNSeWFXTjBKenRjYmx4dWFXWWdLQ0ZCY25KaGVTNXdjbTkwYjNSNWNHVXVjMjl0WlNrZ2UxeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1JuVnVZM1JwYjI1OUlHTmhiR3hpWVdOclhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUhzcWZTQmJZMjl1ZEdWNGRGMWNiaUFnSUNBZ0tpQkFjbVYwZFhKdUlIdGliMjlzWldGdWZWeHVJQ0FnSUNBcUwxeHVJQ0FnSUVGeWNtRjVMbkJ5YjNSdmRIbHdaUzV6YjIxbElEMGdablZ1WTNScGIyNG9ZMkZzYkdKaFkyc3NJR052Ym5SbGVIUXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCallXeHNZbUZqYXlBaFBUMGdKMloxYm1OMGFXOXVKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtHTmhiR3hpWVdOcklDc2dYQ0lnYVhNZ2JtOTBJR0VnWm5WdVkzUnBiMjVjSWlrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dQQ0IwYUdsekxteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWTJGc2JHSmhZMnN1WTJGc2JDaGpiMjUwWlhoMElIeDhJSFJvYVhNc0lIUm9hWE5iYVYwc0lHa3NJSFJvYVhNcEtTQnlaWFIxY200Z2RISjFaVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUNBZ2ZUdGNibjFjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnUVhKeVlYa3VjSEp2ZEc5MGVYQmxMbk52YldVN1hHNWNibHh1WEc0dktpb2dWMFZDVUVGRFN5QkdUMDlVUlZJZ0tpcGNiaUFxS2lBdUwzTnlZeTloY25KaGVYTXZjMjl0WlM1cWMxeHVJQ29xTHlJc0lpZDFjMlVnYzNSeWFXTjBKenRjYmx4dWFXWWdLQ0ZTWldkRmVIQXVaWE5qWVhCbEtTQjdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRSEJoY21GdElIdFRkSEpwYm1kOUlIUmxlSFJjYmlBZ0lDQWdLaUJBYzNSaGRHbGpYRzRnSUNBZ0lDb2dRSEpsZEhWeWJpQjdVM1J5YVc1bmZWeHVJQ0FnSUNBcUwxeHVJQ0FnSUZKbFowVjRjQzVsYzJOaGNHVWdQU0JtZFc1amRHbHZiaWgwWlhoMEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBaWGgwTG5KbGNHeGhZMlVvTDFzdFcxeGNYWHQ5S0NrcUt6OHVMRnhjWEZ4ZUpId2pYRnh6WFM5bkxDQW5YRnhjWENRbUp5azdYRzRnSUNBZ2ZUdGNibjFjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnVW1WblJYaHdMbVZ6WTJGd1pUdGNibHh1WEc1Y2JpOHFLaUJYUlVKUVFVTkxJRVpQVDFSRlVpQXFLbHh1SUNvcUlDNHZjM0pqTDNKbFoyVjRjSE12WlhOallYQmxMbXB6WEc0Z0tpb3ZJaXdpYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0I3SUZ3aVpHVm1ZWFZzZEZ3aU9pQnlaWEYxYVhKbEtGd2lZMjl5WlMxcWN5OXNhV0p5WVhKNUwyWnVMM0psWjJWNGNDOWxjMk5oY0dWY0lpa3NJRjlmWlhOTmIyUjFiR1U2SUhSeWRXVWdmVHRjYmx4dVhHNHZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNiaUFxS2lCWFJVSlFRVU5MSUVaUFQxUkZVbHh1SUNvcUlDNHZmaTlpWVdKbGJDMXlkVzUwYVcxbEwyTnZjbVV0YW5NdmNtVm5aWGh3TDJWelkyRndaUzVxYzF4dUlDb3FJRzF2WkhWc1pTQnBaQ0E5SURJeVhHNGdLaW9nYlc5a2RXeGxJR05vZFc1cmN5QTlJREJjYmlBcUtpOGlMQ0p5WlhGMWFYSmxLQ2N1TGk4dUxpOXRiMlIxYkdWekwyVnpOeTV5WldkbGVIQXVaWE5qWVhCbEp5azdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSEpsY1hWcGNtVW9KeTR1THk0dUwyMXZaSFZzWlhNdkpDNWpiM0psSnlrdVVtVm5SWGh3TG1WelkyRndaVHRjYmx4dVhHNHZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNiaUFxS2lCWFJVSlFRVU5MSUVaUFQxUkZVbHh1SUNvcUlDNHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZabTR2Y21WblpYaHdMMlZ6WTJGd1pTNXFjMXh1SUNvcUlHMXZaSFZzWlNCcFpDQTlJREl6WEc0Z0tpb2diVzlrZFd4bElHTm9kVzVyY3lBOUlEQmNiaUFxS2k4aUxDSXZMeUJvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2WW1WdWFtRnRhVzVuY2k5U1pYaEZlSEF1WlhOallYQmxYRzUyWVhJZ0pHVjRjRzl5ZENBOUlISmxjWFZwY21Vb0p5NHZKQzVsZUhCdmNuUW5LVnh1SUNBc0lDUnlaU0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMeVF1Y21Wd2JHRmpaWEluS1NndlcxeGNYRnhlSkNvclB5NG9LWHhiWEZ4ZGUzMWRMMmNzSUNkY1hGeGNKQ1luS1R0Y2JseHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsTXNJQ2RTWldkRmVIQW5MQ0I3WlhOallYQmxPaUJtZFc1amRHbHZiaUJsYzJOaGNHVW9hWFFwZXlCeVpYUjFjbTRnSkhKbEtHbDBLVHNnZlgwcE8xeHVYRzVjYmx4dUx5b3FLaW9xS2lvcUtpb3FLaW9xS2lvcVhHNGdLaW9nVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaUFxS2lBdUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlpYTTNMbkpsWjJWNGNDNWxjMk5oY0dVdWFuTmNiaUFxS2lCdGIyUjFiR1VnYVdRZ1BTQXlORnh1SUNvcUlHMXZaSFZzWlNCamFIVnVhM01nUFNBd1hHNGdLaW92SWl3aWRtRnlJR2RzYjJKaGJDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dkpDNW5iRzlpWVd3bktWeHVJQ0FzSUdOdmNtVWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZKQzVqYjNKbEp5bGNiaUFnTENCamRIZ2dJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMeVF1WTNSNEp5bGNiaUFnTENCUVVrOVVUMVJaVUVVZ1BTQW5jSEp2ZEc5MGVYQmxKenRjYmx4dWRtRnlJQ1JsZUhCdmNuUWdQU0JtZFc1amRHbHZiaWgwZVhCbExDQnVZVzFsTENCemIzVnlZMlVwZTF4dUlDQjJZWElnU1ZOZlJrOVNRMFZFSUQwZ2RIbHdaU0FtSUNSbGVIQnZjblF1Umx4dUlDQWdJQ3dnU1ZOZlIweFBRa0ZNSUQwZ2RIbHdaU0FtSUNSbGVIQnZjblF1UjF4dUlDQWdJQ3dnU1ZOZlUxUkJWRWxESUQwZ2RIbHdaU0FtSUNSbGVIQnZjblF1VTF4dUlDQWdJQ3dnU1ZOZlVGSlBWRThnSUQwZ2RIbHdaU0FtSUNSbGVIQnZjblF1VUZ4dUlDQWdJQ3dnU1ZOZlFrbE9SQ0FnSUQwZ2RIbHdaU0FtSUNSbGVIQnZjblF1UWx4dUlDQWdJQ3dnU1ZOZlYxSkJVQ0FnSUQwZ2RIbHdaU0FtSUNSbGVIQnZjblF1VjF4dUlDQWdJQ3dnWlhod2IzSjBjeUFnSUQwZ1NWTmZSMHhQUWtGTUlEOGdZMjl5WlNBNklHTnZjbVZiYm1GdFpWMGdmSHdnS0dOdmNtVmJibUZ0WlYwZ1BTQjdmU2xjYmlBZ0lDQXNJSFJoY21kbGRDQWdJQ0E5SUVsVFgwZE1UMEpCVENBL0lHZHNiMkpoYkNBNklFbFRYMU5VUVZSSlF5QS9JR2RzYjJKaGJGdHVZVzFsWFNBNklDaG5iRzlpWVd4YmJtRnRaVjBnZkh3Z2UzMHBXMUJTVDFSUFZGbFFSVjFjYmlBZ0lDQXNJR3RsZVN3Z2IzZHVMQ0J2ZFhRN1hHNGdJR2xtS0VsVFgwZE1UMEpCVENsemIzVnlZMlVnUFNCdVlXMWxPMXh1SUNCbWIzSW9hMlY1SUdsdUlITnZkWEpqWlNsN1hHNGdJQ0FnTHk4Z1kyOXVkR0ZwYm5NZ2FXNGdibUYwYVhabFhHNGdJQ0FnYjNkdUlEMGdJVWxUWDBaUFVrTkZSQ0FtSmlCMFlYSm5aWFFnSmlZZ2EyVjVJR2x1SUhSaGNtZGxkRHRjYmlBZ0lDQnBaaWh2ZDI0Z0ppWWdhMlY1SUdsdUlHVjRjRzl5ZEhNcFkyOXVkR2x1ZFdVN1hHNGdJQ0FnTHk4Z1pYaHdiM0owSUc1aGRHbDJaU0J2Y2lCd1lYTnpaV1JjYmlBZ0lDQnZkWFFnUFNCdmQyNGdQeUIwWVhKblpYUmJhMlY1WFNBNklITnZkWEpqWlZ0clpYbGRPMXh1SUNBZ0lDOHZJSEJ5WlhabGJuUWdaMnh2WW1Gc0lIQnZiR3gxZEdsdmJpQm1iM0lnYm1GdFpYTndZV05sYzF4dUlDQWdJR1Y0Y0c5eWRITmJhMlY1WFNBOUlFbFRYMGRNVDBKQlRDQW1KaUIwZVhCbGIyWWdkR0Z5WjJWMFcydGxlVjBnSVQwZ0oyWjFibU4wYVc5dUp5QS9JSE52ZFhKalpWdHJaWGxkWEc0Z0lDQWdMeThnWW1sdVpDQjBhVzFsY25NZ2RHOGdaMnh2WW1Gc0lHWnZjaUJqWVd4c0lHWnliMjBnWlhod2IzSjBJR052Ym5SbGVIUmNiaUFnSUNBNklFbFRYMEpKVGtRZ0ppWWdiM2R1SUQ4Z1kzUjRLRzkxZEN3Z1oyeHZZbUZzS1Z4dUlDQWdJQzh2SUhkeVlYQWdaMnh2WW1Gc0lHTnZibk4wY25WamRHOXljeUJtYjNJZ2NISmxkbVZ1ZENCamFHRnVaMlVnZEdobGJTQnBiaUJzYVdKeVlYSjVYRzRnSUNBZ09pQkpVMTlYVWtGUUlDWW1JSFJoY21kbGRGdHJaWGxkSUQwOUlHOTFkQ0EvSUNobWRXNWpkR2x2YmloREtYdGNiaUFnSUNBZ0lIWmhjaUJHSUQwZ1puVnVZM1JwYjI0b2NHRnlZVzBwZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5QnBibk4wWVc1alpXOW1JRU1nUHlCdVpYY2dReWh3WVhKaGJTa2dPaUJES0hCaGNtRnRLVHRjYmlBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0JHVzFCU1QxUlBWRmxRUlYwZ1BTQkRXMUJTVDFSUFZGbFFSVjA3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdSanRjYmlBZ0lDQXZMeUJ0WVd0bElITjBZWFJwWXlCMlpYSnphVzl1Y3lCbWIzSWdjSEp2ZEc5MGVYQmxJRzFsZEdodlpITmNiaUFnSUNCOUtTaHZkWFFwSURvZ1NWTmZVRkpQVkU4Z0ppWWdkSGx3Wlc5bUlHOTFkQ0E5UFNBblpuVnVZM1JwYjI0bklEOGdZM1I0S0VaMWJtTjBhVzl1TG1OaGJHd3NJRzkxZENrZ09pQnZkWFE3WEc0Z0lDQWdhV1lvU1ZOZlVGSlBWRThwS0dWNGNHOXlkSE5iVUZKUFZFOVVXVkJGWFNCOGZDQW9aWGh3YjNKMGMxdFFVazlVVDFSWlVFVmRJRDBnZTMwcEtWdHJaWGxkSUQwZ2IzVjBPMXh1SUNCOVhHNTlPMXh1THk4Z2RIbHdaU0JpYVhSdFlYQmNiaVJsZUhCdmNuUXVSaUE5SURFN0lDQXZMeUJtYjNKalpXUmNiaVJsZUhCdmNuUXVSeUE5SURJN0lDQXZMeUJuYkc5aVlXeGNiaVJsZUhCdmNuUXVVeUE5SURRN0lDQXZMeUJ6ZEdGMGFXTmNiaVJsZUhCdmNuUXVVQ0E5SURnN0lDQXZMeUJ3Y205MGIxeHVKR1Y0Y0c5eWRDNUNJRDBnTVRZN0lDOHZJR0pwYm1SY2JpUmxlSEJ2Y25RdVZ5QTlJRE15T3lBdkx5QjNjbUZ3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUNSbGVIQnZjblE3WEc1Y2JseHVMeW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FYRzRnS2lvZ1YwVkNVRUZEU3lCR1QwOVVSVkpjYmlBcUtpQXVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZKQzVsZUhCdmNuUXVhbk5jYmlBcUtpQnRiMlIxYkdVZ2FXUWdQU0F5TlZ4dUlDb3FJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdYRzRnS2lvdklpd2lMeThnYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDNwc2IybHliMk5yTDJOdmNtVXRhbk12YVhOemRXVnpMemcySTJsemMzVmxZMjl0YldWdWRDMHhNVFUzTlRrd01qaGNiblpoY2lCbmJHOWlZV3dnUFNCdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhSNWNHVnZaaUIzYVc1a2IzY2dJVDBnSjNWdVpHVm1hVzVsWkNjZ0ppWWdkMmx1Wkc5M0xrMWhkR2dnUFQwZ1RXRjBhRnh1SUNBL0lIZHBibVJ2ZHlBNklIUjVjR1Z2WmlCelpXeG1JQ0U5SUNkMWJtUmxabWx1WldRbklDWW1JSE5sYkdZdVRXRjBhQ0E5UFNCTllYUm9JRDhnYzJWc1ppQTZJRVoxYm1OMGFXOXVLQ2R5WlhSMWNtNGdkR2hwY3ljcEtDazdYRzVwWmloMGVYQmxiMllnWDE5bklEMDlJQ2R1ZFcxaVpYSW5LVjlmWnlBOUlHZHNiMkpoYkRzZ0x5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJHbHVaU0J1YnkxMWJtUmxabHh1WEc1Y2JpOHFLaW9xS2lvcUtpb3FLaW9xS2lvcUtseHVJQ29xSUZkRlFsQkJRMHNnUms5UFZFVlNYRzRnS2lvZ0xpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekx5UXVaMnh2WW1Gc0xtcHpYRzRnS2lvZ2JXOWtkV3hsSUdsa0lEMGdNalpjYmlBcUtpQnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01GeHVJQ29xTHlJc0luWmhjaUJqYjNKbElEMGdiVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQjdkbVZ5YzJsdmJqb2dKekV1TWk0MkozMDdYRzVwWmloMGVYQmxiMllnWDE5bElEMDlJQ2R1ZFcxaVpYSW5LVjlmWlNBOUlHTnZjbVU3SUM4dklHVnpiR2x1ZEMxa2FYTmhZbXhsTFd4cGJtVWdibTh0ZFc1a1pXWmNibHh1WEc0dktpb3FLaW9xS2lvcUtpb3FLaW9xS2lwY2JpQXFLaUJYUlVKUVFVTkxJRVpQVDFSRlVseHVJQ29xSUM0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k4a0xtTnZjbVV1YW5OY2JpQXFLaUJ0YjJSMWJHVWdhV1FnUFNBeU4xeHVJQ29xSUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3WEc0Z0tpb3ZJaXdpTHk4Z2IzQjBhVzl1WVd3Z0x5QnphVzF3YkdVZ1kyOXVkR1Y0ZENCaWFXNWthVzVuWEc1MllYSWdZVVoxYm1OMGFXOXVJRDBnY21WeGRXbHlaU2duTGk4a0xtRXRablZ1WTNScGIyNG5LVHRjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvWm00c0lIUm9ZWFFzSUd4bGJtZDBhQ2w3WEc0Z0lHRkdkVzVqZEdsdmJpaG1iaWs3WEc0Z0lHbG1LSFJvWVhRZ1BUMDlJSFZ1WkdWbWFXNWxaQ2x5WlhSMWNtNGdabTQ3WEc0Z0lITjNhWFJqYUNoc1pXNW5kR2dwZTF4dUlDQWdJR05oYzJVZ01Ub2djbVYwZFhKdUlHWjFibU4wYVc5dUtHRXBlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHWnVMbU5oYkd3b2RHaGhkQ3dnWVNrN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JqWVhObElESTZJSEpsZEhWeWJpQm1kVzVqZEdsdmJpaGhMQ0JpS1h0Y2JpQWdJQ0FnSUhKbGRIVnliaUJtYmk1allXeHNLSFJvWVhRc0lHRXNJR0lwTzF4dUlDQWdJSDA3WEc0Z0lDQWdZMkZ6WlNBek9pQnlaWFIxY200Z1puVnVZM1JwYjI0b1lTd2dZaXdnWXlsN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWm00dVkyRnNiQ2gwYUdGMExDQmhMQ0JpTENCaktUdGNiaUFnSUNCOU8xeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlndktpQXVMaTVoY21keklDb3ZLWHRjYmlBZ0lDQnlaWFIxY200Z1ptNHVZWEJ3Ykhrb2RHaGhkQ3dnWVhKbmRXMWxiblJ6S1R0Y2JpQWdmVHRjYm4wN1hHNWNibHh1THlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc0Z0tpb2dWMFZDVUVGRFN5QkdUMDlVUlZKY2JpQXFLaUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12SkM1amRIZ3Vhbk5jYmlBcUtpQnRiMlIxYkdVZ2FXUWdQU0F5T0Z4dUlDb3FJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdYRzRnS2lvdklpd2liVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpaHBkQ2w3WEc0Z0lHbG1LSFI1Y0dWdlppQnBkQ0FoUFNBblpuVnVZM1JwYjI0bktYUm9jbTkzSUZSNWNHVkZjbkp2Y2locGRDQXJJQ2NnYVhNZ2JtOTBJR0VnWm5WdVkzUnBiMjRoSnlrN1hHNGdJSEpsZEhWeWJpQnBkRHRjYm4wN1hHNWNibHh1THlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc0Z0tpb2dWMFZDVUVGRFN5QkdUMDlVUlZKY2JpQXFLaUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12SkM1aExXWjFibU4wYVc5dUxtcHpYRzRnS2lvZ2JXOWtkV3hsSUdsa0lEMGdNamxjYmlBcUtpQnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01GeHVJQ29xTHlJc0ltMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b2NtVm5SWGh3TENCeVpYQnNZV05sS1h0Y2JpQWdkbUZ5SUhKbGNHeGhZMlZ5SUQwZ2NtVndiR0ZqWlNBOVBUMGdUMkpxWldOMEtISmxjR3hoWTJVcElEOGdablZ1WTNScGIyNG9jR0Z5ZENsN1hHNGdJQ0FnY21WMGRYSnVJSEpsY0d4aFkyVmJjR0Z5ZEYwN1hHNGdJSDBnT2lCeVpYQnNZV05sTzF4dUlDQnlaWFIxY200Z1puVnVZM1JwYjI0b2FYUXBlMXh1SUNBZ0lISmxkSFZ5YmlCVGRISnBibWNvYVhRcExuSmxjR3hoWTJVb2NtVm5SWGh3TENCeVpYQnNZV05sY2lrN1hHNGdJSDA3WEc1OU8xeHVYRzVjYmk4cUtpb3FLaW9xS2lvcUtpb3FLaW9xS2x4dUlDb3FJRmRGUWxCQlEwc2dSazlQVkVWU1hHNGdLaW9nTGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6THlRdWNtVndiR0ZqWlhJdWFuTmNiaUFxS2lCdGIyUjFiR1VnYVdRZ1BTQXpNRnh1SUNvcUlHMXZaSFZzWlNCamFIVnVhM01nUFNBd1hHNGdLaW92SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1cFppQW9JVk4wY21sdVp5NXdjbTkwYjNSNWNHVXVZVzUwVTNSNWJHVlFZWFJvVkc5U1pXZGxlQ2tnZTF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVCeVpYUjFjbTRnZTFKbFowVjRjSDFjYmlBZ0lDQWdLaTljYmlBZ0lDQlRkSEpwYm1jdWNISnZkRzkwZVhCbExtRnVkRk4wZVd4bFVHRjBhRlJ2VW1WblpYZ2dQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWJHVnVaM1JvSUQwOVBTQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dVbUZ1WjJWRmNuSnZjaWhjSWxCaGRHZ2diWFZ6ZENCdWIzUWdZbVVnWlcxd2RIa3VYQ0lwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHeGxkQ0J3WVhSb0lEMGdkR2hwY3k1eVpYQnNZV05sS0M5Y1hDOTdNaXg5TDJjc0lDY3ZKeWt1Y21Wd2JHRmpaU2d2V3kxYlhGeGRlMzBvS1NzdUxGeGNYRnhlSkh3alhGeHpYUzluTENBblhGeGNYQ1FtSnlrN1hHNGdJQ0FnSUNBZ0lHeGxkQ0J3WVhSMFpYSnVJRDBnY0dGMGFDNXlaWEJzWVdObEtDOG9LRnhjTHo5Y1hDcGNYQ29wZkNoY1hDOC9YRndxS1h3b1hGdy9LWHdvWEZ3dktTa3ZaeXdnS0NRd0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpkMmwwWTJnZ0tDUXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNjdktpb25PaUJ5WlhSMWNtNGdKeWcvT2k5N01TeDlMaW9wUHljN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDY3FLaWM2SUhKbGRIVnliaUFuTGlvbk8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQW5MeW9uT2lCeVpYUjFjbTRnSnlnL09pOTdNU3g5VzE0dlhTb3BQeWM3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNjcUp6b2djbVYwZFhKdUlDZGJYaTlkS2ljN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDYy9Kem9nY21WMGRYSnVJQ2RiWGk5ZEp6dGNiaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdKeThuT2lCeVpYUjFjbTRnSnk5N01TeDlKenRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ1VtVm5SWGh3S0NkZUtDY2dLeUJ3WVhSMFpYSnVJQ3NnSnlra0p5azdYRzRnSUNBZ2ZUdGNibjFjYm1sbUlDZ2hVM1J5YVc1bkxuQnliM1J2ZEhsd1pTNWhLU0I3WEc0Z0lDQWdVM1J5YVc1bkxuQnliM1J2ZEhsd1pTNWhJRDBnVTNSeWFXNW5MbkJ5YjNSdmRIbHdaUzVoYm5SVGRIbHNaVkJoZEdoVWIxSmxaMlY0TzF4dWZWeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQlRkSEpwYm1jdWNISnZkRzkwZVhCbExtRnVkRk4wZVd4bFVHRjBhRlJ2VW1WblpYZzdYRzVjYmx4dVhHNHZLaW9nVjBWQ1VFRkRTeUJHVDA5VVJWSWdLaXBjYmlBcUtpQXVMM055WXk5emRISnBibWR6TDJGdWRGTjBlV3hsVUdGMGFGUnZVbVZuWlhndWFuTmNiaUFxS2k4aUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JtbHRjRzl5ZENBbkxpOTRiV3hWYm1WelkyRndaU2RjYmx4dWFXWWdLQ0ZUZEhKcGJtY3VjSEp2ZEc5MGVYQmxMbUp5TW01c0tTQjdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRSEJoY21GdElIdGliMjlzWldGdWZTQjRiV3hWYm1WelkyRndaVnh1SUNBZ0lDQXFJRUJ5WlhSMWNtNGdlMU4wY21sdVozMWNiaUFnSUNBZ0tpOWNiaUFnSUNCVGRISnBibWN1Y0hKdmRHOTBlWEJsTG1KeU1tNXNJRDBnWm5WdVkzUnBiMjRvZUcxc1ZXNWxjMk5oY0dVcElIdGNiaUFnSUNBZ0lDQWdiR1YwSUhKbGMzVnNkQ0E5SUhSb2FYTXVjbVZ3YkdGalpTZ3ZLRHhpY2o1OFBHSnlYRnd2UGlrdlp5d2dKMXhjYmljcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvZUcxc1ZXNWxjMk5oY0dVcElISmxkSFZ5YmlCeVpYTjFiSFF1ZUcxc1ZXNWxjMk5oY0dVb0tUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlISmxjM1ZzZER0Y2JpQWdJQ0I5TzF4dWZWeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQlRkSEpwYm1jdWNISnZkRzkwZVhCbExtSnlNbTVzTzF4dVhHNWNibHh1THlvcUlGZEZRbEJCUTBzZ1JrOVBWRVZTSUNvcVhHNGdLaW9nTGk5emNtTXZjM1J5YVc1bmN5OWljakp1YkM1cWMxeHVJQ29xTHlJc0lpZDFjMlVnYzNSeWFXTjBKenRjYmx4dWFXWWdLQ0ZUZEhKcGJtY3VjSEp2ZEc5MGVYQmxMbmh0YkZWdVpYTmpZWEJsS1NCN1hHNGdJQ0FnVTNSeWFXNW5MbkJ5YjNSdmRIbHdaUzU0Yld4VmJtVnpZMkZ3WlNBOUlHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1eVpYQnNZV05sS0M4b0pteDBPM3dtWjNRN2ZDWWpNelE3ZkNZak16azdmQ1poYlhBN0tTOW5MQ0FvSkRFcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITjNhWFJqYUNBb0pERXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSnlac2REc25PaUJ5WlhSMWNtNGdKenduTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBbkptZDBPeWM2SUhKbGRIVnliaUFuUGljN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDY21Jek0wT3ljNklISmxkSFZ5YmlBblhDSW5PMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FuSmlNek9Uc25PaUJ5WlhSMWNtNGdYQ0luWENJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDY21ZVzF3T3ljNklISmxkSFZ5YmlBbkppYzdYRzRnSUNBZ0lDQWdJQ0FnSUNCa1pXWmhkV3gwT2lCeVpYUjFjbTRnSkRFN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUgxY2JuMWNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdVM1J5YVc1bkxuQnliM1J2ZEhsd1pTNTRiV3hWYm1WelkyRndaVHRjYmx4dVhHNWNiaThxS2lCWFJVSlFRVU5MSUVaUFQxUkZVaUFxS2x4dUlDb3FJQzR2YzNKakwzTjBjbWx1WjNNdmVHMXNWVzVsYzJOaGNHVXVhbk5jYmlBcUtpOGlMQ0luZFhObElITjBjbWxqZENjN1hHNWNibWxtSUNnaFUzUnlhVzVuTG5CeWIzUnZkSGx3WlM1amIyMXdZWEpsVkc4cElIdGNiaUFnSUNCVGRISnBibWN1Y0hKdmRHOTBlWEJsTG1OdmJYQmhjbVZVYnlBOUlHWjFibU4wYVc5dUtITjBjaWtnZTF4dUlDQWdJQ0FnSUNCcFppQW9jM1J5SUQwOUlHNTFiR3dnZkh3Z2RHaHBjeUErSUhOMGNpa2djbVYwZFhKdUlERTdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpJRHdnYzNSeUtTQnlaWFIxY200Z0xURTdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQXdPMXh1SUNBZ0lIMDdYRzU5WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUZOMGNtbHVaeTV3Y205MGIzUjVjR1V1WTI5dGNHRnlaVlJ2TzF4dVhHNWNibHh1THlvcUlGZEZRbEJCUTBzZ1JrOVBWRVZTSUNvcVhHNGdLaW9nTGk5emNtTXZjM1J5YVc1bmN5OWpiMjF3WVhKbFZHOHVhbk5jYmlBcUtpOGlMQ0luZFhObElITjBjbWxqZENjN1hHNWNibWxtSUNnaFUzUnlhVzVuTG5CeWIzUnZkSGx3WlM1amIyNTBZV2x1Y3lrZ2UxeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCemRISmNiaUFnSUNBZ0tpOWNiaUFnSUNCVGRISnBibWN1Y0hKdmRHOTBlWEJsTG1OdmJuUmhhVzV6SUQwZ1puVnVZM1JwYjI0b2MzUnlLU0I3SUhKbGRIVnliaUIwYUdsekxtbHVaR1Y0VDJZb2MzUnlLU0ErSUMweE95QjlPMXh1ZlZ4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCVGRISnBibWN1Y0hKdmRHOTBlWEJsTG1OdmJuUmhhVzV6TzF4dVhHNWNibHh1THlvcUlGZEZRbEJCUTBzZ1JrOVBWRVZTSUNvcVhHNGdLaW9nTGk5emNtTXZjM1J5YVc1bmN5OWpiMjUwWVdsdWN5NXFjMXh1SUNvcUx5SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JseHVhVzF3YjNKMElDY3VMaTloY25KaGVYTXZZMjl1ZEdGcGJuTW5YRzVwYlhCdmNuUWdKeTR2WjJWMFRHVnVaM1JvSjF4dVhHNXBaaUFvSVZOMGNtbHVaeTV3Y205MGIzUjVjR1V1WTNWMGMzUnlhVzVuS1NCN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0aWIyOXNaV0Z1Zkc1MWJXSmxjbjBnVzJOb1pXTnJZbmwwWlYwZ1kyaGxZMnNnWW5sMFpTQnNaVzVuZEdnZ2FXWWdkSEoxWlM0Z0tHUmxabUYxYkhRZ2FYTWdabUZzYzJVcFhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo5SUcxaGVFeGxibWQwYUNCMGFHVWdiV0Y0SUd4bGJtZDBhQzVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdXM04xWm1acGVGMGdkR2hsSUhOMVptWnBlQzVjYmlBZ0lDQWdLaUJBY21WMGRYSnVJSHR6ZEhKcGJtZDlYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1UzUnlhVzVuTG5CeWIzUnZkSGx3WlM1amRYUnpkSEpwYm1jZ1BTQm1kVzVqZEdsdmJpaGphR1ZqYTJKNWRHVXNJRzFoZUV4bGJtZDBhQ3dnYzNWbVptbDRLU0I3WEc0Z0lDQWdJQ0FnSUd4bGRDQmhjbWRKYm1SbGVDQTlJREE3WEc0Z0lDQWdJQ0FnSUd4bGRDQmhjbWREZFhKeUlEMGdLQ2tnUFQ0Z1lYSm5kVzFsYm5SelcyRnlaMGx1WkdWNFhUdGNiaUFnSUNBZ0lDQWdiR1YwSUdGeVoxTm9hV1owSUQwZ0tDa2dQVDRnWVhKbmRXMWxiblJ6VzJGeVowbHVaR1Y0S3l0ZE8xeHVYRzRnSUNBZ0lDQWdJR05vWldOcllubDBaU0E5SUZzblltOXZiR1ZoYmljc0lDZHVkVzFpWlhJblhTNWpiMjUwWVdsdWN5aDBlWEJsYjJZZ1lYSm5RM1Z5Y2lncEtTQS9JR0Z5WjFOb2FXWjBLQ2tnT2lCbVlXeHpaVHRjYmx4dUlDQWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlHRnlaME4xY25Jb0tTQWhQVDBnSjI1MWJXSmxjaWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvWVhKblEzVnljaWdwSUNzZ1hDSWdhWE1nYm05MElHRWdiblZ0WW1WeVhDSXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUcxaGVFeGxibWQwYUNBOUlHRnlaMU5vYVdaMEtDazdYRzVjYmlBZ0lDQWdJQ0FnYzNWbVptbDRJRDBnZEhsd1pXOW1JR0Z5WjBOMWNuSW9LU0E5UFQwZ0ozTjBjbWx1WnljZ1B5QmhjbWRUYUdsbWRDZ3BJRG9nSnljN1hHNWNiaUFnSUNBZ0lDQWdiR1YwSUd4bGJtZDBhQ0E5SUhSb2FYTXVaMlYwVEdWdVozUm9LR05vWldOcllubDBaU2s3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hLR3hsYm1kMGFDQStJRzFoZUV4bGJtZDBhQ2twSUhKbGRIVnliaUIwYUdsek8xeHVYRzRnSUNBZ0lDQWdJR3hsZENCemRXWm1hWGhNWlc1bmRHZ2dQU0J6ZFdabWFYZ3VaMlYwVEdWdVozUm9LR05vWldOcllubDBaU2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaHpkV1ptYVhoTVpXNW5kR2dnUGlCdFlYaE1aVzVuZEdncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCU1lXNW5aVVZ5Y205eUtGd2lUV0Y0SUd4bGJtZDBhQ0J0ZFhOMElHSmxJRzF2Y21VZ2RHaGhiaUJ6ZFdabWFYZ2diR1Z1WjNSb1hDSXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUd4bGRDQnlaWE4xYkhSVGRISnBibWNnUFNBbkp6dGNiaUFnSUNBZ0lDQWdiR1YwSUdOb1pXTnJaV1JNWlc1bmRHZ2dQU0F3TzF4dUlDQWdJQ0FnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElIUm9hWE11YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQmpJRDBnZEdocGN5NWphR0Z5UVhRb2FTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdiQ0E5SUdNdVoyVjBUR1Z1WjNSb0tHTm9aV05yWW5sMFpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZMmhsWTJ0bFpFeGxibWQwYUNBcklHd2dQaUJ0WVhoTVpXNW5kR2dnTFNCemRXWm1hWGhNWlc1bmRHZ3BJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJobFkydGxaRXhsYm1kMGFDQXJQU0JzTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ6ZFd4MFUzUnlhVzVuSUNzOUlHTTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsYzNWc2RGTjBjbWx1WnlBcklITjFabVpwZUR0Y2JpQWdJQ0I5TzF4dWZWeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQlRkSEpwYm1jdWNISnZkRzkwZVhCbExtTjFkSE4wY21sdVp6dGNibHh1WEc1Y2JpOHFLaUJYUlVKUVFVTkxJRVpQVDFSRlVpQXFLbHh1SUNvcUlDNHZjM0pqTDNOMGNtbHVaM012WTNWMGMzUnlhVzVuTG1welhHNGdLaW92SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1cGJYQnZjblFnSnk0dUwyRnljbUY1Y3k5amIyNTBZV2x1Y3lkY2JseHVhV1lnS0NGVGRISnBibWN1Y0hKdmRHOTBlWEJsTG1kbGRFeGxibWQwYUNrZ2UxeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1ltOXZiR1ZoYm54dWRXMWlaWEo5SUZ0amFHVmphMko1ZEdWZElHTm9aV05ySUdKNWRHVWdiR1Z1WjNSb0lHbG1JSFJ5ZFdVdUlDaGtaV1poZFd4MElHbHpJR1poYkhObEtWeHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UyNTFiV0psY24xY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JUZEhKcGJtY3VjSEp2ZEc5MGVYQmxMbWRsZEV4bGJtZDBhQ0E5SUdaMWJtTjBhVzl1S0dOb1pXTnJZbmwwWlNrZ2UxeHVJQ0FnSUNBZ0lDQnNaWFFnWVhKblNXNWtaWGdnUFNBd08xeHVJQ0FnSUNBZ0lDQnNaWFFnWVhKblEzVnljaUE5SUNncElEMCtJR0Z5WjNWdFpXNTBjMXRoY21kSmJtUmxlRjA3WEc0Z0lDQWdJQ0FnSUd4bGRDQmhjbWRUYUdsbWRDQTlJQ2dwSUQwK0lHRnlaM1Z0Wlc1MGMxdGhjbWRKYm1SbGVDc3JYVHRjYmx4dUlDQWdJQ0FnSUNCamFHVmphMko1ZEdVZ1BTQmJKMkp2YjJ4bFlXNG5MQ0FuYm5WdFltVnlKMTB1WTI5dWRHRnBibk1vZEhsd1pXOW1JR0Z5WjBOMWNuSW9LU2tnUHlCaGNtZFRhR2xtZENncElEb2dabUZzYzJVN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hqYUdWamEySjVkR1VnUFQwOUlHWmhiSE5sS1NCeVpYUjFjbTRnZEdocGN5NXNaVzVuZEdnN1hHNWNiaUFnSUNBZ0lDQWdiR1YwSUd4bGJtZDBhQ0E5SURBN1hHNGdJQ0FnSUNBZ0lHWnZjaUFvYkdWMElHa2dQU0F3T3lCcElEd2dkR2hwY3k1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR01nUFNCMGFHbHpMbU5vWVhKRGIyUmxRWFFvYVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6ZDJsMFkyZ2dLR1poYkhObEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ0VvWXlBOFBTQXdlREF3TURBM1JpazZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1Z1WjNSb0lDczlJREU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ0VvZEhsd1pXOW1JR05vWldOcllubDBaU0E5UFQwZ0oyNTFiV0psY2ljZ0ppWWdZMmhsWTJ0aWVYUmxJRDRnTUNrNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVnVaM1JvSUNzOUlHTm9aV05yWW5sMFpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0lTaGpJRHc5SURCNE1EQXdOMFpHS1RwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pXNW5kR2dnS3owZ01qdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0lTaGpJRHc5SURCNE1EQkdSa1pHS1RwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pXNW5kR2dnS3owZ016dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1JsWm1GMWJIUTZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1Z1WjNSb0lDczlJRFE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR3hsYm1kMGFEdGNiaUFnSUNCOU8xeHVmVnh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JUZEhKcGJtY3VjSEp2ZEc5MGVYQmxMbWRsZEV4bGJtZDBhRHRjYmx4dVhHNWNiaThxS2lCWFJVSlFRVU5MSUVaUFQxUkZVaUFxS2x4dUlDb3FJQzR2YzNKakwzTjBjbWx1WjNNdloyVjBUR1Z1WjNSb0xtcHpYRzRnS2lvdklpd2lKM1Z6WlNCemRISnBZM1FuTzF4dVhHNXBaaUFvSVZOMGNtbHVaeTV3Y205MGIzUjVjR1V1Wlc1a2MxZHBkR2dwSUh0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTFOMGNtbHVaMzBnYzNSeVhHNGdJQ0FnSUNvZ1FISmxkSFZ5Ym5NZ2UySnZiMnhsWVc1OVhHNGdJQ0FnSUNvdlhHNGdJQ0FnVTNSeWFXNW5MbkJ5YjNSdmRIbHdaUzVsYm1SelYybDBhQ0E5SUdaMWJtTjBhVzl1S0hOMGNpa2dlMXh1SUNBZ0lDQWdJQ0JzWlhRZ2FTQTlJSFJvYVhNdWJHRnpkRWx1WkdWNFQyWW9jM1J5S1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdrZ1BpQXRNU0FtSmlCcElEMDlQU0IwYUdsekxteGxibWQwYUNBdElITjBjaTUwYjFOMGNtbHVaeWdwTG14bGJtZDBhRHRjYmlBZ0lDQjlPMXh1ZlZ4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCVGRISnBibWN1Y0hKdmRHOTBlWEJsTG1WdVpITlhhWFJvTzF4dVhHNWNibHh1THlvcUlGZEZRbEJCUTBzZ1JrOVBWRVZTSUNvcVhHNGdLaW9nTGk5emNtTXZjM1J5YVc1bmN5OWxibVJ6VjJsMGFDNXFjMXh1SUNvcUx5SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JseHVhVzF3YjNKMElDY3VMaTloY25KaGVYTXZhWE5CY25KaGVTZGNibHh1YVdZZ0tDRlRkSEpwYm1jdWNISnZkRzkwZVhCbExtWnZjbTFoZENrZ2UxeHVJQ0FnSUZOMGNtbHVaeTV3Y205MGIzUjVjR1V1Wm05eWJXRjBJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbkpsY0d4aFkyVW9MeWduSjN3blhGeDdmSDBuZkZ4Y2V5aGNYSGNyS1gwcEwyY3NJQ2drTUN3Z0pERXNJQ1F5S1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCemQybDBZMmdnS0NReEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRndpSnlkY0lqb2djbVYwZFhKdUlGd2lKMXdpTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCY0lpZDdYQ0k2SUhKbGRIVnliaUFuZXljN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElGd2lmU2RjSWpvZ2NtVjBkWEp1SUNkOUp6dGNiaUFnSUNBZ0lDQWdJQ0FnSUdSbFptRjFiSFE2SUhKbGRIVnliaUFvSVM5ZVhGeGtLeVF2Wnk1MFpYTjBLQ1F5S1NBL0lHRnlaM1Z0Wlc1MGMxc3dYU0I4ZkNCN2ZTQTZJRUZ5Y21GNUxtbHpRWEp5WVhrb1lYSm5kVzFsYm5Seld6QmRLU0EvSUdGeVozVnRaVzUwYzFzd1hTQTZJR0Z5WjNWdFpXNTBjeWxiSkRKZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNCOVhHNTlYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRk4wY21sdVp5NXdjbTkwYjNSNWNHVXVabTl5YldGME8xeHVYRzVjYmx4dUx5b3FJRmRGUWxCQlEwc2dSazlQVkVWU0lDb3FYRzRnS2lvZ0xpOXpjbU12YzNSeWFXNW5jeTltYjNKdFlYUXVhbk5jYmlBcUtpOGlMQ0luZFhObElITjBjbWxqZENjN1hHNWNibWxtSUNnaFUzUnlhVzVuTG5CeWIzUnZkSGx3WlM1bWIzSnRZWFJXWVhKcFlXSnNaWE1wSUh0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZXlwOUlHRnlaM1Z0Wlc1MGMxeHVJQ0FnSUNBcUlFQnlaWFIxY201eklIdEJjbkpoZVR4emRISnBibWMrZlZ4dUlDQWdJQ0FxTDF4dUlDQWdJRk4wY21sdVp5NXdjbTkwYjNSNWNHVXVabTl5YldGMFZtRnlhV0ZpYkdWeklEMGdablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUd4bGRDQnlaV2RsZUNBOUlDOG9KeWQ4SjF4Y2UzeGNYSDBuZkZ4Y2V5aGNYSGNyS1Z4Y2ZTa3ZaenRjYmlBZ0lDQWdJQ0FnYkdWMElIWmhjbWxoWW14bGN5QTlJRnRkTzF4dUlDQWdJQ0FnSUNCc1pYUWdiV0YwWTJobGN6dGNiaUFnSUNBZ0lDQWdkMmhwYkdVZ0tHMWhkR05vWlhNZ1BTQnlaV2RsZUM1bGVHVmpLSFJvYVhNcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdiV0YwWTJnZ1BTQnRZWFJqYUdWeld6QmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRzFoZEdOb0lDRTlQU0JjSWljblhDSWdKaVlnYldGMFkyZ2dJVDA5SUZ3aUozdGNJaUFtSmlCdFlYUmphQ0FoUFQwZ1hDSjlKMXdpS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlhV0ZpYkdWekxuQjFjMmdvYldGMFkyaGxjMXN5WFNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhaaGNtbGhZbXhsY3p0Y2JpQWdJQ0I5TzF4dWZWeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQlRkSEpwYm1jdWNISnZkRzkwZVhCbExtWnZjbTFoZEZaaGNtbGhZbXhsY3p0Y2JseHVYRzVjYmk4cUtpQlhSVUpRUVVOTElFWlBUMVJGVWlBcUtseHVJQ29xSUM0dmMzSmpMM04wY21sdVozTXZabTl5YldGMFZtRnlhV0ZpYkdWekxtcHpYRzRnS2lvdklpd2lKM1Z6WlNCemRISnBZM1FuTzF4dVhHNXBaaUFvSVZOMGNtbHVaeTV3Y205MGIzUjVjR1V1WjNKdmRYQmxaQ2tnZTF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3Ym5WdFltVnlmU0J6YVhwbFhHNGdJQ0FnSUNvZ1FISmxkSFZ5YmlCN1FYSnlZWGs4YzNSeWFXNW5QbjFjYmlBZ0lDQWdLaTljYmlBZ0lDQlRkSEpwYm1jdWNISnZkRzkwZVhCbExtZHliM1Z3WldRZ1BTQm1kVzVqZEdsdmJpaHphWHBsS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doS0hOcGVtVWdQaUF4S1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUZKaGJtZGxSWEp5YjNJb0owbHVkbUZzYVdRZ2MybDZaU0IyWVd4MVpTY3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2MybDZaU0FoUFQwZ0oyNTFiV0psY2ljcElITnBlbVVnUFNCd1lYSnpaVWx1ZENoemFYcGxLVnh1SUNBZ0lDQWdJQ0JzWlhRZ2NtVnpkV3gwY3lBOUlGdGRPMXh1SUNBZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0E4SUhSb2FYTXViR1Z1WjNSb095QnBJQ3M5SUhOcGVtVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxjM1ZzZEhNdWNIVnphQ2gwYUdsekxuTnNhV05sS0drc0lHa2dLeUJ6YVhwbEtTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsYzNWc2RITTdYRzRnSUNBZ2ZUdGNibjFjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnVTNSeWFXNW5MbkJ5YjNSdmRIbHdaUzVuY205MWNHVmtPMXh1WEc1Y2JseHVMeW9xSUZkRlFsQkJRMHNnUms5UFZFVlNJQ29xWEc0Z0tpb2dMaTl6Y21NdmMzUnlhVzVuY3k5bmNtOTFjR1ZrTG1welhHNGdLaW92SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1cFppQW9JVk4wY21sdVp5NXdjbTkwYjNSNWNHVXVaM0p2ZFhCbFpGSnBaMmgwS1NCN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo5SUhOcGVtVmNiaUFnSUNBZ0tpQkFjbVYwZFhKdUlIdEJjbkpoZVR4emRISnBibWMrZlZ4dUlDQWdJQ0FxTDF4dUlDQWdJRk4wY21sdVp5NXdjbTkwYjNSNWNHVXVaM0p2ZFhCbFpGSnBaMmgwSUQwZ1puVnVZM1JwYjI0b2MybDZaU2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9JU2h6YVhwbElENGdNU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJTWVc1blpVVnljbTl5S0NkSmJuWmhiR2xrSUhOcGVtVWdkbUZzZFdVbktUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUhOcGVtVWdJVDA5SUNkdWRXMWlaWEluS1NCemFYcGxJRDBnY0dGeWMyVkpiblFvYzJsNlpTbGNiaUFnSUNBZ0lDQWdiR1YwSUhKbGMzVnNkSE1nUFNCYlhUdGNiaUFnSUNBZ0lDQWdabTl5SUNoc1pYUWdhU0E5SUhSb2FYTXViR1Z1WjNSb095QnBJRDRnTURzZ2FTQXRQU0J6YVhwbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYTjFiSFJ6TG5CMWMyZ29kR2hwY3k1emJHbGpaU2hOWVhSb0xtMWhlQ2d3TENCcElDMGdjMmw2WlNrc0lHa3BLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnY21WemRXeDBjeTV5WlhabGNuTmxLQ2s3WEc0Z0lDQWdmVHRjYm4xY2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1UzUnlhVzVuTG5CeWIzUnZkSGx3WlM1bmNtOTFjR1ZrVW1sbmFIUTdYRzVjYmx4dVhHNHZLaW9nVjBWQ1VFRkRTeUJHVDA5VVJWSWdLaXBjYmlBcUtpQXVMM055WXk5emRISnBibWR6TDJkeWIzVndaV1JTYVdkb2RDNXFjMXh1SUNvcUx5SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JseHVhVzF3YjNKMElDY3VMM0psY0dWaGRDZGNibHh1YVdZZ0tDRlRkSEpwYm1jdWNISnZkRzkwZVhCbExteGxablJRWVdRcElIdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UyNTFiV0psY24wZ2JHVnVaM1JvWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJR1pwYkd4RGFHRnlYRzRnSUNBZ0lDb2dRSEpsZEhWeWJuTWdlM04wY21sdVozMWNiaUFnSUNBZ0tpOWNiaUFnSUNCVGRISnBibWN1Y0hKdmRHOTBlWEJsTG14bFpuUlFZV1FnUFNCbWRXNWpkR2x2Ymloc1pXNW5kR2dzSUdacGJHeERhR0Z5S1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdiR1Z1WjNSb0lDRTlQU0FuYm5WdFltVnlKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWhzWlc1bmRHZ2dLeUFuSUdseklHNXZkQ0JoSUc1MWJXSmxjaWNwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHbG1JQ2doWm1sc2JFTm9ZWElwSUdacGJHeERhR0Z5SUQwZ0p5QW5PMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVzWlc1bmRHZ2dQajBnYkdWdVozUm9LU0J5WlhSMWNtNGdkR2hwY3k1MGIxTjBjbWx1WnlncE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1ptbHNiRU5vWVhJdWNtVndaV0YwS0d4bGJtZDBhQ0F0SUhSb2FYTXViR1Z1WjNSb0tTQXJJSFJvYVhNdWRHOVRkSEpwYm1jb0tUdGNiaUFnSUNCOU8xeHVmVnh1YVdZZ0tDRlRkSEpwYm1jdWNISnZkRzkwZVhCbExteHdZV1FwSUh0Y2JpQWdJQ0JUZEhKcGJtY3VjSEp2ZEc5MGVYQmxMbXh3WVdRZ1BTQlRkSEpwYm1jdWNISnZkRzkwZVhCbExteGxablJRWVdRN1hHNTlYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRk4wY21sdVp5NXdjbTkwYjNSNWNHVXViR1ZtZEZCaFpEdGNibHh1WEc1Y2JpOHFLaUJYUlVKUVFVTkxJRVpQVDFSRlVpQXFLbHh1SUNvcUlDNHZjM0pqTDNOMGNtbHVaM012YkdWbWRGQmhaQzVxYzF4dUlDb3FMeUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNibHh1YVdZZ0tDRlRkSEpwYm1jdWNISnZkRzkwZVhCbExuSmxjR1ZoZENrZ2UxeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFQndZWEpoYlNCN2JuVnRZbVZ5ZlNCamIzVnVkRnh1SUNBZ0lDQXFJRUJ5WlhSMWNtNGdlM04wY21sdVozMWNiaUFnSUNBZ0tpOWNiaUFnSUNCVGRISnBibWN1Y0hKdmRHOTBlWEJsTG5KbGNHVmhkQ0E5SUdaMWJtTjBhVzl1S0dOdmRXNTBLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hLR052ZFc1MElENDlJREFwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnVW1GdVoyVkZjbkp2Y2lnblNXNTJZV3hwWkNCamIzVnVkQ0IyWVd4MVpTY3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUd4bGRDQnlaWE4xYkhRZ1BTQW5KenRjYmlBZ0lDQWdJQ0FnWm05eUlDaHNaWFFnYVNBOUlEQTdJR2tnUENCamIzVnVkRHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYTjFiSFFnS3owZ2RHaHBjeTUwYjFOMGNtbHVaeWdwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCeVpYTjFiSFE3WEc0Z0lDQWdmVHRjYm4xY2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1UzUnlhVzVuTG5CeWIzUnZkSGx3WlM1eVpYQmxZWFE3WEc1Y2JseHVYRzR2S2lvZ1YwVkNVRUZEU3lCR1QwOVVSVklnS2lwY2JpQXFLaUF1TDNOeVl5OXpkSEpwYm1kekwzSmxjR1ZoZEM1cWMxeHVJQ29xTHlJc0lpZDFjMlVnYzNSeWFXTjBKenRjYmx4dWFXMXdiM0owSUNjdUwzaHRiRVZ6WTJGd1pTZGNibHh1YVdZZ0tDRlRkSEpwYm1jdWNISnZkRzkwZVhCbExtNXNNbUp5S1NCN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0aWIyOXNaV0Z1ZlNCNGJXeEZjMk5oY0dWY2JpQWdJQ0FnS2lCQWNtVjBkWEp1Y3lCN2MzUnlhVzVuZlZ4dUlDQWdJQ0FxTDF4dUlDQWdJRk4wY21sdVp5NXdjbTkwYjNSNWNHVXVibXd5WW5JZ1BTQm1kVzVqZEdsdmJpaDRiV3hGYzJOaGNHVXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJQ2g0Yld4RmMyTmhjR1VnUHlCMGFHbHpMbmh0YkVWelkyRndaU2dwSURvZ2RHaHBjeWt1Y21Wd2JHRmpaU2d2S0Z4Y2NseGNibnhjWEc1Y1hISjhYRnh5ZkZ4Y2Jpa3ZaeXdnSnp4aWNpOCtKeWs3WEc0Z0lDQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCVGRISnBibWN1Y0hKdmRHOTBlWEJsTG01c01tSnlPMXh1WEc1Y2JseHVMeW9xSUZkRlFsQkJRMHNnUms5UFZFVlNJQ29xWEc0Z0tpb2dMaTl6Y21NdmMzUnlhVzVuY3k5dWJESmljaTVxYzF4dUlDb3FMeUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNibHh1YVdZZ0tDRlRkSEpwYm1jdWNISnZkRzkwZVhCbExuaHRiRVZ6WTJGd1pTa2dlMXh1SUNBZ0lGTjBjbWx1Wnk1d2NtOTBiM1I1Y0dVdWVHMXNSWE5qWVhCbElEMGdablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuSmxjR3hoWTJVb0x5ZzhmRDU4WENKOEozd21LUzluTENBb0pERXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSE4zYVhSamFDQW9KREVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0p6d25PaUJ5WlhSMWNtNGdKeVpzZERzbk8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQW5QaWM2SUhKbGRIVnliaUFuSm1kME95YzdYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ2RjSWljNklISmxkSFZ5YmlBbkppTXpORHNuTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCY0lpZGNJam9nY21WMGRYSnVJQ2NtSXpNNU95YzdYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ2NtSnpvZ2NtVjBkWEp1SUNjbVlXMXdPeWM3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtaV1poZFd4ME9pQnlaWFIxY200Z0pERTdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lIMWNibjFjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnVTNSeWFXNW5MbkJ5YjNSdmRIbHdaUzU0Yld4RmMyTmhjR1U3WEc1Y2JseHVYRzR2S2lvZ1YwVkNVRUZEU3lCR1QwOVVSVklnS2lwY2JpQXFLaUF1TDNOeVl5OXpkSEpwYm1kekwzaHRiRVZ6WTJGd1pTNXFjMXh1SUNvcUx5SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JseHVhV1lnS0NGVGRISnBibWN1Y0hKdmRHOTBlWEJsTG5GMWIzUmxLU0I3WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRpYjI5c1pXRnVmU0J2ZG1WeWJHRndZV0pzWlZ4dUlDQWdJQ0FxSUVCeVpYUjFjbTRnZTNOMGNtbHVaMzFjYmlBZ0lDQWdLaTljYmlBZ0lDQlRkSEpwYm1jdWNISnZkRzkwZVhCbExuRjFiM1JsSUQwZ1puVnVZM1JwYjI0b2IzWmxjbXhoY0dGaWJHVXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCdmRtVnliR0Z3WVdKc1pTQWhQVDBnSjJKdmIyeGxZVzRuS1NCdmRtVnliR0Z3WVdKc1pTQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doYjNabGNteGhjR0ZpYkdVZ0ppWWdkR2hwY3k1c1pXNW5kR2dnUGowZ01pa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVkyaGhja0YwS0RBcElEMDlQU0FuWENJbklDWW1JSFJvYVhNdVkyaGhja0YwS0hSb2FYTXViR1Z1WjNSb0lDMGdNU2tnUFQwOUlDZGNJaWNwSUhKbGRIVnliaUIwYUdsekxuUnZVM1J5YVc1bktDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1amFHRnlRWFFvTUNrZ1BUMDlJRndpSjF3aUlDWW1JSFJvYVhNdVkyaGhja0YwS0hSb2FYTXViR1Z1WjNSb0lDMGdNU2tnUFQwOUlGd2lKMXdpS1NCeVpYUjFjbTRnZEdocGN5NTBiMU4wY21sdVp5Z3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUFuWENJbklDc2dkR2hwY3lBcklDZGNJaWM3WEc0Z0lDQWdmVHRjYm4xY2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1UzUnlhVzVuTG5CeWIzUnZkSGx3WlM1eGRXOTBaVHRjYmx4dVhHNWNiaThxS2lCWFJVSlFRVU5MSUVaUFQxUkZVaUFxS2x4dUlDb3FJQzR2YzNKakwzTjBjbWx1WjNNdmNYVnZkR1V1YW5OY2JpQXFLaThpTENJbmRYTmxJSE4wY21samRDYzdYRzVjYm1sbUlDZ2hVM1J5YVc1bkxuQnliM1J2ZEhsd1pTNXlaV2RsZUNrZ2UxeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCbWJHRm5jMXh1SUNBZ0lDQXFJRUJ5WlhSMWNtNXpJSHRTWldkRmVIQjlYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1UzUnlhVzVuTG5CeWIzUnZkSGx3WlM1eVpXZGxlQ0E5SUdaMWJtTjBhVzl1S0dac1lXZHpLU0I3SUhKbGRIVnliaUJ1WlhjZ1VtVm5SWGh3S0hSb2FYTXNJR1pzWVdkektUc2dmVHRjYm4xY2JtbG1JQ2doVTNSeWFXNW5MbkJ5YjNSdmRIbHdaUzV5S1NCN1hHNGdJQ0FnVTNSeWFXNW5MbkJ5YjNSdmRIbHdaUzV5SUQwZ1UzUnlhVzVuTG5CeWIzUnZkSGx3WlM1eVpXZGxlRHRjYm4xY2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1UzUnlhVzVuTG5CeWIzUnZkSGx3WlM1eVpXZGxlRHRjYmx4dVhHNWNiaThxS2lCWFJVSlFRVU5MSUVaUFQxUkZVaUFxS2x4dUlDb3FJQzR2YzNKakwzTjBjbWx1WjNNdmNtVm5aWGd1YW5OY2JpQXFLaThpTENJbmRYTmxJSE4wY21samRDYzdYRzVjYm1sdGNHOXlkQ0FuTGk5eVpYQmxZWFFuWEc1Y2JtbG1JQ2doVTNSeWFXNW5MbkJ5YjNSdmRIbHdaUzV5YVdkb2RGQmhaQ2tnZTF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3Ym5WdFltVnlmU0JzWlc1bmRHaGNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ1ptbHNiRU5vWVhKY2JpQWdJQ0FnS2lCQWNtVjBkWEp1Y3lCN2MzUnlhVzVuZlZ4dUlDQWdJQ0FxTDF4dUlDQWdJRk4wY21sdVp5NXdjbTkwYjNSNWNHVXVjbWxuYUhSUVlXUWdQU0JtZFc1amRHbHZiaWhzWlc1bmRHZ3NJR1pwYkd4RGFHRnlLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2JHVnVaM1JvSUNFOVBTQW5iblZ0WW1WeUp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpaHNaVzVuZEdnZ0t5QW5JR2x6SUc1dmRDQmhJRzUxYldKbGNpY3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDZ2habWxzYkVOb1lYSXBJR1pwYkd4RGFHRnlJRDBnSnlBbk8xeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NXNaVzVuZEdnZ1BqMGdiR1Z1WjNSb0tTQnlaWFIxY200Z2RHaHBjeTUwYjFOMGNtbHVaeWdwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTBiMU4wY21sdVp5Z3BJQ3NnWm1sc2JFTm9ZWEl1Y21Wd1pXRjBLR3hsYm1kMGFDQXRJSFJvYVhNdWJHVnVaM1JvS1R0Y2JpQWdJQ0I5TzF4dWZWeHVhV1lnS0NGVGRISnBibWN1Y0hKdmRHOTBlWEJsTG5Kd1lXUXBJSHRjYmlBZ0lDQlRkSEpwYm1jdWNISnZkRzkwZVhCbExuSndZV1FnUFNCVGRISnBibWN1Y0hKdmRHOTBlWEJsTG5KcFoyaDBVR0ZrTzF4dWZWeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQlRkSEpwYm1jdWNISnZkRzkwZVhCbExuSnBaMmgwVUdGa08xeHVYRzVjYmx4dUx5b3FJRmRGUWxCQlEwc2dSazlQVkVWU0lDb3FYRzRnS2lvZ0xpOXpjbU12YzNSeWFXNW5jeTl5YVdkb2RGQmhaQzVxYzF4dUlDb3FMeUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNibHh1YVdZZ0tDRlRkSEpwYm1jdWNISnZkRzkwZVhCbExuTjBZWEowYzFkcGRHZ3BJSHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdjM1J5WEc0Z0lDQWdJQ292WEc0Z0lDQWdVM1J5YVc1bkxuQnliM1J2ZEhsd1pTNXpkR0Z5ZEhOWGFYUm9JRDBnWm5WdVkzUnBiMjRvYzNSeUtTQjdJSEpsZEhWeWJpQjBhR2x6TG1sdVpHVjRUMllvYzNSeUtTQTlQVDBnTURzZ2ZUdGNibjFjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnVTNSeWFXNW5MbkJ5YjNSdmRIbHdaUzV6ZEdGeWRITlhhWFJvTzF4dVhHNWNibHh1THlvcUlGZEZRbEJCUTBzZ1JrOVBWRVZTSUNvcVhHNGdLaW9nTGk5emNtTXZjM1J5YVc1bmN5OXpkR0Z5ZEhOWGFYUm9MbXB6WEc0Z0tpb3ZJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVYRzVwWmlBb0lWTjBjbWx1Wnk1d2NtOTBiM1I1Y0dVdWRXNXhkVzkwWlNrZ2UxeHVJQ0FnSUZOMGNtbHVaeTV3Y205MGIzUjVjR1V1ZFc1eGRXOTBaU0E5SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NXNaVzVuZEdnZ1BqMGdNaUFtSmx4dUlDQWdJQ0FnSUNBZ0lDQWdLQ2gwYUdsekxtTm9ZWEpCZENnd0tTQTlQVDBnSjF3aUp5QW1KaUIwYUdsekxtTm9ZWEpCZENoMGFHbHpMbXhsYm1kMGFDQXRJREVwSUQwOVBTQW5YQ0luS1NCOGZGeHVJQ0FnSUNBZ0lDQWdJQ0FnS0hSb2FYTXVZMmhoY2tGMEtEQXBJRDA5UFNCY0lpZGNJaUFtSmlCMGFHbHpMbU5vWVhKQmRDaDBhR2x6TG14bGJtZDBhQ0F0SURFcElEMDlQU0JjSWlkY0lpa3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV6YkdsalpTZ3hMQ0F0TVNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZEc5VGRISnBibWNvS1R0Y2JpQWdJQ0I5TzF4dWZWeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQlRkSEpwYm1jdWNISnZkRzkwZVhCbExuVnVjWFZ2ZEdVN1hHNWNibHh1WEc0dktpb2dWMFZDVUVGRFN5QkdUMDlVUlZJZ0tpcGNiaUFxS2lBdUwzTnlZeTl6ZEhKcGJtZHpMM1Z1Y1hWdmRHVXVhbk5jYmlBcUtpOGlYU3dpYzI5MWNtTmxVbTl2ZENJNklpSjlcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9wcm90by5qcy9kaXN0L3Byb3RvLmpzXG4gKiogbW9kdWxlIGlkID0gNFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAoIWdsb2JhbC5kb2N1bWVudCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcImpRdWVyeS5leHRlbmRzIHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnbG9iYWw7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy92YXJzL3dpbmRvdy5qc1xuICoqLyIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0ICdwcm90by5qcydcblxuLyoqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHBhcmFtIHsqfSBbY29udGV4dF1cbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuJC5mbi5ncm91cEJ5ID0gZnVuY3Rpb24oY2FsbGJhY2ssIGNvbnRleHQpIHtcbiAgICBpZiAoISQuaXNGdW5jdGlvbihjYWxsYmFjaykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihjYWxsYmFjayArIFwiIGlzIG5vdCBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgICBsZXQgcmVzdWx0ID0ge307XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBlbGVtID0gdGhpc1tpXTtcbiAgICAgICAgbGV0IGtleSA9IGNhbGxiYWNrLmNhbGwoY29udGV4dCB8fCBlbGVtLCBlbGVtLCBpLCB0aGlzKTtcbiAgICAgICAgaWYgKGtleSAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoa2V5IGluIHJlc3VsdClcbiAgICAgICAgICAgICAgICByZXN1bHRba2V5XS5wdXNoKGVsZW0pO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHJlc3VsdFtrZXldID0gJChlbGVtKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgJC5mbi5ncm91cEJ5O1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvZ3JvdXBCeS5qc1xuICoqLyIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0ICdwcm90by5qcydcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ3xBcnJheTxIVE1MRWxlbWVudD58alF1ZXJ5PEhUTUxFbGVtZW50Pn0gZXhjbHVkZXNcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuJC5mbi5tYXhaSW5kZXggPSBmdW5jdGlvbihleGNsdWRlcykge1xuICAgIGxldCB6SW5kZXggPSAwO1xuICAgIHRoaXMuZmluZCgnOnZpc2libGUnKS5hbmRTZWxmKCkuYWRkKHRoaXMucGFyZW50c1VudGlsKCdodG1sJykpLm5vdChleGNsdWRlcykuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMubm9kZU5hbWUgIT09ICcjZG9jdW1lbnQnKSB7XG4gICAgICAgICAgICBsZXQgJHRoaXMgPSAkKHRoaXMpO1xuICAgICAgICAgICAgaWYgKFsnYWJzb2x1dGUnLCAncmVsYXRpdmUnLCAnZml4ZWQnXS5jb250YWlucygkdGhpcy5jc3MoJ3Bvc2l0aW9uJykpKSB7XG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gcGFyc2VJbnQoJHRoaXMuY3NzKCd6SW5kZXgnKSk7XG4gICAgICAgICAgICAgICAgaWYgKCFpc05hTih2YWx1ZSkgJiYgdmFsdWUgPiB6SW5kZXgpIHpJbmRleCA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHpJbmRleDtcbn07XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uIE1heCB6SW5kZXggZnJvbSBkb2N1bWVudCBib2R5LlxuICogQHBhcmFtIHtzdHJpbmd8QXJyYXk8SFRNTEVsZW1lbnQ+fGpRdWVyeTxIVE1MRWxlbWVudD59IGV4Y2x1ZGVzXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbiQubWF4WkluZGV4ID0gZnVuY3Rpb24oZXhjbHVkZXMpIHtcbiAgICByZXR1cm4gJChkb2N1bWVudC5ib2R5KS5tYXhaSW5kZXgoZXhjbHVkZXMpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgJC5mbi5tYXhaSW5kZXg7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9tYXhaSW5kZXguanNcbiAqKi8iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB3aW5kb3cgZnJvbSAnLi93aW5kb3cnXG5cbm1vZHVsZS5leHBvcnRzID0gd2luZG93LmRvY3VtZW50O1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvdmFycy9kb2N1bWVudC5qc1xuICoqLyIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0ICdwcm90by5qcydcblxuLyoqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybiB7bnVtYmVyfVxuICovXG4kLm5leHRUaWNrID0gZnVuY3Rpb24oY2FsbGJhY2spIHsgcmV0dXJuIHNldFRpbWVvdXQoY2FsbGJhY2ssIDApOyB9O1xuXG5leHBvcnQgZGVmYXVsdCAkLm5leHRUaWNrO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvbmV4dFRpY2suanNcbiAqKi8iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCAncHJvdG8uanMnXG5pbXBvcnQgJy4vc3BsaXQnXG5cbiQub2JqID0ge1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9ialxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAgICAgKiBAcGFyYW0geyp9IFtkZWZhdWx0VmFsdWVdXG4gICAgICogQHJldHVybiB7Kn1cbiAgICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uKG9iaiwga2V5LCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgICBpZiAoIWtleSkgcmV0dXJuIG9iajtcbiAgICAgICAgbGV0IGtleUZyYWdtZW50cyA9ICQuc3BsaXQoa2V5LCAnLicsICcvJyk7XG4gICAgICAgIGZvciAobGV0IGtleUZyYWdtZW50IG9mIGtleUZyYWdtZW50cykge1xuICAgICAgICAgICAgaWYgKChvYmogPSBvYmpba2V5RnJhZ21lbnRdKSA9PSBudWxsKSByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICgkLmlzQXJyYXkoZGVmYXVsdFZhbHVlKSAmJiAhJC5pc0FycmF5KG9iaikpXG4gICAgICAgICAgICBvYmogPSAkLm1ha2VBcnJheShvYmopO1xuXG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2FwcGVuZEFycmF5XVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZnVsbGtleVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAgICovXG4gICAgc2V0OiBmdW5jdGlvbihhcHBlbmRBcnJheSwgb2JqLCBmdWxsa2V5LCB2YWx1ZSkge1xuICAgICAgICBsZXQgYXJncyA9ICQubWFrZUFycmF5KGFyZ3VtZW50cyk7XG4gICAgICAgIGFwcGVuZEFycmF5ID0gdHlwZW9mIGFyZ3MuZmlyc3QoKSA9PT0gJ2Jvb2xlYW4nID8gYXJncy5zaGlmdCgpIDogZmFsc2U7XG4gICAgICAgIG9iaiA9IHR5cGVvZiBhcmdzLmZpcnN0KCkgPT09ICdvYmplY3QnIHx8ICQuaXNGdW5jdGlvbihhcmdzLmZpcnN0KCkpID8gYXJncy5zaGlmdCgpIDoge307XG4gICAgICAgIGlmICh0eXBlb2YgYXJncy5maXJzdCgpICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9iamVjdCBrZXkgbXVzdCBiZSBzdHJpbmcgdHlwZSA6IFwiICsgYXJncy5maXJzdCgpKTtcbiAgICAgICAgfVxuICAgICAgICBmdWxsa2V5ID0gYXJncy5zaGlmdCgpO1xuICAgICAgICB2YWx1ZSA9IGFyZ3Muc2hpZnQoKTtcbiAgICAgICAgbGV0IGtleXMgPSAkLm1hcCgkLnNwbGl0KGZ1bGxrZXksICcuJywgJy8nKSwgZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICBpZiAoL14oW15cXFtdKyk/XFxbKFteXFxdXSspP1xcXS8udGVzdChrZXkpKSB7XG4gICAgICAgICAgICAgICAgbGV0IGluS2V5cyA9IFtrZXkubWF0Y2goL14oW15cXFtdKyk/LylbMV1dO1xuICAgICAgICAgICAgICAgIGxldCBpbkJyYWNrZXQgPSAvXFxbKFteXFxdXSspP1xcXS9nO1xuICAgICAgICAgICAgICAgIGxldCBuZXh0TWF0Y2hlcztcbiAgICAgICAgICAgICAgICB3aGlsZSAobmV4dE1hdGNoZXMgPSBpbkJyYWNrZXQuZXhlYyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGluS2V5cy5wdXNoKG5leHRNYXRjaGVzWzFdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGluS2V5cztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBrZXk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZ1bmN0aW9uIGlzTnVsbChvLCBrZXkpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICEoa2V5IGluIG8gJiYgKG9ba2V5XSAhPSBudWxsKSk7XG4gICAgICAgICAgICB9IGNhdGNoIChpZ25vcmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGN1cnJPYmogPSBvYmo7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IGtleSA9IGtleXNbaV07XG4gICAgICAgICAgICBpZiAoaSA9PT0ga2V5cy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFhcHBlbmRBcnJheSB8fCBpc051bGwoY3Vyck9iaiwga2V5KSlcbiAgICAgICAgICAgICAgICAgICAgY3Vyck9ialtrZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoJC5pc0FycmF5KGN1cnJPYmpba2V5XSkpXG4gICAgICAgICAgICAgICAgICAgIGN1cnJPYmpba2V5XS5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGN1cnJPYmpba2V5XSA9IFtjdXJyT2JqW2tleV0sIHZhbHVlXTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNOdWxsKGN1cnJPYmosIGtleSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWtleXNbaSArIDFdKVxuICAgICAgICAgICAgICAgICAgICBrZXlzW2kgKyAxXSA9ICcwJztcbiAgICAgICAgICAgICAgICBjdXJyT2JqW2tleV0gPSAvXlxcZCskLy50ZXN0KGtleXNbaSArIDFdKSA/IFtdIDoge307XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBrZXlzW2kgKyAxXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBrZXlzW2kgKyAxXSA9ICQuaXNBcnJheShjdXJyT2JqW2tleV0pID8gY3Vyck9ialtrZXldLmxlbmd0aCArICcnIDogJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXJyT2JqID0gY3Vyck9ialtrZXldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAgICovXG4gICAgZ2VuZXJhbGl6ZTogZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgIGlmICghJC5pc1BsYWluT2JqZWN0KG9iaikpIHJldHVybiBvYmo7XG4gICAgICAgIGxldCByZXN1bHQgPSB7fTtcbiAgICAgICAgZm9yIChsZXQga2V5IGluIG9iaikge1xuICAgICAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gb2JqW2tleV07XG4gICAgICAgICAgICAgICAgaWYgKGtleS5jb250YWlucygnLicpIHx8IC9cXFsoXFx3Kyk/XFxdLy50ZXN0KGtleSkpXG4gICAgICAgICAgICAgICAgICAgICQub2JqLnNldCh0cnVlLCByZXN1bHQsIGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtkZWVwXVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2FwcGVuZEFycmF5XVxuICAgICAqIEBwYXJhbSB7KnxPYmplY3R9IHRhcmdldFxuICAgICAqIEBwYXJhbSB7KnwuLi5PYmplY3R9IHNvdXJjZXNcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtleHRlbmRJZlVuZGVmaW5lZF1cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAgICovXG4gICAgZXh0ZW5kOiBmdW5jdGlvbihkZWVwLCBhcHBlbmRBcnJheSwgdGFyZ2V0LCBzb3VyY2VzLCBleHRlbmRJZlVuZGVmaW5lZCkge1xuICAgICAgICBsZXQgYXJncyA9ICQubWFrZUFycmF5KGFyZ3VtZW50cyk7XG4gICAgICAgIGRlZXAgPSB0eXBlb2YgYXJncy5maXJzdCgpID09PSAnYm9vbGVhbicgPyBhcmdzLnNoaWZ0KCkgOiBmYWxzZTtcbiAgICAgICAgYXBwZW5kQXJyYXkgPSB0eXBlb2YgYXJncy5maXJzdCgpID09PSAnYm9vbGVhbicgPyBhcmdzLnNoaWZ0KCkgOiBmYWxzZTtcbiAgICAgICAgZXh0ZW5kSWZVbmRlZmluZWQgPSB0eXBlb2YgYXJncy5sYXN0KCkgPT09ICdib29sZWFuJyA/IGFyZ3MucG9wKCkgOiBmYWxzZTtcbiAgICAgICAgdGFyZ2V0ID0gYXJncy5sZW5ndGggPT09IDEgPyB7fSA6IGFyZ3Muc2hpZnQoKSB8fCB7fTtcbiAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgIT09ICdvYmplY3QnICYmICEkLmlzRnVuY3Rpb24odGFyZ2V0KSkgdGFyZ2V0ID0ge307XG5cbiAgICAgICAgc291cmNlcyA9IGFyZ3M7XG4gICAgICAgIGZvciAobGV0IHNvdXJjZSBvZiBzb3VyY2VzKSB7XG4gICAgICAgICAgICBpZiAoc291cmNlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBuYW1lIGluIHNvdXJjZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3JjID0gdGFyZ2V0W25hbWVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvcHkgPSBzb3VyY2VbbmFtZV07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29weSA9PT0gdGFyZ2V0KSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjb3B5SXNBcnJheSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZXAgJiYgY29weSAmJiAoJC5pc1BsYWluT2JqZWN0KGNvcHkpIHx8IChjb3B5SXNBcnJheSA9ICQuaXNBcnJheShjb3B5KSkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjb3B5SXNBcnJheSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3JjSXNQbGFpbk9iamVjdCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3JjID09PSB1bmRlZmluZWQgfHwgKHNyY0lzUGxhaW5PYmplY3QgPSAkLmlzUGxhaW5PYmplY3Qoc3JjKSkgfHwgIWV4dGVuZElmVW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRbbmFtZV0gPSAkLm9iai5leHRlbmQoZGVlcCwgYXBwZW5kQXJyYXksIChzcmNJc1BsYWluT2JqZWN0ID8gc3JjIDoge30pLCBjb3B5LCBleHRlbmRJZlVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNyYyA9PT0gdW5kZWZpbmVkIHx8ICFleHRlbmRJZlVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRbbmFtZV0gPSAkLm1lcmdlKChhcHBlbmRBcnJheSAmJiAkLmlzQXJyYXkoc3JjKSA/IHNyYyA6IFtdKSwgJC5vYmouZXh0ZW5kKGRlZXAsIFtdLCBjb3B5KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb3B5ICE9PSB1bmRlZmluZWQgJiYgKHNyYyA9PT0gdW5kZWZpbmVkIHx8ICFleHRlbmRJZlVuZGVmaW5lZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29weSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0W25hbWVdID0gbmV3IERhdGUoY29weS5nZXRUaW1lKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29weSBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZmxhZ3MgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvcHkuZ2xvYmFsICE9IG51bGwpIGZsYWdzICs9ICdnJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvcHkuaWdub3JlQ2FzZSAhPSBudWxsKSBmbGFncyArPSAnaSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb3B5Lm11bHRpbGluZSAhPSBudWxsKSBmbGFncyArPSAnbSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb3B5LnN0aWNreSAhPSBudWxsKSBmbGFncyArPSAneSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldFtuYW1lXSA9IG5ldyBSZWdFeHAoY29weS5zb3VyY2UsIGZsYWdzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRbbmFtZV0gPSBjb3B5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0geyp9IGtleVZhbHVlUGFpcnNcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAgICovXG4gICAgbWFrZTogZnVuY3Rpb24oLi4ua2V5VmFsdWVQYWlycykge1xuICAgICAgICBsZXQgb2JqID0ge307XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwga2V5VmFsdWVQYWlycy5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICAgICAgb2JqW2tleVZhbHVlUGFpcnNbaV1dID0ga2V5VmFsdWVQYWlyc1tpICsgMV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9ialxuICAgICAqIEByZXR1cm4ge09iamVjdH1cbiAgICAgKi9cbiAgICBlbXB0eTogZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgIGlmICgkLmlzUGxhaW5PYmplY3Qob2JqKSkge1xuICAgICAgICAgICAgZm9yIChsZXQga2V5IGluIG9iaikge1xuICAgICAgICAgICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkgZGVsZXRlIG9ialtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfVxufTtcblxuZm9yIChsZXQga2V5IGluICQub2JqKSB7XG4gICAgbGV0IHNob3J0S2V5ID0ga2V5ICsgJ09iamVjdCc7XG4gICAgaWYgKCEoc2hvcnRLZXkgaW4gJCkpIHtcbiAgICAgICAgaWYgKCQub2JqLmhhc093blByb3BlcnR5KGtleSkpICRbc2hvcnRLZXldID0gJC5vYmpba2V5XTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0ICQub2JqO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvb2JqLmpzXG4gKiovIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfU3ltYm9sID0gcmVxdWlyZShcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9zeW1ib2xcIilbXCJkZWZhdWx0XCJdO1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouY29uc3RydWN0b3IgPT09IF9TeW1ib2wgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbn07XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vYmFiZWwtcnVudGltZS9oZWxwZXJzL3R5cGVvZi5qc1xuICoqIG1vZHVsZSBpZCA9IDExXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vYmFiZWwtcnVudGltZS9jb3JlLWpzL3N5bWJvbC5qc1xuICoqIG1vZHVsZSBpZCA9IDEyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5zeW1ib2wnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy8kLmNvcmUnKS5TeW1ib2w7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pbmRleC5qc1xuICoqIG1vZHVsZSBpZCA9IDEzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XG4vLyBFQ01BU2NyaXB0IDYgc3ltYm9scyBzaGltXG52YXIgJCAgICAgICAgICAgICAgPSByZXF1aXJlKCcuLyQnKVxuICAsIGdsb2JhbCAgICAgICAgID0gcmVxdWlyZSgnLi8kLmdsb2JhbCcpXG4gICwgaGFzICAgICAgICAgICAgPSByZXF1aXJlKCcuLyQuaGFzJylcbiAgLCBERVNDUklQVE9SUyAgICA9IHJlcXVpcmUoJy4vJC5kZXNjcmlwdG9ycycpXG4gICwgJGV4cG9ydCAgICAgICAgPSByZXF1aXJlKCcuLyQuZXhwb3J0JylcbiAgLCByZWRlZmluZSAgICAgICA9IHJlcXVpcmUoJy4vJC5yZWRlZmluZScpXG4gICwgJGZhaWxzICAgICAgICAgPSByZXF1aXJlKCcuLyQuZmFpbHMnKVxuICAsIHNoYXJlZCAgICAgICAgID0gcmVxdWlyZSgnLi8kLnNoYXJlZCcpXG4gICwgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLyQuc2V0LXRvLXN0cmluZy10YWcnKVxuICAsIHVpZCAgICAgICAgICAgID0gcmVxdWlyZSgnLi8kLnVpZCcpXG4gICwgd2tzICAgICAgICAgICAgPSByZXF1aXJlKCcuLyQud2tzJylcbiAgLCBrZXlPZiAgICAgICAgICA9IHJlcXVpcmUoJy4vJC5rZXlvZicpXG4gICwgJG5hbWVzICAgICAgICAgPSByZXF1aXJlKCcuLyQuZ2V0LW5hbWVzJylcbiAgLCBlbnVtS2V5cyAgICAgICA9IHJlcXVpcmUoJy4vJC5lbnVtLWtleXMnKVxuICAsIGlzQXJyYXkgICAgICAgID0gcmVxdWlyZSgnLi8kLmlzLWFycmF5JylcbiAgLCBhbk9iamVjdCAgICAgICA9IHJlcXVpcmUoJy4vJC5hbi1vYmplY3QnKVxuICAsIHRvSU9iamVjdCAgICAgID0gcmVxdWlyZSgnLi8kLnRvLWlvYmplY3QnKVxuICAsIGNyZWF0ZURlc2MgICAgID0gcmVxdWlyZSgnLi8kLnByb3BlcnR5LWRlc2MnKVxuICAsIGdldERlc2MgICAgICAgID0gJC5nZXREZXNjXG4gICwgc2V0RGVzYyAgICAgICAgPSAkLnNldERlc2NcbiAgLCBfY3JlYXRlICAgICAgICA9ICQuY3JlYXRlXG4gICwgZ2V0TmFtZXMgICAgICAgPSAkbmFtZXMuZ2V0XG4gICwgJFN5bWJvbCAgICAgICAgPSBnbG9iYWwuU3ltYm9sXG4gICwgJEpTT04gICAgICAgICAgPSBnbG9iYWwuSlNPTlxuICAsIF9zdHJpbmdpZnkgICAgID0gJEpTT04gJiYgJEpTT04uc3RyaW5naWZ5XG4gICwgc2V0dGVyICAgICAgICAgPSBmYWxzZVxuICAsIEhJRERFTiAgICAgICAgID0gd2tzKCdfaGlkZGVuJylcbiAgLCBpc0VudW0gICAgICAgICA9ICQuaXNFbnVtXG4gICwgU3ltYm9sUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC1yZWdpc3RyeScpXG4gICwgQWxsU3ltYm9scyAgICAgPSBzaGFyZWQoJ3N5bWJvbHMnKVxuICAsIHVzZU5hdGl2ZSAgICAgID0gdHlwZW9mICRTeW1ib2wgPT0gJ2Z1bmN0aW9uJ1xuICAsIE9iamVjdFByb3RvICAgID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG52YXIgc2V0U3ltYm9sRGVzYyA9IERFU0NSSVBUT1JTICYmICRmYWlscyhmdW5jdGlvbigpe1xuICByZXR1cm4gX2NyZWF0ZShzZXREZXNjKHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiBzZXREZXNjKHRoaXMsICdhJywge3ZhbHVlOiA3fSkuYTsgfVxuICB9KSkuYSAhPSA3O1xufSkgPyBmdW5jdGlvbihpdCwga2V5LCBEKXtcbiAgdmFyIHByb3RvRGVzYyA9IGdldERlc2MoT2JqZWN0UHJvdG8sIGtleSk7XG4gIGlmKHByb3RvRGVzYylkZWxldGUgT2JqZWN0UHJvdG9ba2V5XTtcbiAgc2V0RGVzYyhpdCwga2V5LCBEKTtcbiAgaWYocHJvdG9EZXNjICYmIGl0ICE9PSBPYmplY3RQcm90bylzZXREZXNjKE9iamVjdFByb3RvLCBrZXksIHByb3RvRGVzYyk7XG59IDogc2V0RGVzYztcblxudmFyIHdyYXAgPSBmdW5jdGlvbih0YWcpe1xuICB2YXIgc3ltID0gQWxsU3ltYm9sc1t0YWddID0gX2NyZWF0ZSgkU3ltYm9sLnByb3RvdHlwZSk7XG4gIHN5bS5fayA9IHRhZztcbiAgREVTQ1JJUFRPUlMgJiYgc2V0dGVyICYmIHNldFN5bWJvbERlc2MoT2JqZWN0UHJvdG8sIHRhZywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAgIGlmKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTtcbiAgICAgIHNldFN5bWJvbERlc2ModGhpcywgdGFnLCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHN5bTtcbn07XG5cbnZhciBpc1N5bWJvbCA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBEKXtcbiAgaWYoRCAmJiBoYXMoQWxsU3ltYm9scywga2V5KSl7XG4gICAgaWYoIUQuZW51bWVyYWJsZSl7XG4gICAgICBpZighaGFzKGl0LCBISURERU4pKXNldERlc2MoaXQsIEhJRERFTiwgY3JlYXRlRGVzYygxLCB7fSkpO1xuICAgICAgaXRbSElEREVOXVtrZXldID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSlpdFtISURERU5dW2tleV0gPSBmYWxzZTtcbiAgICAgIEQgPSBfY3JlYXRlKEQsIHtlbnVtZXJhYmxlOiBjcmVhdGVEZXNjKDAsIGZhbHNlKX0pO1xuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2MoaXQsIGtleSwgRCk7XG4gIH0gcmV0dXJuIHNldERlc2MoaXQsIGtleSwgRCk7XG59O1xudmFyICRkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhpdCwgUCl7XG4gIGFuT2JqZWN0KGl0KTtcbiAgdmFyIGtleXMgPSBlbnVtS2V5cyhQID0gdG9JT2JqZWN0KFApKVxuICAgICwgaSAgICA9IDBcbiAgICAsIGwgPSBrZXlzLmxlbmd0aFxuICAgICwga2V5O1xuICB3aGlsZShsID4gaSkkZGVmaW5lUHJvcGVydHkoaXQsIGtleSA9IGtleXNbaSsrXSwgUFtrZXldKTtcbiAgcmV0dXJuIGl0O1xufTtcbnZhciAkY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGl0LCBQKXtcbiAgcmV0dXJuIFAgPT09IHVuZGVmaW5lZCA/IF9jcmVhdGUoaXQpIDogJGRlZmluZVByb3BlcnRpZXMoX2NyZWF0ZShpdCksIFApO1xufTtcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShrZXkpe1xuICB2YXIgRSA9IGlzRW51bS5jYWxsKHRoaXMsIGtleSk7XG4gIHJldHVybiBFIHx8ICFoYXModGhpcywga2V5KSB8fCAhaGFzKEFsbFN5bWJvbHMsIGtleSkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW2tleV1cbiAgICA/IEUgOiB0cnVlO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpe1xuICB2YXIgRCA9IGdldERlc2MoaXQgPSB0b0lPYmplY3QoaXQpLCBrZXkpO1xuICBpZihEICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpRC5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgcmV0dXJuIEQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCl7XG4gIHZhciBuYW1lcyAgPSBnZXROYW1lcyh0b0lPYmplY3QoaXQpKVxuICAgICwgcmVzdWx0ID0gW11cbiAgICAsIGkgICAgICA9IDBcbiAgICAsIGtleTtcbiAgd2hpbGUobmFtZXMubGVuZ3RoID4gaSlpZighaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIGtleSAhPSBISURERU4pcmVzdWx0LnB1c2goa2V5KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgJGdldE93blByb3BlcnR5U3ltYm9scyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhpdCl7XG4gIHZhciBuYW1lcyAgPSBnZXROYW1lcyh0b0lPYmplY3QoaXQpKVxuICAgICwgcmVzdWx0ID0gW11cbiAgICAsIGkgICAgICA9IDBcbiAgICAsIGtleTtcbiAgd2hpbGUobmFtZXMubGVuZ3RoID4gaSlpZihoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkpcmVzdWx0LnB1c2goQWxsU3ltYm9sc1trZXldKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgJHN0cmluZ2lmeSA9IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCl7XG4gIGlmKGl0ID09PSB1bmRlZmluZWQgfHwgaXNTeW1ib2woaXQpKXJldHVybjsgLy8gSUU4IHJldHVybnMgc3RyaW5nIG9uIHVuZGVmaW5lZFxuICB2YXIgYXJncyA9IFtpdF1cbiAgICAsIGkgICAgPSAxXG4gICAgLCAkJCAgID0gYXJndW1lbnRzXG4gICAgLCByZXBsYWNlciwgJHJlcGxhY2VyO1xuICB3aGlsZSgkJC5sZW5ndGggPiBpKWFyZ3MucHVzaCgkJFtpKytdKTtcbiAgcmVwbGFjZXIgPSBhcmdzWzFdO1xuICBpZih0eXBlb2YgcmVwbGFjZXIgPT0gJ2Z1bmN0aW9uJykkcmVwbGFjZXIgPSByZXBsYWNlcjtcbiAgaWYoJHJlcGxhY2VyIHx8ICFpc0FycmF5KHJlcGxhY2VyKSlyZXBsYWNlciA9IGZ1bmN0aW9uKGtleSwgdmFsdWUpe1xuICAgIGlmKCRyZXBsYWNlcil2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgIGlmKCFpc1N5bWJvbCh2YWx1ZSkpcmV0dXJuIHZhbHVlO1xuICB9O1xuICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gIHJldHVybiBfc3RyaW5naWZ5LmFwcGx5KCRKU09OLCBhcmdzKTtcbn07XG52YXIgYnVnZ3lKU09OID0gJGZhaWxzKGZ1bmN0aW9uKCl7XG4gIHZhciBTID0gJFN5bWJvbCgpO1xuICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fVxuICAvLyBXZWJLaXQgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIG51bGxcbiAgLy8gVjggdGhyb3dzIG9uIGJveGVkIHN5bWJvbHNcbiAgcmV0dXJuIF9zdHJpbmdpZnkoW1NdKSAhPSAnW251bGxdJyB8fCBfc3RyaW5naWZ5KHthOiBTfSkgIT0gJ3t9JyB8fCBfc3RyaW5naWZ5KE9iamVjdChTKSkgIT0gJ3t9Jztcbn0pO1xuXG4vLyAxOS40LjEuMSBTeW1ib2woW2Rlc2NyaXB0aW9uXSlcbmlmKCF1c2VOYXRpdmUpe1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCl7XG4gICAgaWYoaXNTeW1ib2wodGhpcykpdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3InKTtcbiAgICByZXR1cm4gd3JhcCh1aWQoYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpKTtcbiAgfTtcbiAgcmVkZWZpbmUoJFN5bWJvbC5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCl7XG4gICAgcmV0dXJuIHRoaXMuX2s7XG4gIH0pO1xuXG4gIGlzU3ltYm9sID0gZnVuY3Rpb24oaXQpe1xuICAgIHJldHVybiBpdCBpbnN0YW5jZW9mICRTeW1ib2w7XG4gIH07XG5cbiAgJC5jcmVhdGUgICAgID0gJGNyZWF0ZTtcbiAgJC5pc0VudW0gICAgID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICAkLmdldERlc2MgICAgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAkLnNldERlc2MgICAgPSAkZGVmaW5lUHJvcGVydHk7XG4gICQuc2V0RGVzY3MgICA9ICRkZWZpbmVQcm9wZXJ0aWVzO1xuICAkLmdldE5hbWVzICAgPSAkbmFtZXMuZ2V0ID0gJGdldE93blByb3BlcnR5TmFtZXM7XG4gICQuZ2V0U3ltYm9scyA9ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbiAgaWYoREVTQ1JJUFRPUlMgJiYgIXJlcXVpcmUoJy4vJC5saWJyYXJ5Jykpe1xuICAgIHJlZGVmaW5lKE9iamVjdFByb3RvLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHRydWUpO1xuICB9XG59XG5cbnZhciBzeW1ib2xTdGF0aWNzID0ge1xuICAvLyAxOS40LjIuMSBTeW1ib2wuZm9yKGtleSlcbiAgJ2Zvcic6IGZ1bmN0aW9uKGtleSl7XG4gICAgcmV0dXJuIGhhcyhTeW1ib2xSZWdpc3RyeSwga2V5ICs9ICcnKVxuICAgICAgPyBTeW1ib2xSZWdpc3RyeVtrZXldXG4gICAgICA6IFN5bWJvbFJlZ2lzdHJ5W2tleV0gPSAkU3ltYm9sKGtleSk7XG4gIH0sXG4gIC8vIDE5LjQuMi41IFN5bWJvbC5rZXlGb3Ioc3ltKVxuICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihrZXkpe1xuICAgIHJldHVybiBrZXlPZihTeW1ib2xSZWdpc3RyeSwga2V5KTtcbiAgfSxcbiAgdXNlU2V0dGVyOiBmdW5jdGlvbigpeyBzZXR0ZXIgPSB0cnVlOyB9LFxuICB1c2VTaW1wbGU6IGZ1bmN0aW9uKCl7IHNldHRlciA9IGZhbHNlOyB9XG59O1xuLy8gMTkuNC4yLjIgU3ltYm9sLmhhc0luc3RhbmNlXG4vLyAxOS40LjIuMyBTeW1ib2wuaXNDb25jYXRTcHJlYWRhYmxlXG4vLyAxOS40LjIuNCBTeW1ib2wuaXRlcmF0b3Jcbi8vIDE5LjQuMi42IFN5bWJvbC5tYXRjaFxuLy8gMTkuNC4yLjggU3ltYm9sLnJlcGxhY2Vcbi8vIDE5LjQuMi45IFN5bWJvbC5zZWFyY2hcbi8vIDE5LjQuMi4xMCBTeW1ib2wuc3BlY2llc1xuLy8gMTkuNC4yLjExIFN5bWJvbC5zcGxpdFxuLy8gMTkuNC4yLjEyIFN5bWJvbC50b1ByaW1pdGl2ZVxuLy8gMTkuNC4yLjEzIFN5bWJvbC50b1N0cmluZ1RhZ1xuLy8gMTkuNC4yLjE0IFN5bWJvbC51bnNjb3BhYmxlc1xuJC5lYWNoLmNhbGwoKFxuICAnaGFzSW5zdGFuY2UsaXNDb25jYXRTcHJlYWRhYmxlLGl0ZXJhdG9yLG1hdGNoLHJlcGxhY2Usc2VhcmNoLCcgK1xuICAnc3BlY2llcyxzcGxpdCx0b1ByaW1pdGl2ZSx0b1N0cmluZ1RhZyx1bnNjb3BhYmxlcydcbikuc3BsaXQoJywnKSwgZnVuY3Rpb24oaXQpe1xuICB2YXIgc3ltID0gd2tzKGl0KTtcbiAgc3ltYm9sU3RhdGljc1tpdF0gPSB1c2VOYXRpdmUgPyBzeW0gOiB3cmFwKHN5bSk7XG59KTtcblxuc2V0dGVyID0gdHJ1ZTtcblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcsIHtTeW1ib2w6ICRTeW1ib2x9KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdTeW1ib2wnLCBzeW1ib2xTdGF0aWNzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhdXNlTmF0aXZlLCAnT2JqZWN0Jywge1xuICAvLyAxOS4xLjIuMiBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4gIGNyZWF0ZTogJGNyZWF0ZSxcbiAgLy8gMTkuMS4yLjQgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4gIGRlZmluZVByb3BlcnR5OiAkZGVmaW5lUHJvcGVydHksXG4gIC8vIDE5LjEuMi4zIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpXG4gIGRlZmluZVByb3BlcnRpZXM6ICRkZWZpbmVQcm9wZXJ0aWVzLFxuICAvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldE93blByb3BlcnR5RGVzY3JpcHRvcixcbiAgLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbiAgZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXMsXG4gIC8vIDE5LjEuMi44IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoTylcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiAkZ2V0T3duUHJvcGVydHlTeW1ib2xzXG59KTtcblxuLy8gMjQuMy4yIEpTT04uc3RyaW5naWZ5KHZhbHVlIFssIHJlcGxhY2VyIFssIHNwYWNlXV0pXG4kSlNPTiAmJiAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghdXNlTmF0aXZlIHx8IGJ1Z2d5SlNPTiksICdKU09OJywge3N0cmluZ2lmeTogJHN0cmluZ2lmeX0pO1xuXG4vLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCAnU3ltYm9sJyk7XG4vLyAyMC4yLjEuOSBNYXRoW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhNYXRoLCAnTWF0aCcsIHRydWUpO1xuLy8gMjQuMy4zIEpTT05bQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5zeW1ib2wuanNcbiAqKiBtb2R1bGUgaWQgPSAxNFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyICRPYmplY3QgPSBPYmplY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY3JlYXRlOiAgICAgJE9iamVjdC5jcmVhdGUsXG4gIGdldFByb3RvOiAgICRPYmplY3QuZ2V0UHJvdG90eXBlT2YsXG4gIGlzRW51bTogICAgIHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlLFxuICBnZXREZXNjOiAgICAkT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcixcbiAgc2V0RGVzYzogICAgJE9iamVjdC5kZWZpbmVQcm9wZXJ0eSxcbiAgc2V0RGVzY3M6ICAgJE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzLFxuICBnZXRLZXlzOiAgICAkT2JqZWN0LmtleXMsXG4gIGdldE5hbWVzOiAgICRPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgZ2V0U3ltYm9sczogJE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMsXG4gIGVhY2g6ICAgICAgIFtdLmZvckVhY2hcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5qc1xuICoqIG1vZHVsZSBpZCA9IDE1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbmlmKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5nbG9iYWwuanNcbiAqKiBtb2R1bGUgaWQgPSAxNlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0LCBrZXkpe1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5oYXMuanNcbiAqKiBtb2R1bGUgaWQgPSAxN1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi8kLmZhaWxzJykoZnVuY3Rpb24oKXtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7Z2V0OiBmdW5jdGlvbigpeyByZXR1cm4gNzsgfX0pLmEgIT0gNztcbn0pO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzLyQuZGVzY3JpcHRvcnMuanNcbiAqKiBtb2R1bGUgaWQgPSAxOFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihleGVjKXtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2goZSl7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5mYWlscy5qc1xuICoqIG1vZHVsZSBpZCA9IDE5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgZ2xvYmFsICAgID0gcmVxdWlyZSgnLi8kLmdsb2JhbCcpXG4gICwgY29yZSAgICAgID0gcmVxdWlyZSgnLi8kLmNvcmUnKVxuICAsIGN0eCAgICAgICA9IHJlcXVpcmUoJy4vJC5jdHgnKVxuICAsIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uKHR5cGUsIG5hbWUsIHNvdXJjZSl7XG4gIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GXG4gICAgLCBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HXG4gICAgLCBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TXG4gICAgLCBJU19QUk9UTyAgPSB0eXBlICYgJGV4cG9ydC5QXG4gICAgLCBJU19CSU5EICAgPSB0eXBlICYgJGV4cG9ydC5CXG4gICAgLCBJU19XUkFQICAgPSB0eXBlICYgJGV4cG9ydC5XXG4gICAgLCBleHBvcnRzICAgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KVxuICAgICwgdGFyZ2V0ICAgID0gSVNfR0xPQkFMID8gZ2xvYmFsIDogSVNfU1RBVElDID8gZ2xvYmFsW25hbWVdIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXVxuICAgICwga2V5LCBvd24sIG91dDtcbiAgaWYoSVNfR0xPQkFMKXNvdXJjZSA9IG5hbWU7XG4gIGZvcihrZXkgaW4gc291cmNlKXtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiBrZXkgaW4gdGFyZ2V0O1xuICAgIGlmKG93biAmJiBrZXkgaW4gZXhwb3J0cyljb250aW51ZTtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IG93biA/IHRhcmdldFtrZXldIDogc291cmNlW2tleV07XG4gICAgLy8gcHJldmVudCBnbG9iYWwgcG9sbHV0aW9uIGZvciBuYW1lc3BhY2VzXG4gICAgZXhwb3J0c1trZXldID0gSVNfR0xPQkFMICYmIHR5cGVvZiB0YXJnZXRba2V5XSAhPSAnZnVuY3Rpb24nID8gc291cmNlW2tleV1cbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIDogSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpXG4gICAgLy8gd3JhcCBnbG9iYWwgY29uc3RydWN0b3JzIGZvciBwcmV2ZW50IGNoYW5nZSB0aGVtIGluIGxpYnJhcnlcbiAgICA6IElTX1dSQVAgJiYgdGFyZ2V0W2tleV0gPT0gb3V0ID8gKGZ1bmN0aW9uKEMpe1xuICAgICAgdmFyIEYgPSBmdW5jdGlvbihwYXJhbSl7XG4gICAgICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgQyA/IG5ldyBDKHBhcmFtKSA6IEMocGFyYW0pO1xuICAgICAgfTtcbiAgICAgIEZbUFJPVE9UWVBFXSA9IENbUFJPVE9UWVBFXTtcbiAgICAgIHJldHVybiBGO1xuICAgIC8vIG1ha2Ugc3RhdGljIHZlcnNpb25zIGZvciBwcm90b3R5cGUgbWV0aG9kc1xuICAgIH0pKG91dCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICBpZihJU19QUk9UTykoZXhwb3J0c1tQUk9UT1RZUEVdIHx8IChleHBvcnRzW1BST1RPVFlQRV0gPSB7fSkpW2tleV0gPSBvdXQ7XG4gIH1cbn07XG4vLyB0eXBlIGJpdG1hcFxuJGV4cG9ydC5GID0gMTsgIC8vIGZvcmNlZFxuJGV4cG9ydC5HID0gMjsgIC8vIGdsb2JhbFxuJGV4cG9ydC5TID0gNDsgIC8vIHN0YXRpY1xuJGV4cG9ydC5QID0gODsgIC8vIHByb3RvXG4kZXhwb3J0LkIgPSAxNjsgLy8gYmluZFxuJGV4cG9ydC5XID0gMzI7IC8vIHdyYXBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLmV4cG9ydC5qc1xuICoqIG1vZHVsZSBpZCA9IDIwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0ge3ZlcnNpb246ICcxLjIuNid9O1xuaWYodHlwZW9mIF9fZSA9PSAnbnVtYmVyJylfX2UgPSBjb3JlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5jb3JlLmpzXG4gKiogbW9kdWxlIGlkID0gMjFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vJC5hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGZuLCB0aGF0LCBsZW5ndGgpe1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZih0aGF0ID09PSB1bmRlZmluZWQpcmV0dXJuIGZuO1xuICBzd2l0Y2gobGVuZ3RoKXtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbihhKXtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24oYSwgYil7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uKGEsIGIsIGMpe1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24oLyogLi4uYXJncyAqLyl7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzLyQuY3R4LmpzXG4gKiogbW9kdWxlIGlkID0gMjJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICBpZih0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJyl0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuICByZXR1cm4gaXQ7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzLyQuYS1mdW5jdGlvbi5qc1xuICoqIG1vZHVsZSBpZCA9IDIzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vJC5oaWRlJyk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5yZWRlZmluZS5qc1xuICoqIG1vZHVsZSBpZCA9IDI0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgJCAgICAgICAgICA9IHJlcXVpcmUoJy4vJCcpXG4gICwgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vJC5wcm9wZXJ0eS1kZXNjJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vJC5kZXNjcmlwdG9ycycpID8gZnVuY3Rpb24ob2JqZWN0LCBrZXksIHZhbHVlKXtcbiAgcmV0dXJuICQuc2V0RGVzYyhvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uKG9iamVjdCwga2V5LCB2YWx1ZSl7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzLyQuaGlkZS5qc1xuICoqIG1vZHVsZSBpZCA9IDI1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGJpdG1hcCwgdmFsdWUpe1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGUgIDogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGUgICAgOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlICAgICAgIDogdmFsdWVcbiAgfTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5wcm9wZXJ0eS1kZXNjLmpzXG4gKiogbW9kdWxlIGlkID0gMjZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLyQuZ2xvYmFsJylcbiAgLCBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJ1xuICAsIHN0b3JlICA9IGdsb2JhbFtTSEFSRURdIHx8IChnbG9iYWxbU0hBUkVEXSA9IHt9KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oa2V5KXtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB7fSk7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzLyQuc2hhcmVkLmpzXG4gKiogbW9kdWxlIGlkID0gMjdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciBkZWYgPSByZXF1aXJlKCcuLyQnKS5zZXREZXNjXG4gICwgaGFzID0gcmVxdWlyZSgnLi8kLmhhcycpXG4gICwgVEFHID0gcmVxdWlyZSgnLi8kLndrcycpKCd0b1N0cmluZ1RhZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0LCB0YWcsIHN0YXQpe1xuICBpZihpdCAmJiAhaGFzKGl0ID0gc3RhdCA/IGl0IDogaXQucHJvdG90eXBlLCBUQUcpKWRlZihpdCwgVEFHLCB7Y29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogdGFnfSk7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzLyQuc2V0LXRvLXN0cmluZy10YWcuanNcbiAqKiBtb2R1bGUgaWQgPSAyOFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIHN0b3JlICA9IHJlcXVpcmUoJy4vJC5zaGFyZWQnKSgnd2tzJylcbiAgLCB1aWQgICAgPSByZXF1aXJlKCcuLyQudWlkJylcbiAgLCBTeW1ib2wgPSByZXF1aXJlKCcuLyQuZ2xvYmFsJykuU3ltYm9sO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihuYW1lKXtcbiAgcmV0dXJuIHN0b3JlW25hbWVdIHx8IChzdG9yZVtuYW1lXSA9XG4gICAgU3ltYm9sICYmIFN5bWJvbFtuYW1lXSB8fCAoU3ltYm9sIHx8IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLndrcy5qc1xuICoqIG1vZHVsZSBpZCA9IDI5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgaWQgPSAwXG4gICwgcHggPSBNYXRoLnJhbmRvbSgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihrZXkpe1xuICByZXR1cm4gJ1N5bWJvbCgnLmNvbmNhdChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5LCAnKV8nLCAoKytpZCArIHB4KS50b1N0cmluZygzNikpO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLnVpZC5qc1xuICoqIG1vZHVsZSBpZCA9IDMwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgJCAgICAgICAgID0gcmVxdWlyZSgnLi8kJylcbiAgLCB0b0lPYmplY3QgPSByZXF1aXJlKCcuLyQudG8taW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvYmplY3QsIGVsKXtcbiAgdmFyIE8gICAgICA9IHRvSU9iamVjdChvYmplY3QpXG4gICAgLCBrZXlzICAgPSAkLmdldEtleXMoTylcbiAgICAsIGxlbmd0aCA9IGtleXMubGVuZ3RoXG4gICAgLCBpbmRleCAgPSAwXG4gICAgLCBrZXk7XG4gIHdoaWxlKGxlbmd0aCA+IGluZGV4KWlmKE9ba2V5ID0ga2V5c1tpbmRleCsrXV0gPT09IGVsKXJldHVybiBrZXk7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzLyQua2V5b2YuanNcbiAqKiBtb2R1bGUgaWQgPSAzMVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gdG8gaW5kZXhlZCBvYmplY3QsIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vJC5pb2JqZWN0JylcbiAgLCBkZWZpbmVkID0gcmVxdWlyZSgnLi8kLmRlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gSU9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzLyQudG8taW9iamVjdC5qc1xuICoqIG1vZHVsZSBpZCA9IDMyXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vJC5jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBjb2YoaXQpID09ICdTdHJpbmcnID8gaXQuc3BsaXQoJycpIDogT2JqZWN0KGl0KTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5pb2JqZWN0LmpzXG4gKiogbW9kdWxlIGlkID0gMzNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5jb2YuanNcbiAqKiBtb2R1bGUgaWQgPSAzNFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gNy4yLjEgUmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudClcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICBpZihpdCA9PSB1bmRlZmluZWQpdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzLyQuZGVmaW5lZC5qc1xuICoqIG1vZHVsZSBpZCA9IDM1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi8kLnRvLWlvYmplY3QnKVxuICAsIGdldE5hbWVzICA9IHJlcXVpcmUoJy4vJCcpLmdldE5hbWVzXG4gICwgdG9TdHJpbmcgID0ge30udG9TdHJpbmc7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNcbiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XG5cbnZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uKGl0KXtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZ2V0TmFtZXMoaXQpO1xuICB9IGNhdGNoKGUpe1xuICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5nZXQgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KXtcbiAgaWYod2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XScpcmV0dXJuIGdldFdpbmRvd05hbWVzKGl0KTtcbiAgcmV0dXJuIGdldE5hbWVzKHRvSU9iamVjdChpdCkpO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLmdldC1uYW1lcy5qc1xuICoqIG1vZHVsZSBpZCA9IDM2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvLyBhbGwgZW51bWVyYWJsZSBvYmplY3Qga2V5cywgaW5jbHVkZXMgc3ltYm9sc1xudmFyICQgPSByZXF1aXJlKCcuLyQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICB2YXIga2V5cyAgICAgICA9ICQuZ2V0S2V5cyhpdClcbiAgICAsIGdldFN5bWJvbHMgPSAkLmdldFN5bWJvbHM7XG4gIGlmKGdldFN5bWJvbHMpe1xuICAgIHZhciBzeW1ib2xzID0gZ2V0U3ltYm9scyhpdClcbiAgICAgICwgaXNFbnVtICA9ICQuaXNFbnVtXG4gICAgICAsIGkgICAgICAgPSAwXG4gICAgICAsIGtleTtcbiAgICB3aGlsZShzeW1ib2xzLmxlbmd0aCA+IGkpaWYoaXNFbnVtLmNhbGwoaXQsIGtleSA9IHN5bWJvbHNbaSsrXSkpa2V5cy5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIGtleXM7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzLyQuZW51bS1rZXlzLmpzXG4gKiogbW9kdWxlIGlkID0gMzdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIDcuMi4yIElzQXJyYXkoYXJndW1lbnQpXG52YXIgY29mID0gcmVxdWlyZSgnLi8kLmNvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uKGFyZyl7XG4gIHJldHVybiBjb2YoYXJnKSA9PSAnQXJyYXknO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLmlzLWFycmF5LmpzXG4gKiogbW9kdWxlIGlkID0gMzhcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vJC5pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICBpZighaXNPYmplY3QoaXQpKXRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLmFuLW9iamVjdC5qc1xuICoqIG1vZHVsZSBpZCA9IDM5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5pcy1vYmplY3QuanNcbiAqKiBtb2R1bGUgaWQgPSA0MFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSB0cnVlO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzLyQubGlicmFyeS5qc1xuICoqIG1vZHVsZSBpZCA9IDQxXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vZ2V0LWl0ZXJhdG9yXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vYmFiZWwtcnVudGltZS9jb3JlLWpzL2dldC1pdGVyYXRvci5qc1xuICoqIG1vZHVsZSBpZCA9IDQzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJyZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9tb2R1bGVzL2NvcmUuZ2V0LWl0ZXJhdG9yJyk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L2ZuL2dldC1pdGVyYXRvci5qc1xuICoqIG1vZHVsZSBpZCA9IDQ0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJyZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vJC5pdGVyYXRvcnMnKTtcbkl0ZXJhdG9ycy5Ob2RlTGlzdCA9IEl0ZXJhdG9ycy5IVE1MQ29sbGVjdGlvbiA9IEl0ZXJhdG9ycy5BcnJheTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzXG4gKiogbW9kdWxlIGlkID0gNDVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi8kLmFkZC10by11bnNjb3BhYmxlcycpXG4gICwgc3RlcCAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vJC5pdGVyLXN0ZXAnKVxuICAsIEl0ZXJhdG9ycyAgICAgICAgPSByZXF1aXJlKCcuLyQuaXRlcmF0b3JzJylcbiAgLCB0b0lPYmplY3QgICAgICAgID0gcmVxdWlyZSgnLi8kLnRvLWlvYmplY3QnKTtcblxuLy8gMjIuMS4zLjQgQXJyYXkucHJvdG90eXBlLmVudHJpZXMoKVxuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKClcbi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKClcbi8vIDIyLjEuMy4zMCBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLyQuaXRlci1kZWZpbmUnKShBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24oaXRlcmF0ZWQsIGtpbmQpe1xuICB0aGlzLl90ID0gdG9JT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAvLyBraW5kXG4vLyAyMi4xLjUuMi4xICVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uKCl7XG4gIHZhciBPICAgICA9IHRoaXMuX3RcbiAgICAsIGtpbmQgID0gdGhpcy5fa1xuICAgICwgaW5kZXggPSB0aGlzLl9pKys7XG4gIGlmKCFPIHx8IGluZGV4ID49IE8ubGVuZ3RoKXtcbiAgICB0aGlzLl90ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiBzdGVwKDEpO1xuICB9XG4gIGlmKGtpbmQgPT0gJ2tleXMnICApcmV0dXJuIHN0ZXAoMCwgaW5kZXgpO1xuICBpZihraW5kID09ICd2YWx1ZXMnKXJldHVybiBzdGVwKDAsIE9baW5kZXhdKTtcbiAgcmV0dXJuIHN0ZXAoMCwgW2luZGV4LCBPW2luZGV4XV0pO1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyUgKDkuNC40LjYsIDkuNC40LjcpXG5JdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IuanNcbiAqKiBtb2R1bGUgaWQgPSA0NlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpeyAvKiBlbXB0eSAqLyB9O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzLyQuYWRkLXRvLXVuc2NvcGFibGVzLmpzXG4gKiogbW9kdWxlIGlkID0gNDdcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZG9uZSwgdmFsdWUpe1xuICByZXR1cm4ge3ZhbHVlOiB2YWx1ZSwgZG9uZTogISFkb25lfTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5pdGVyLXN0ZXAuanNcbiAqKiBtb2R1bGUgaWQgPSA0OFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLml0ZXJhdG9ycy5qc1xuICoqIG1vZHVsZSBpZCA9IDQ5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSAgICAgICAgPSByZXF1aXJlKCcuLyQubGlicmFyeScpXG4gICwgJGV4cG9ydCAgICAgICAgPSByZXF1aXJlKCcuLyQuZXhwb3J0JylcbiAgLCByZWRlZmluZSAgICAgICA9IHJlcXVpcmUoJy4vJC5yZWRlZmluZScpXG4gICwgaGlkZSAgICAgICAgICAgPSByZXF1aXJlKCcuLyQuaGlkZScpXG4gICwgaGFzICAgICAgICAgICAgPSByZXF1aXJlKCcuLyQuaGFzJylcbiAgLCBJdGVyYXRvcnMgICAgICA9IHJlcXVpcmUoJy4vJC5pdGVyYXRvcnMnKVxuICAsICRpdGVyQ3JlYXRlICAgID0gcmVxdWlyZSgnLi8kLml0ZXItY3JlYXRlJylcbiAgLCBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vJC5zZXQtdG8tc3RyaW5nLXRhZycpXG4gICwgZ2V0UHJvdG8gICAgICAgPSByZXF1aXJlKCcuLyQnKS5nZXRQcm90b1xuICAsIElURVJBVE9SICAgICAgID0gcmVxdWlyZSgnLi8kLndrcycpKCdpdGVyYXRvcicpXG4gICwgQlVHR1kgICAgICAgICAgPSAhKFtdLmtleXMgJiYgJ25leHQnIGluIFtdLmtleXMoKSkgLy8gU2FmYXJpIGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxuICAsIEZGX0lURVJBVE9SICAgID0gJ0BAaXRlcmF0b3InXG4gICwgS0VZUyAgICAgICAgICAgPSAna2V5cydcbiAgLCBWQUxVRVMgICAgICAgICA9ICd2YWx1ZXMnO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCl7XG4gICRpdGVyQ3JlYXRlKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcbiAgdmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uKGtpbmQpe1xuICAgIGlmKCFCVUdHWSAmJiBraW5kIGluIHByb3RvKXJldHVybiBwcm90b1traW5kXTtcbiAgICBzd2l0Y2goa2luZCl7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCl7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKXsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgfTtcbiAgdmFyIFRBRyAgICAgICAgPSBOQU1FICsgJyBJdGVyYXRvcidcbiAgICAsIERFRl9WQUxVRVMgPSBERUZBVUxUID09IFZBTFVFU1xuICAgICwgVkFMVUVTX0JVRyA9IGZhbHNlXG4gICAgLCBwcm90byAgICAgID0gQmFzZS5wcm90b3R5cGVcbiAgICAsICRuYXRpdmUgICAgPSBwcm90b1tJVEVSQVRPUl0gfHwgcHJvdG9bRkZfSVRFUkFUT1JdIHx8IERFRkFVTFQgJiYgcHJvdG9bREVGQVVMVF1cbiAgICAsICRkZWZhdWx0ICAgPSAkbmF0aXZlIHx8IGdldE1ldGhvZChERUZBVUxUKVxuICAgICwgbWV0aG9kcywga2V5O1xuICAvLyBGaXggbmF0aXZlXG4gIGlmKCRuYXRpdmUpe1xuICAgIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvKCRkZWZhdWx0LmNhbGwobmV3IEJhc2UpKTtcbiAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JQcm90b3R5cGUsIFRBRywgdHJ1ZSk7XG4gICAgLy8gRkYgZml4XG4gICAgaWYoIUxJQlJBUlkgJiYgaGFzKHByb3RvLCBGRl9JVEVSQVRPUikpaGlkZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgICBpZihERUZfVkFMVUVTICYmICRuYXRpdmUubmFtZSAhPT0gVkFMVUVTKXtcbiAgICAgIFZBTFVFU19CVUcgPSB0cnVlO1xuICAgICAgJGRlZmF1bHQgPSBmdW5jdGlvbiB2YWx1ZXMoKXsgcmV0dXJuICRuYXRpdmUuY2FsbCh0aGlzKTsgfTtcbiAgICB9XG4gIH1cbiAgLy8gRGVmaW5lIGl0ZXJhdG9yXG4gIGlmKCghTElCUkFSWSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKXtcbiAgICBoaWRlKHByb3RvLCBJVEVSQVRPUiwgJGRlZmF1bHQpO1xuICB9XG4gIC8vIFBsdWcgZm9yIGxpYnJhcnlcbiAgSXRlcmF0b3JzW05BTUVdID0gJGRlZmF1bHQ7XG4gIEl0ZXJhdG9yc1tUQUddICA9IHJldHVyblRoaXM7XG4gIGlmKERFRkFVTFQpe1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6ICBERUZfVkFMVUVTICA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiAgICBJU19TRVQgICAgICA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogIURFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZCgnZW50cmllcycpXG4gICAgfTtcbiAgICBpZihGT1JDRUQpZm9yKGtleSBpbiBtZXRob2RzKXtcbiAgICAgIGlmKCEoa2V5IGluIHByb3RvKSlyZWRlZmluZShwcm90bywga2V5LCBtZXRob2RzW2tleV0pO1xuICAgIH0gZWxzZSAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChCVUdHWSB8fCBWQUxVRVNfQlVHKSwgTkFNRSwgbWV0aG9kcyk7XG4gIH1cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzLyQuaXRlci1kZWZpbmUuanNcbiAqKiBtb2R1bGUgaWQgPSA1MFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi8kJylcbiAgLCBkZXNjcmlwdG9yICAgICA9IHJlcXVpcmUoJy4vJC5wcm9wZXJ0eS1kZXNjJylcbiAgLCBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vJC5zZXQtdG8tc3RyaW5nLXRhZycpXG4gICwgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcblxuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vJC5oaWRlJykoSXRlcmF0b3JQcm90b3R5cGUsIHJlcXVpcmUoJy4vJC53a3MnKSgnaXRlcmF0b3InKSwgZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXM7IH0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KXtcbiAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gJC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHtuZXh0OiBkZXNjcmlwdG9yKDEsIG5leHQpfSk7XG4gIHNldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBOQU1FICsgJyBJdGVyYXRvcicpO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLml0ZXItY3JlYXRlLmpzXG4gKiogbW9kdWxlIGlkID0gNTFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcbnZhciAkYXQgID0gcmVxdWlyZSgnLi8kLnN0cmluZy1hdCcpKHRydWUpO1xuXG4vLyAyMS4xLjMuMjcgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuLyQuaXRlci1kZWZpbmUnKShTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbihpdGVyYXRlZCl7XG4gIHRoaXMuX3QgPSBTdHJpbmcoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbi8vIDIxLjEuNS4yLjEgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uKCl7XG4gIHZhciBPICAgICA9IHRoaXMuX3RcbiAgICAsIGluZGV4ID0gdGhpcy5faVxuICAgICwgcG9pbnQ7XG4gIGlmKGluZGV4ID49IE8ubGVuZ3RoKXJldHVybiB7dmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZX07XG4gIHBvaW50ID0gJGF0KE8sIGluZGV4KTtcbiAgdGhpcy5faSArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiB7dmFsdWU6IHBvaW50LCBkb25lOiBmYWxzZX07XG59KTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yLmpzXG4gKiogbW9kdWxlIGlkID0gNTJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLyQudG8taW50ZWdlcicpXG4gICwgZGVmaW5lZCAgID0gcmVxdWlyZSgnLi8kLmRlZmluZWQnKTtcbi8vIHRydWUgIC0+IFN0cmluZyNhdFxuLy8gZmFsc2UgLT4gU3RyaW5nI2NvZGVQb2ludEF0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFRPX1NUUklORyl7XG4gIHJldHVybiBmdW5jdGlvbih0aGF0LCBwb3Mpe1xuICAgIHZhciBzID0gU3RyaW5nKGRlZmluZWQodGhhdCkpXG4gICAgICAsIGkgPSB0b0ludGVnZXIocG9zKVxuICAgICAgLCBsID0gcy5sZW5ndGhcbiAgICAgICwgYSwgYjtcbiAgICBpZihpIDwgMCB8fCBpID49IGwpcmV0dXJuIFRPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGEgPSBzLmNoYXJDb2RlQXQoaSk7XG4gICAgcmV0dXJuIGEgPCAweGQ4MDAgfHwgYSA+IDB4ZGJmZiB8fCBpICsgMSA9PT0gbCB8fCAoYiA9IHMuY2hhckNvZGVBdChpICsgMSkpIDwgMHhkYzAwIHx8IGIgPiAweGRmZmZcbiAgICAgID8gVE9fU1RSSU5HID8gcy5jaGFyQXQoaSkgOiBhXG4gICAgICA6IFRPX1NUUklORyA/IHMuc2xpY2UoaSwgaSArIDIpIDogKGEgLSAweGQ4MDAgPDwgMTApICsgKGIgLSAweGRjMDApICsgMHgxMDAwMDtcbiAgfTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvJC5zdHJpbmctYXQuanNcbiAqKiBtb2R1bGUgaWQgPSA1M1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiLy8gNy4xLjQgVG9JbnRlZ2VyXG52YXIgY2VpbCAgPSBNYXRoLmNlaWxcbiAgLCBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2NvcmUtanMvbGlicmFyeS9tb2R1bGVzLyQudG8taW50ZWdlci5qc1xuICoqIG1vZHVsZSBpZCA9IDU0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLyQuYW4tb2JqZWN0JylcbiAgLCBnZXQgICAgICA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vJC5jb3JlJykuZ2V0SXRlcmF0b3IgPSBmdW5jdGlvbihpdCl7XG4gIHZhciBpdGVyRm4gPSBnZXQoaXQpO1xuICBpZih0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgaXRlcmFibGUhJyk7XG4gIHJldHVybiBhbk9iamVjdChpdGVyRm4uY2FsbChpdCkpO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci5qc1xuICoqIG1vZHVsZSBpZCA9IDU1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJ2YXIgY2xhc3NvZiAgID0gcmVxdWlyZSgnLi8kLmNsYXNzb2YnKVxuICAsIElURVJBVE9SICA9IHJlcXVpcmUoJy4vJC53a3MnKSgnaXRlcmF0b3InKVxuICAsIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vJC5pdGVyYXRvcnMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi8kLmNvcmUnKS5nZXRJdGVyYXRvck1ldGhvZCA9IGZ1bmN0aW9uKGl0KXtcbiAgaWYoaXQgIT0gdW5kZWZpbmVkKXJldHVybiBpdFtJVEVSQVRPUl1cbiAgICB8fCBpdFsnQEBpdGVyYXRvciddXG4gICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbn07XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kLmpzXG4gKiogbW9kdWxlIGlkID0gNTZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIGdldHRpbmcgdGFnIGZyb20gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXG52YXIgY29mID0gcmVxdWlyZSgnLi8kLmNvZicpXG4gICwgVEFHID0gcmVxdWlyZSgnLi8kLndrcycpKCd0b1N0cmluZ1RhZycpXG4gIC8vIEVTMyB3cm9uZyBoZXJlXG4gICwgQVJHID0gY29mKGZ1bmN0aW9uKCl7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT0gJ0FyZ3VtZW50cyc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICB2YXIgTywgVCwgQjtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlXG4gICAgOiB0eXBlb2YgKFQgPSAoTyA9IE9iamVjdChpdCkpW1RBR10pID09ICdzdHJpbmcnID8gVFxuICAgIC8vIGJ1aWx0aW5UYWcgY2FzZVxuICAgIDogQVJHID8gY29mKE8pXG4gICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFja1xuICAgIDogKEIgPSBjb2YoTykpID09ICdPYmplY3QnICYmIHR5cGVvZiBPLmNhbGxlZSA9PSAnZnVuY3Rpb24nID8gJ0FyZ3VtZW50cycgOiBCO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy8kLmNsYXNzb2YuanNcbiAqKiBtb2R1bGUgaWQgPSA1N1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgJ3Byb3RvLmpzJ1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzZXBhcmF0b3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBbZXNjYXBlQ2hhcl1cbiAqIEBwYXJhbSB7bnVtYmVyfSBbbGltaXRdXG4gKiBAcmV0dXJuIHtBcnJheTxzdHJpbmc+fVxuICovXG4kLnNwbGl0ID0gZnVuY3Rpb24oc3RyLCBzZXBhcmF0b3IsIGVzY2FwZUNoYXIsIGxpbWl0KSB7XG4gICAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3Ioc3RyICsgJyBpcyBub3QgYSBzdHJpbmcnKTtcbiAgICB9XG4gICAgc3RyID0gc3RyLnRvU3RyaW5nKCk7XG4gICAgaWYgKHR5cGVvZiBzZXBhcmF0b3IgPT09ICdudW1iZXInKVxuICAgICAgICBbbGltaXQsIHNlcGFyYXRvciwgZXNjYXBlQ2hhcl0gPSBbc2VwYXJhdG9yLCBudWxsLCBudWxsXVxuICAgIGVsc2UgaWYgKHR5cGVvZiBlc2NhcGVDaGFyID09PSAnbnVtYmVyJylcbiAgICAgICAgW2xpbWl0LCBlc2NhcGVDaGFyXSA9IFtlc2NhcGVDaGFyLCBudWxsXVxuXG4gICAgZnVuY3Rpb24gbGltaXRlZChpKSB7XG4gICAgICAgIHJldHVybiAwIDwgbGltaXQgJiYgbGltaXQgPD0gaSArIDE7XG4gICAgfVxuXG4gICAgbGV0IHBhcnRzID0gW107XG4gICAgbGV0IGkgPSAwO1xuICAgIGxldCBzID0gMDtcbiAgICBsZXQgcDtcbiAgICB3aGlsZSAoKHAgPSBzdHIuaW5kZXhPZihzZXBhcmF0b3IsIHMpKSAhPT0gLTEgJiYgIWxpbWl0ZWQoaSkpIHtcbiAgICAgICAgbGV0IHBhcnQgPSBzdHIuc2xpY2UocywgcCk7XG4gICAgICAgIGxldCBlc2NhcGVkID0gZmFsc2U7XG4gICAgICAgIGlmIChlc2NhcGVDaGFyICYmIHBhcnQuc2xpY2UoLTEpID09PSBlc2NhcGVDaGFyKSB7XG4gICAgICAgICAgICBwYXJ0ID0gcGFydC5zbGljZSgwLCAtMSk7XG4gICAgICAgICAgICBlc2NhcGVkID0gcGFydC5zbGljZSgtMSkgIT09IGVzY2FwZUNoYXI7XG4gICAgICAgICAgICBpZiAoZXNjYXBlZCkgcGFydCArPSBzZXBhcmF0b3I7XG4gICAgICAgIH1cbiAgICAgICAgcGFydHNbaV0gPSAocGFydHNbaV0gfHwgJycpICsgcGFydDtcbiAgICAgICAgcyA9IHAgKyAxO1xuICAgICAgICBpZiAoIWVzY2FwZWQpIGkrKztcbiAgICB9XG4gICAgaWYgKHMgPD0gc3RyLmxlbmd0aCkgcGFydHNbaV0gPSAocGFydHNbaV0gfHwgJycpICsgc3RyLnNsaWNlKHMpO1xuXG4gICAgcmV0dXJuIHBhcnRzO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgJC5zcGxpdDtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL3NwbGl0LmpzXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgJ3Byb3RvLmpzJ1xuaW1wb3J0ICcuL29iaidcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gcXVlcnlTdHJpbmdcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuJC5wYXJzZVF1ZXJ5U3RyaW5nID0gZnVuY3Rpb24ocXVlcnlTdHJpbmcsIG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIHF1ZXJ5U3RyaW5nICE9PSAnc3RyaW5nJyB8fCBxdWVyeVN0cmluZyA9PT0gJycpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgICBsZXQgcGFpcnMgPSBxdWVyeVN0cmluZy5zcGxpdCgvJmFtcDt8Ji9pKTtcbiAgICBpZiAoISQuaXNQbGFpbk9iamVjdChvcHRpb25zKSlcbiAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIGVsc2UgaWYgKG9wdGlvbnMuZXhjZXB0ICYmICEkLmlzQXJyYXkob3B0aW9ucy5leGNlcHQpKVxuICAgICAgICBvcHRpb25zLmV4Y2VwdCA9IFtvcHRpb25zLmV4Y2VwdF07XG4gICAgbGV0IG8gPSB7fTtcbiAgICBmb3IgKGxldCBwYWlyIG9mIHBhaXJzKSB7XG4gICAgICAgIGxldCBbbmFtZSwgdmFsdWVdID0gcGFpci5zcGxpdCgnPScpO1xuICAgICAgICBuYW1lID0gZGVjb2RlVVJJQ29tcG9uZW50KG5hbWUpO1xuICAgICAgICB2YWx1ZSA9IGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7XG4gICAgICAgIGlmIChvcHRpb25zLmV4Y2VwdCA9PSBudWxsIHx8ICFvcHRpb25zLmV4Y2VwdC5jb250YWlucyhuYW1lKSlcbiAgICAgICAgICAgICQub2JqLnNldCh0cnVlLCBvLCBuYW1lLCB2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiBvO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgJC5wYXJzZVF1ZXJ5U3RyaW5nO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvcGFyc2VRdWVyeVN0cmluZy5qc1xuICoqLyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2lzSXRlcmFibGUyID0gcmVxdWlyZShcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9pcy1pdGVyYWJsZVwiKTtcblxudmFyIF9pc0l0ZXJhYmxlMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzSXRlcmFibGUyKTtcblxudmFyIF9nZXRJdGVyYXRvcjIgPSByZXF1aXJlKFwiYmFiZWwtcnVudGltZS9jb3JlLWpzL2dldC1pdGVyYXRvclwiKTtcblxudmFyIF9nZXRJdGVyYXRvcjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRJdGVyYXRvcjIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSAoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkge1xuICAgIHZhciBfYXJyID0gW107XG4gICAgdmFyIF9uID0gdHJ1ZTtcbiAgICB2YXIgX2QgPSBmYWxzZTtcbiAgICB2YXIgX2UgPSB1bmRlZmluZWQ7XG5cbiAgICB0cnkge1xuICAgICAgZm9yICh2YXIgX2kgPSAoMCwgX2dldEl0ZXJhdG9yMy5kZWZhdWx0KShhcnIpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkge1xuICAgICAgICBfYXJyLnB1c2goX3MudmFsdWUpO1xuXG4gICAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhaztcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIF9kID0gdHJ1ZTtcbiAgICAgIF9lID0gZXJyO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdKSBfaVtcInJldHVyblwiXSgpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKF9kKSB0aHJvdyBfZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gX2FycjtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkge1xuICAgICAgcmV0dXJuIGFycjtcbiAgICB9IGVsc2UgaWYgKCgwLCBfaXNJdGVyYWJsZTMuZGVmYXVsdCkoT2JqZWN0KGFycikpKSB7XG4gICAgICByZXR1cm4gc2xpY2VJdGVyYXRvcihhcnIsIGkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTtcbiAgICB9XG4gIH07XG59KSgpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2JhYmVsLXJ1bnRpbWUvaGVscGVycy9zbGljZWRUb0FycmF5LmpzXG4gKiogbW9kdWxlIGlkID0gNjBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9pcy1pdGVyYWJsZVwiKSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9pcy1pdGVyYWJsZS5qc1xuICoqIG1vZHVsZSBpZCA9IDYxXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJyZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9tb2R1bGVzL2NvcmUuaXMtaXRlcmFibGUnKTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvZm4vaXMtaXRlcmFibGUuanNcbiAqKiBtb2R1bGUgaWQgPSA2MlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwidmFyIGNsYXNzb2YgICA9IHJlcXVpcmUoJy4vJC5jbGFzc29mJylcbiAgLCBJVEVSQVRPUiAgPSByZXF1aXJlKCcuLyQud2tzJykoJ2l0ZXJhdG9yJylcbiAgLCBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLyQuaXRlcmF0b3JzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vJC5jb3JlJykuaXNJdGVyYWJsZSA9IGZ1bmN0aW9uKGl0KXtcbiAgdmFyIE8gPSBPYmplY3QoaXQpO1xuICByZXR1cm4gT1tJVEVSQVRPUl0gIT09IHVuZGVmaW5lZFxuICAgIHx8ICdAQGl0ZXJhdG9yJyBpbiBPXG4gICAgfHwgSXRlcmF0b3JzLmhhc093blByb3BlcnR5KGNsYXNzb2YoTykpO1xufTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9jb3JlLmlzLWl0ZXJhYmxlLmpzXG4gKiogbW9kdWxlIGlkID0gNjNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0ICdwcm90by5qcydcblxuLyoqXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGRhdGFBbmRFdmVudHNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gZGVlcERhdGFBbmRFdmVudHNcbiAqIEByZXR1cm4ge2pRdWVyeTxIVE1MRWxlbWVudD59XG4gKi9cbiQuZm4ucmVjbG9uZSA9IGZ1bmN0aW9uKGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCkge1xuICAgICAgICBsZXQgb2xkRWxlbSA9ICQodGhpcyk7XG4gICAgICAgIGxldCBuZXdFbGVtID0gb2xkRWxlbS5jbG9uZShkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyk7XG4gICAgICAgIG5ld0VsZW0uaW5zZXJ0QWZ0ZXIodGhpcyk7XG4gICAgICAgIG9sZEVsZW0ucmVtb3ZlKCk7XG4gICAgICAgIHJldHVybiBuZXdFbGVtWzBdO1xuICAgIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgJC5mbi5yZWNsb25lO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvcmVjbG9uZS5qc1xuICoqLyIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0ICdwcm90by5qcydcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJlZml4XG4gKiBAcGFyYW0ge0FycmF5PHtuYW1lLHZhbHVlfT59IHBhcmFtc1xuICogQHJldHVybiB7bnVtYmVyfSBsZW5ndGggb2YgcGFyYW1ldGVyc1xuICovXG4kLnJlaW5kZXhBcnJheVBhcmFtcyA9IGZ1bmN0aW9uKHByZWZpeCwgcGFyYW1zKSB7XG4gICAgY29uc3QgcmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBwcmVmaXgucmVwbGFjZSgnLicsICdcXFxcLicpICsgJylcXFxcWyhcXFxcZCspXFxcXF0nKTtcbiAgICBsZXQgcHJldkluZGV4ID0gbnVsbDtcbiAgICBsZXQgaW5kZXggPSAtMTtcbiAgICBmb3IgKGxldCBwYXJhbSBvZiBwYXJhbXMpIHtcbiAgICAgICAgbGV0IHJlc3VsdHMgPSByZWdleC5leGVjKHBhcmFtLm5hbWUpO1xuICAgICAgICBpZiAocmVzdWx0cykge1xuICAgICAgICAgICAgbGV0IGN1cnJJbmRleCA9IHJlc3VsdHNbMl07XG4gICAgICAgICAgICBpZiAocHJldkluZGV4ICE9PSBjdXJySW5kZXgpIHtcbiAgICAgICAgICAgICAgICBwcmV2SW5kZXggPSBjdXJySW5kZXg7XG4gICAgICAgICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhcmFtLm5hbWUgPSBwYXJhbS5uYW1lLnJlcGxhY2UocmVnZXgsICckMVsnICsgaW5kZXggKyAnXScpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpbmRleDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0ICQucmVpbmRleEFycmF5UGFyYW1zO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvcmVpbmRleEFycmF5UGFyYW1zLmpzXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgJ3Byb3RvLmpzJ1xuXG5leHBvcnQgZGVmYXVsdCAkLmZuLnJldmVyc2UgPSBBcnJheS5wcm90b3R5cGUucmV2ZXJzZTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL3JldmVyc2UuanNcbiAqKi8iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCAncHJvdG8uanMnXG5cbi8qKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuJC5mbi5zZXJpYWxpemVPYmplY3QgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgaWYgKCEkLmlzUGxhaW5PYmplY3Qob3B0aW9ucykpXG4gICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICBlbHNlIGlmIChvcHRpb25zLmV4Y2VwdCAmJiAhJC5pc0FycmF5KG9wdGlvbnMuZXhjZXB0KSlcbiAgICAgICAgb3B0aW9ucy5leGNlcHQgPSBbb3B0aW9ucy5leGNlcHRdO1xuICAgIGxldCByZXN1bHQgPSB7fTtcbiAgICAkLmVhY2godGhpcy5zZXJpYWxpemVBcnJheSgpLCBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuZXhjZXB0ID09IG51bGwgfHwgIW9wdGlvbnMuZXhjZXB0LmNvbnRhaW5zKHRoaXMubmFtZSkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm5hbWUgaW4gcmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgaWYgKCEkLmlzQXJyYXkocmVzdWx0W3RoaXMubmFtZV0pKVxuICAgICAgICAgICAgICAgICAgICByZXN1bHRbdGhpcy5uYW1lXSA9IFtyZXN1bHRbdGhpcy5uYW1lXSwgdGhpcy52YWx1ZV07XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICByZXN1bHRbdGhpcy5uYW1lXS5wdXNoKHRoaXMudmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSByZXN1bHRbdGhpcy5uYW1lXSA9IHRoaXMudmFsdWU7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgJC5mbi5zZXJpYWxpemVPYmplY3Q7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9zZXJpYWxpemVPYmplY3QuanNcbiAqKi8iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCAncHJvdG8uanMnXG5cbi8qKlxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGl0ZW1zXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHBhcmFtIHsqfSBbY29udGV4dF1cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbiQuc29tZSA9IGZ1bmN0aW9uKGl0ZW1zLCBjYWxsYmFjaywgY29udGV4dCkge1xuICAgIGlmICghJC5pc0Z1bmN0aW9uKGNhbGxiYWNrKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGNhbGxiYWNrICsgXCIgaXMgbm90IGEgZnVuY3Rpb25cIik7XG4gICAgfVxuICAgIGlmICgkLmlzQXJyYXkoaXRlbXMpKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChjYWxsYmFjay5jYWxsKGNvbnRleHQgfHwgaXRlbXMsIGl0ZW1zW2ldLCBpLCBpdGVtcykpIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKCQuaXNQbGFpbk9iamVjdChpdGVtcykpIHtcbiAgICAgICAgZm9yIChsZXQga2V5IGluIGl0ZW1zKSB7XG4gICAgICAgICAgICBpZiAoaXRlbXMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjay5jYWxsKGNvbnRleHQgfHwgaXRlbXMsIGl0ZW1zW2tleV0sIGtleSwgaXRlbXMpKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHRocm93IG5ldyBUeXBlRXJyb3IoaXRlbXMgKyBcIiBpcyBub3QgYXJyYXkgb3IgcGxhaW4gb2JqZWN0XCIpO1xuXG4gICAgcmV0dXJuIGZhbHNlO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgJC5zb21lO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvc29tZS5qc1xuICoqLyIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0ICdwcm90by5qcydcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuJC5zdXBwb3J0c0lucHV0VHlwZSA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICBsZXQgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgIGlucHV0LnNldEF0dHJpYnV0ZSgndHlwZScsIHR5cGUpO1xuICAgIHJldHVybiBpbnB1dC50eXBlID09PSB0eXBlO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgJC5zdXBwb3J0c0lucHV0VHlwZTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL3N1cHBvcnRzSW5wdXRUeXBlLmpzXG4gKiovIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgJ3Byb3RvLmpzJ1xuXG4vKipcbiAqIEBwYXJhbSB7WE1MfSB4bWxOb2RlIHRoZSB4bWwgbm9kZS5cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuJC54bWxUb1N0cmluZyA9IGZ1bmN0aW9uKHhtbE5vZGUpIHtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gKG5ldyBYTUxTZXJpYWxpemVyKCkpLnNlcmlhbGl6ZVRvU3RyaW5nKHhtbE5vZGUpO1xuICAgIH0gY2F0Y2ggKF9lcnJvcikge1xuICAgICAgICBpZiAoeG1sTm9kZS54bWwgPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlhNTFNlcmlhbGl6ZXIgbm90IHN1cHBvcnRlZFwiKTtcblxuICAgICAgICByZXR1cm4geG1sTm9kZS54bWw7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgJC54bWxUb1N0cmluZztcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL3htbFRvU3RyaW5nLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
